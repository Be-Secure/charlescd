{
  "openapi": "3.0.0",
  "info": {
    "title": "Hermes APIs",
    "description": "Charles Hermes APIs prototype",
    "version": "0.0.1",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "security": [
    {}
  ],
  "paths": {
    "/v1/subscriptions": {
      "post": {
        "tags": [
          "Subscription V1"
        ],
        "operationId": "subscribe",
        "summary": "Create a subscription for your application",
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "url": {
                    "type": "string",
                    "maximum": 100,
                    "required": true,
                    "description": "The url to be called"
                  },
                  "apiKey": {
                    "type": "string",
                    "required": false,
                    "description": "The app key to be used for invoking the webhook"
                  }
                }
              },
              "example": {
                "url": "https://jenkins.com/deployment",
                "apiKey": "abc-123-HoOK"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the subscription id when the request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "944c66f7-5583-4273-87a2-e1fd2206ce5f",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "When auth token not present"
          }
        }
      }
    },
    "/v1/subscriptions/{subscriptionId}": {
      "delete": {
        "operationId": "cancelSubscription",
        "tags": [
          "Subscription V1"
        ],
        "summary": "Cancels the requested subscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The subscription that is wanted to be removed",
            "example": "944c66f7-5583-4273-87a2-e1fd2206ce5f"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "When the subscription is deleted successfully"
          },
          "403": {
            "description": "When auth token not present"
          }
        }
      }
    },
    "/v1/subscriptions/{subscriptionId}/publish": {
      "post": {
        "summary": "Publish a new event to the subscription",
        "operationId": "publishEvent",
        "tags": [
          "Subscription V1"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The subscription that wants to publish into",
            "example": "944c66f7-5583-4273-87a2-e1fd2206ce5f"
          }
        ],
        "security": [
          {
            "app_key": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "eventType": {
                    "type": "string",
                    "required": false,
                    "description": "The event type of your application (if is wanted to search history with this field)",
                    "example": "DEPLOYMENT"
                  },
                  "event": {
                    "type": "object",
                    "required": true,
                    "description": "The event to be sent, it will be sent as a body in te request.",
                    "example": {
                      "deploymentId": "123",
                      "deploymentStatus": "FAILED"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When the event is published successfully"
          },
          "403": {
            "description": "When auth token not present"
          }
        }
      }
    },
    "/v1/subscriptions/{subscriptionId}/history": {
      "get": {
        "operationId": "subscriptionHistory",
        "summary": "Get the subscription history",
        "description": "Get the subscription history for the given subscription, being able to filter with additional filters, such as event type, execution status and others.",
        "tags": [
          "Subscription V1"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The subscription that wants to search the history",
            "example": "944c66f7-5583-4273-87a2-e1fd2206ce5f"
          },
          {
            "name": "eventType",
            "in": "query",
            "required": false,
            "description": "If wants to filter by the event type",
            "example": "DEPLOYMENT"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "If wants to filter by the event type",
            "examples": {
              "deliverySuccess": {
                "value": "DELIVERED",
                "description": "Filter events that were delivered successfully"
              },
              "deliveryFailed": {
                "value": "DELIVERY_FAILED",
                "description": "Filter events that were not delivered"
              },
              "eventsEnqueued": {
                "value": "ENQUEUED",
                "description": "Filter events that were enqueued successfully"
              }
            }
          },
          {
            "name": "eventField",
            "in": "query",
            "required": false,
            "description": "If wants to filter by some event field and value, is required when value is passed",
            "example": "deploymentId"
          },
          {
            "name": "eventValue",
            "in": "query",
            "required": false,
            "description": "If wants to filter by some event field and value, is required when field is passed",
            "example": "123"
          }
        ],
        "responses": {
          "200": {
            "description": "When it's ok"
          }
        }
      }
    },
    "/v1/subscriptions/{subscriptionId}/test-connection": {
      "get": {
        "operationId": "testConnection",
        "summary": "Verify if the subscription is working properly",
        "tags": [
          "Subscription V1"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "When the subscription is working fine"
          },
          "500": {
            "description": "When the subscription is not working properly",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection-test"
                }
              }
            }
          }
        }
      }
    },
    "/v1/subscriptions/test-connection": {
      "post": {
        "operationId": "testConnectionGeneric",
        "summary": "Verify if the subscription will work properly",
        "tags": [
          "Subscription V1"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The webhook URL",
                    "required": true
                  },
                  "appKey": {
                    "type": "string",
                    "description": "The webhook appKey. (If needed)",
                    "required": false
                  }
                },
                "example": {
                  "url": "https://jenkins.com/webhook",
                  "appKey": "key-abc-123"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When the subscription is working fine"
          },
          "500": {
            "description": "When the subscription is not working properly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection-test"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Used to get the username of the user and verify/assign it to the events"
      },
      "app_key": {
        "type": "apiKey",
        "name": "api-key",
        "in": "header",
        "description": "Used to publish events."
      }
    },
    "schemas": {
      "connection-test": {
        "properties": {
          "errorCode": {
            "type": "number",
            "description": "The http code returned by the webhook"
          },
          "message": {
            "type": "string",
            "description": "The message describing the possible error"
          }
        },
        "example": {
          "errorCode": "503",
          "message": "The webhook service is not available"
        }
      }
    }
  }
}