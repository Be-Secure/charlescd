{"version":3,"sources":["core/providers/base/index.ts","core/state/hooks.ts","core/components/LabeledIcon/styled.tsx","core/components/LabeledIcon/index.tsx","core/components/Form/SearchInput/styled.tsx","core/components/Form/SearchInput/index.tsx","core/components/Form/Input/styled.ts","core/components/Form/Input/index.tsx","core/components/Page/styled.ts","core/components/Page/index.tsx","core/enums/HttpStatus.ts","core/providers/auth.ts","core/utils/routes.ts","core/providers/base/hooks.ts","core/providers/workspace.ts","modules/Settings/Workspaces/hooks.ts","modules/Settings/Workspaces/styled.ts","modules/Settings/Workspaces/Menu/styled.ts","modules/Settings/Workspaces/Menu/MenuItem.tsx","modules/Settings/Workspaces/Menu/Loaders/list.tsx","modules/Settings/Workspaces/Menu/Loaders/index.tsx","modules/Settings/Workspaces/Menu/index.tsx","modules/Settings/Workspaces/index.tsx"],"names":["buildHeaders","Accept","Authorization","getAccessToken","getApplicationId","getCircleId","basePath","window","ENVIRONMENT","REACT_APP_API_URI","baseRequest","url","body","undefined","options","defaultOptions","headers","isString","JSON","stringify","mergedOptions","defaultsDeep","fetch","then","response","ok","Promise","reject","useGlobalState","cb","useContext","store","useDispatch","dispatch","useCallback","Wrapper","styled","div","Label","marginContent","Icon","theme","labeledIcon","color","LabeledIcon","children","icon","className","size","data-testid","name","props","devProps","isFocused","input","search","focus","Input","InputComponent","SearchInput","onSearch","rest","useState","setIsFocused","handleChange","debounce","htmlFor","id","onFocus","onBlur","onChange","event","currentTarget","value","type","css","label","borderColor","background","disabled","resume","React","forwardRef","ref","autoComplete","isEmpty","defaultValue","Page","Menu","menuPage","Content","HTTP_STATUS","endpoint","renewToken","refreshToken","data","method","redirectToLegacy","path","location","href","routes","login","renewTokenByCb","fn","catch","error","a","unauthorized","status","getRefreshToken","useFetch","req","setResponse","setError","loading","setLoading","mounted","useRef","trigger","args","json","current","useEffect","initialWorkspaceFilter","findAllWorkspace","filter","sizeFixed","params","URLSearchParams","useWorkspace","workspacesData","getWorkspace","filerWorkspace","console","loadedWorkspacesAction","Empty","SearchInputComponent","List","ul","ListItem","Actions","IconComponent","Link","memo","openedWorkspace","Text","h4","Loader","speed","width","height","viewBox","backgroundColor","foregroundColor","x","y","rx","ry","WorkspaceMenu","items","createWorkspace","h5","map","key","Placeholder","profileName","getProfileByKey","h1","align","Workspace","filterWorkspace","setName","list","workspaces","content"],"mappings":"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","file":"static/js/10.aaf5edd7.chunk.js","sourcesContent":["import defaultsDeep from 'lodash/defaultsDeep';\nimport isString from 'lodash/isString';\nimport { getAccessToken } from 'core/utils/auth';\nimport { getApplicationId } from 'core/utils/workspace';\nimport { getCircleId } from 'core/utils/circle';\n\nexport const buildHeaders = () => ({\n  Accept: 'application/json',\n  Authorization: `Bearer ${getAccessToken()}`,\n  'Content-Type': 'application/json',\n  'x-application-id': getApplicationId(),\n  'x-circle-id': getCircleId()\n});\n\nexport interface EnvVariables {\n  REACT_APP_API_URI: string;\n}\n\ndeclare global {\n  interface Window {\n    ENVIRONMENT: EnvVariables;\n  }\n}\n\nexport const basePath = window.ENVIRONMENT?.REACT_APP_API_URI || '/api';\n\nexport const baseRequest = (\n  url: string,\n  body: object | string | undefined = undefined,\n  options?: RequestInit\n): ((options: RequestInit) => Promise<Response>) => {\n  const defaultOptions = {\n    headers: buildHeaders(),\n    body: isString(body) ? body : JSON.stringify(body)\n  };\n  const mergedOptions = defaultsDeep(options, defaultOptions);\n\n  return (options?: RequestInit) =>\n    fetch(`${basePath}${url}`, defaultsDeep(mergedOptions, options)).then(\n      (response: Response) => {\n        if (!response.ok) {\n          return Promise.reject(response);\n        } else {\n          return response;\n        }\n      }\n    );\n};\n","import { useContext, useCallback } from 'react';\nimport store from './store';\nimport { State } from './interfaces/State';\n\nexport const useGlobalState = <T>(cb: (state: State) => T) => {\n  const [state] = useContext(store);\n\n  return cb(state);\n};\n\nexport const useDispatch = () => {\n  const [, dispatch] = useContext(store);\n  const stableDispatch = useCallback(dispatch, []);\n\n  return stableDispatch;\n};\n","import styled from 'styled-components';\nimport Icon from 'core/components/Icon';\n\ninterface LabelProps {\n  marginContent?: string;\n}\n\nconst Wrapper = styled.div`\n  cursor: pointer;\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst Label = styled.div<LabelProps>`\n  margin-left: ${({ marginContent }) => marginContent};\n`;\n\nconst StyledIcon = styled(Icon)`\n  color: ${({ theme }) => theme.labeledIcon.color};\n`;\n\nexport default {\n  Wrapper,\n  Icon: StyledIcon,\n  Label\n};\n","import React, { ReactNode } from 'react';\nimport Styled from './styled';\n\nexport interface Props {\n  children: ReactNode;\n  icon: string;\n  marginContent?: string;\n  size?: string;\n  className?: string;\n}\n\nconst LabeledIcon = ({\n  children,\n  icon,\n  className,\n  size = '15px',\n  marginContent = '5px'\n}: Props) => {\n  return (\n    <Styled.Wrapper className={className} data-testid={`labeledIcon-${icon}`}>\n      <Styled.Icon name={icon} size={size} />\n      <Styled.Label marginContent={marginContent}>{children}</Styled.Label>\n    </Styled.Wrapper>\n  );\n};\n\nexport default LabeledIcon;\n","import React from 'react';\nimport styled from 'styled-components';\nimport IconComponent, { Props as IconProps } from 'core/components/Icon';\nimport InputComponent from 'core/components/Form/Input';\n\ninterface Props extends IconProps {\n  isFocused?: boolean;\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Icon = styled((props: Props) => {\n  const devProps = { ...props };\n  delete devProps.isFocused;\n\n  return <IconComponent {...devProps} />;\n})<Props>`\n  cursor: text;\n  color: ${({ theme, isFocused }) => {\n    return isFocused\n      ? theme.input.search.focus.color\n      : theme.input.search.color;\n  }};\n`;\n\nconst Input = styled(InputComponent)`\n  width: 100%;\n  height: 39px;\n\n  input {\n    padding: 12px 12px 12px 5px;\n    font-size: 12px;\n  }\n`;\n\nexport default {\n  Wrapper,\n  Icon,\n  Input\n};\n","import React, { useState } from 'react';\nimport Styled from './styled';\nimport { Props as InputProps } from '../Input';\nimport debounce from 'lodash/debounce';\n\ninterface Props extends InputProps {\n  onSearch: (value: string) => void;\n}\n\nconst SearchInput = ({\n  name = 'search',\n  className,\n  onSearch,\n  ...rest\n}: Props) => {\n  const [isFocused, setIsFocused] = useState(false);\n\n  const handleChange = debounce(onSearch, 500);\n\n  const onFocus = () => setIsFocused(true);\n\n  const onBlur = () => setIsFocused(false);\n\n  return (\n    <Styled.Wrapper className={className}>\n      <label htmlFor=\"inputSearch\">\n        <Styled.Icon name=\"search\" isFocused={isFocused} />\n      </label>\n      <Styled.Input\n        {...rest}\n        name={name}\n        id=\"inputSearch\"\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onChange={event => handleChange(event.currentTarget.value)}\n      />\n    </Styled.Wrapper>\n  );\n};\n\nexport default SearchInput;\n","import { Ref } from 'react';\nimport styled, { css } from 'styled-components';\n\ninterface InputProps {\n  resume?: boolean;\n  ref?: Ref<HTMLInputElement>;\n}\n\ninterface WrapperProps {\n  type?: string;\n}\nconst Wrapper = styled.div<WrapperProps>`\n  position: relative;\n  height: 42px;\n  ${({ type }) =>\n    type === 'hidden' &&\n    css`\n      display: none;\n    `};\n`;\n\nconst Label = styled.label<{ isFocused: boolean }>`\n  position: absolute;\n  color: ${({ theme }) => theme.input.label};\n  font-size: 12px;\n  top: ${({ isFocused }) => (isFocused ? '0px' : '20px')};\n  transition: top 0.1s, font-size 0.1s;\n`;\n\nconst Input = styled.input<InputProps>`\n  position: absolute;\n  border-radius: 0;\n  border: none;\n  border-bottom: 1px solid ${({ theme }) => theme.input.borderColor};\n  box-sizing: border-box;\n  font-size: 14px;\n  width: 100%;\n  background-color: ${({ theme }) => theme.input.background};\n  color: ${({ theme }) => theme.input.color};\n  padding-bottom: 5px;\n  bottom: 0px;\n  :focus {\n    border-bottom-color: ${({ theme }) => theme.input.focus.borderColor};\n  }\n  :focus + ${Label} {\n    top: 0px;\n  }\n  :disabled {\n    color: ${({ theme }) => theme.input.disabled.color};\n    border-bottom-color: ${({ theme }) => theme.input.disabled.borderColor};\n  }\n  ${({ resume }) =>\n    resume &&\n    css`\n      background: transparent;\n      border: none;\n    `};\n`;\n\nexport default {\n  Wrapper,\n  Input,\n  Label\n};\n","import React, { Ref, useState } from 'react';\nimport { ChangeInputEvent, InputEvents } from 'core/interfaces/InputEvents';\nimport isEmpty from 'lodash/isEmpty';\nimport Styled from './styled';\n\nexport interface Props extends InputEvents {\n  id?: string;\n  className?: string;\n  resume?: boolean;\n  type?: string;\n  name?: string;\n  label?: string;\n  autoComplete?: string;\n  defaultValue?: string;\n  onChange?: (event: ChangeInputEvent) => void;\n  disabled?: boolean;\n}\n\nconst Input = React.forwardRef(\n  (\n    {\n      name,\n      label,\n      onChange,\n      className,\n      type = 'text',\n      disabled = false,\n      autoComplete = 'off',\n      ...rest\n    }: Props,\n    ref: Ref<HTMLInputElement>\n  ) => {\n    const [isFocused, setIsFocused] = useState(!isEmpty(rest.defaultValue));\n\n    const handleChange = (event: ChangeInputEvent) => {\n      setIsFocused(!isEmpty(event.currentTarget.value));\n\n      if (onChange) {\n        onChange(event);\n      }\n    };\n\n    return (\n      <Styled.Wrapper type={type} className={className}>\n        <Styled.Input\n          ref={ref}\n          type={type}\n          name={name}\n          data-testid={`input-${name}`}\n          autoComplete={autoComplete}\n          onChange={handleChange}\n          disabled={disabled}\n          {...rest}\n        />\n        {label && <Styled.Label isFocused={isFocused}>{label}</Styled.Label>}\n      </Styled.Wrapper>\n    );\n  }\n);\n\nexport default Input;\n","import styled from 'styled-components';\n\nconst Page = styled.div`\n  display: grid;\n  grid-template-areas: 'menu content';\n  grid-template-columns: 300px;\n  grid-template-rows: 100vh;\n`;\n\nconst Menu = styled.div`\n  grid-area: menu;\n  padding-top: 70px;\n  background-color: ${({ theme }) => theme.menuPage.background};\n`;\n\nconst Content = styled.div`\n  grid-area: content;\n  overflow-y: auto;\n  margin-bottom: 35px;\n`;\n\nexport default {\n  Page,\n  Menu,\n  Content\n};\n","import React, { ReactNode } from 'react';\n\nimport Styled from './styled';\n\ninterface Props {\n  children: ReactNode;\n  className?: string;\n}\n\nconst Page = ({ children, className }: Props) => (\n  <Styled.Page data-testid=\"page\" className={className}>\n    {children}\n  </Styled.Page>\n);\n\nPage.Menu = ({ children, className }: Props) => (\n  <Styled.Menu data-testid=\"page-menu\" className={className}>\n    {children}\n  </Styled.Menu>\n);\n\nPage.Content = ({ children, className }: Props) => (\n  <Styled.Content data-testid=\"page-content\" className={className}>\n    {children}\n  </Styled.Content>\n);\n\nexport default Page;\n","export enum HTTP_STATUS {\n  unauthorized = 401\n}\n","import { baseRequest } from './base';\n\nconst endpoint = '/auth/realms/darwin/protocol/openid-connect/token';\nconst headers = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\nconst clientId = 'darwin-client';\n\nexport const login = (username: string, password: string) => {\n  const grantType = 'password';\n  const data = `grant_type=${grantType}&client_id=${clientId}&username=${username}&password=${password}`;\n\n  return baseRequest(endpoint, data, { method: 'POST', headers });\n};\n\nexport const renewToken = (refreshToken: string) => {\n  const grantType = 'refresh_token';\n  const data = `grant_type=${grantType}&client_id=${clientId}&refresh_token=${refreshToken}`;\n\n  return baseRequest(endpoint, data, { method: 'POST', headers });\n};\n","import {\n  useHistory,\n  useLocation,\n  useParams,\n  useRouteMatch\n} from 'react-router-dom';\nimport forEach from 'lodash/forEach';\nimport replace from 'lodash/replace';\nimport toString from 'lodash/toString';\nimport routes from 'core/constants/routes';\n\nconst replaceRoute = (\n  path: string,\n  pathParams: string[],\n  params: (string | number)[]\n) => {\n  let newPath = path;\n\n  forEach(params, (param, index) => {\n    newPath = replace(newPath, pathParams[index], toString(params[index]));\n  });\n\n  return newPath;\n};\n\nconst getPath = (path = '', params: (string | number)[] = []): string => {\n  const pathParams = path.match(/:+\\w*/gi);\n\n  if (pathParams === null) {\n    return path;\n  }\n\n  if (pathParams.length !== params.length) {\n    return path;\n  }\n\n  return replaceRoute(path, pathParams, params);\n};\n\nconst useRouter = () => {\n  const navigate = useHistory();\n\n  return {\n    push: (path: string, ...args: (string | number)[]) =>\n      navigate.push(getPath(path, args)),\n    goBack: () => navigate.goBack(),\n    replace: (path: string, ...args: (string | number)[]) =>\n      navigate.replace(getPath(path, args)),\n    go: (index: number) => navigate.go(index)\n  };\n};\n\nconst redirectToLegacy = (path: string) => {\n  const { location } = window;\n  const { href } = location;\n\n  if (path === routes.login) {\n    location.href = `${path}?redirectTo=${href}`;\n  } else {\n    location.href = path;\n  }\n};\n\nexport {\n  useRouter,\n  useLocation,\n  useParams,\n  useRouteMatch,\n  redirectToLegacy,\n  getPath,\n  replaceRoute\n};\n","import { useEffect, useState, useCallback, useRef } from 'react';\nimport { HTTP_STATUS } from 'core/enums/HttpStatus';\nimport { renewToken } from '../auth';\nimport { getRefreshToken } from 'core/utils/auth';\nimport { redirectToLegacy } from 'core/utils/routes';\nimport routes from 'core/constants/routes';\n\ninterface FetchData<T> {\n  response: T;\n  error: Response;\n  loading: boolean;\n}\n\nconst renewTokenByCb = (fn: () => Promise<Response>) =>\n  fn().catch(async (error: Response) => {\n    if (HTTP_STATUS.unauthorized === error.status) {\n      try {\n        await renewToken(getRefreshToken())({});\n        return fn();\n      } catch (error) {\n        redirectToLegacy(routes.login);\n        return error;\n      }\n    } else {\n      return Promise.reject(error);\n    }\n  });\n\nexport const useFetch = <T>(\n  req: (...args: unknown[]) => (options: RequestInit) => Promise<Response>\n): [FetchData<T>, (...args: unknown[]) => void] => {\n  const [response, setResponse] = useState<T>();\n  const [error, setError] = useState<Response>(null);\n  const [loading, setLoading] = useState(false);\n  const mounted = useRef(true);\n\n  const trigger = useCallback(\n    async (...args: unknown[]) => {\n      setLoading(true);\n      try {\n        const response = await renewTokenByCb(() => req(...args)({}));\n        const data = await response.json();\n\n        if (mounted.current) setResponse(data);\n      } catch (error) {\n        if (mounted.current) setError(error);\n      } finally {\n        if (mounted.current) setLoading(false);\n      }\n    },\n    [req, mounted]\n  );\n\n  useEffect(() => {\n    return () => (mounted.current = false);\n  }, []);\n\n  return [{ response, error, loading }, trigger];\n};\n","import { baseRequest } from './base';\n\nconst endpoint = '/moove/applications';\n\nexport interface WorkspaceFilter {\n  name?: string;\n}\n\nconst initialWorkspaceFilter = {\n  name: ''\n};\n\nexport const findAllWorkspace = (\n  filter: WorkspaceFilter = initialWorkspaceFilter\n) => {\n  const sizeFixed = 200;\n  const params = new URLSearchParams({\n    size: `${sizeFixed}`,\n    name: filter?.name\n  });\n\n  return baseRequest(`${endpoint}?${params}`);\n};\n\nexport const findWorkspaceById = (id: string) =>\n  baseRequest(`${endpoint}/${id}`);\n","import { useEffect, useCallback } from 'react';\nimport { useFetch } from 'core/providers/base/hooks';\nimport { findAllWorkspace } from 'core/providers/workspace';\nimport { useDispatch } from 'core/state/hooks';\nimport { loadedWorkspacesAction } from './state/actions';\nimport { WorkspacePagination } from './interfaces/WorkspacePagination';\n\nexport const useWorkspace = (): [Function, Function] => {\n  const dispatch = useDispatch();\n  const [workspacesData, getWorkspace] = useFetch<WorkspacePagination>(\n    findAllWorkspace\n  );\n  const { response, error } = workspacesData;\n\n  const filerWorkspace = useCallback(\n    (name: string) => {\n      getWorkspace({ name });\n    },\n    [getWorkspace]\n  );\n\n  useEffect(() => {\n    if (!error) {\n      dispatch(loadedWorkspacesAction(response));\n    } else {\n      console.error(error);\n    }\n  }, [dispatch, response, error]);\n\n  return [filerWorkspace, getWorkspace];\n};\n\nexport default useWorkspace;\n","import styled from 'styled-components';\n\nconst Empty = styled.div`\n  margin: 48px 30px 18px 30px;\n`;\n\nconst Wrapper = styled.div`\n  display: block;\n  margin-top: 148px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 10%;\n`;\n\nexport default {\n  Empty,\n  Wrapper\n};\n","import styled from 'styled-components';\nimport LabeledIcon from 'core/components/LabeledIcon';\nimport SearchInputComponent from 'core/components/Form/SearchInput';\nimport IconComponent from 'core/components/Icon';\n\nconst SearchInput = styled(SearchInputComponent)`\n  margin: 15px 0;\n  padding: 0 16px;\n`;\n\nconst List = styled.ul`\n  padding: 0 16px;\n  margin: 0;\n  list-style-type: none;\n`;\n\nconst ListItem = styled(LabeledIcon)`\n  padding: 15px 0;\n  cursor: pointer;\n  display: flex;\n`;\n\nconst Content = styled.div`\n  height: calc(100vh - 200px);\n  overflow-y: auto;\n`;\n\nconst Actions = styled.div`\n  > * + * {\n    margin-left: 20px;\n  }\n  padding: 0 16px;\n`;\n\nconst Icon = styled(IconComponent)`\n  cursor: pointer;\n`;\n\nconst Link = styled.a`\n  text-decoration: none;\n`;\n\nexport default {\n  SearchInput,\n  List,\n  ListItem,\n  Content,\n  Actions,\n  Icon,\n  Link\n};\n","import React, { memo } from 'react';\nimport Text from 'core/components/Text';\nimport Styled from './styled';\nimport routes from 'core/constants/routes';\n\ninterface Props {\n  id: string;\n  name: string;\n}\n\nconst MenuItem = ({ id, name }: Props) => (\n  <Styled.Link href={`${routes.openedWorkspace}/${id}`}>\n    <Styled.ListItem icon=\"workspace\" marginContent=\"8px\">\n      <Text.h4 color=\"light\">{name}</Text.h4>\n    </Styled.ListItem>\n  </Styled.Link>\n);\n\nexport default memo(MenuItem);\n","import React, { FunctionComponent } from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport const Loader: FunctionComponent = () => (\n  <ContentLoader\n    speed={4}\n    width={200}\n    height={200}\n    viewBox=\"0 0 200 200\"\n    backgroundColor=\"#3a393c\"\n    foregroundColor=\"#2c2b2e\"\n  >\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"260\" height=\"15\" />\n    <rect x=\"0\" y=\"35\" rx=\"4\" ry=\"4\" width=\"260\" height=\"15\" />\n    <rect x=\"0\" y=\"70\" rx=\"4\" ry=\"4\" width=\"260\" height=\"15\" />\n  </ContentLoader>\n);\n","import React from 'react';\nimport { Loader as LoaderList } from './list';\n\nconst Loader = {\n  List: () => <LoaderList />\n};\n\nexport default Loader;\n","import React from 'react';\nimport map from 'lodash/map';\nimport isEmpty from 'lodash/isEmpty';\nimport Text from 'core/components/Text';\nimport LabeledIcon from 'core/components/LabeledIcon';\nimport { WorkspacePaginationItem } from '../interfaces/WorkspacePagination';\nimport MenuItem from './MenuItem';\nimport Styled from './styled';\nimport Loader from './Loaders';\nimport routes from 'core/constants/routes';\n\ninterface Props {\n  items: WorkspacePaginationItem[];\n  onSearch: (name: string) => void;\n}\n\nconst WorkspaceMenu = ({ items, onSearch }: Props) => {\n  const renderWorkspaces = () =>\n    map(items, ({ id, name }: WorkspacePaginationItem) => (\n      <MenuItem key={id} id={id} name={name} />\n    ));\n\n  return (\n    <>\n      <Styled.Actions>\n        <Styled.Link href={routes.createWorkspace}>\n          <LabeledIcon icon=\"plus-circle\" marginContent=\"5px\">\n            <Text.h5 color=\"dark\">Create Workspace</Text.h5>\n          </LabeledIcon>\n        </Styled.Link>\n      </Styled.Actions>\n      <Styled.Content>\n        <Styled.SearchInput resume onSearch={onSearch} />\n        <Styled.List>\n          {isEmpty(items) ? <Loader.List /> : renderWorkspaces()}\n        </Styled.List>\n      </Styled.Content>\n    </>\n  );\n};\n\nexport default WorkspaceMenu;\n","import React, { useState, useEffect } from 'react';\nimport { getProfileByKey } from 'core/utils/profile';\nimport Page from 'core/components/Page';\nimport Icon from 'core/components/Icon';\nimport Text from 'core/components/Text';\nimport { useGlobalState } from 'core/state/hooks';\nimport useWorkspace from './hooks';\nimport Styled from './styled';\nimport Menu from './Menu';\n\nconst Placeholder = () => {\n  const profileName = getProfileByKey('name');\n\n  return (\n    <>\n      <Styled.Wrapper>\n        <Icon name=\"empty-workspaces\" />\n      </Styled.Wrapper>\n      <Styled.Empty>\n        <Text.h1 color=\"light\" align=\"center\">\n          Hello, {profileName}!\n        </Text.h1>\n        <Text.h1 color=\"light\" align=\"center\">\n          You need to select a workspace in the side menu to get started.\n        </Text.h1>\n      </Styled.Empty>\n    </>\n  );\n};\n\nconst Workspace = () => {\n  const [filterWorkspace] = useWorkspace();\n  const [name, setName] = useState('');\n  const { list } = useGlobalState(({ workspaces }) => workspaces);\n\n  useEffect(() => {\n    filterWorkspace(name);\n  }, [name, filterWorkspace]);\n\n  return (\n    <Page>\n      <Page.Menu>\n        <Menu items={list?.content} onSearch={setName} />\n      </Page.Menu>\n      <Page.Content>\n        <Placeholder />\n      </Page.Content>\n    </Page>\n  );\n};\n\nexport default Workspace;\n"],"sourceRoot":""}