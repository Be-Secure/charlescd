{"ast":null,"code":"import React from'react';import Styled from'./styled';import{getCondition}from'./helpers';import options from'./conditional.options';var Rule=function Rule(_ref){var _rule$content,_rule$content2,_rule$content3;var register=_ref.register,control=_ref.control,prefixName=_ref.prefixName,rule=_ref.rule,viewMode=_ref.viewMode;return/*#__PURE__*/React.createElement(Styled.Rule,null,/*#__PURE__*/React.createElement(Styled.Input,{type:\"hidden\",ref:register,name:\"\".concat(prefixName,\".type\"),defaultValue:\"RULE\"}),/*#__PURE__*/React.createElement(Styled.Input,{label:\"Key\",ref:register,disabled:viewMode,name:\"\".concat(prefixName,\".content.key\"),defaultValue:rule===null||rule===void 0?void 0:(_rule$content=rule.content)===null||_rule$content===void 0?void 0:_rule$content.key}),/*#__PURE__*/React.createElement(Styled.Select,{options:options,control:control,label:\"Conditional\",isDisabled:viewMode,defaultValue:getCondition(rule===null||rule===void 0?void 0:(_rule$content2=rule.content)===null||_rule$content2===void 0?void 0:_rule$content2.condition),name:\"\".concat(prefixName,\".content.condition\")}),/*#__PURE__*/React.createElement(Styled.Input,{label:\"Value\",ref:register,disabled:viewMode,name:\"\".concat(prefixName,\".content.value\"),defaultValue:rule===null||rule===void 0?void 0:(_rule$content3=rule.content)===null||_rule$content3===void 0?void 0:_rule$content3.value}));};export default Rule;","map":{"version":3,"sources":["/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/src/modules/Circles/Segments/Rule.tsx"],"names":["React","Styled","getCondition","options","Rule","register","control","prefixName","rule","viewMode","content","key","condition","value"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAOA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,OAASC,YAAT,KAA6B,WAA7B,CACA,MAAOC,CAAAA,OAAP,KAAoB,uBAApB,CAkBA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAA8D,oDAA3DC,CAAAA,QAA2D,MAA3DA,QAA2D,CAAjDC,OAAiD,MAAjDA,OAAiD,CAAxCC,UAAwC,MAAxCA,UAAwC,CAA5BC,IAA4B,MAA5BA,IAA4B,CAAtBC,QAAsB,MAAtBA,QAAsB,CACzE,mBACE,oBAAC,MAAD,CAAQ,IAAR,mBACE,oBAAC,MAAD,CAAQ,KAAR,EACE,IAAI,CAAC,QADP,CAEE,GAAG,CAAEJ,QAFP,CAGE,IAAI,WAAKE,UAAL,SAHN,CAIE,YAAY,CAAC,MAJf,EADF,cAOE,oBAAC,MAAD,CAAQ,KAAR,EACE,KAAK,CAAC,KADR,CAEE,GAAG,CAAEF,QAFP,CAGE,QAAQ,CAAEI,QAHZ,CAIE,IAAI,WAAKF,UAAL,gBAJN,CAKE,YAAY,CAAEC,IAAF,SAAEA,IAAF,gCAAEA,IAAI,CAAEE,OAAR,wCAAE,cAAeC,GAL/B,EAPF,cAcE,oBAAC,MAAD,CAAQ,MAAR,EACE,OAAO,CAAER,OADX,CAEE,OAAO,CAAEG,OAFX,CAGE,KAAK,CAAC,aAHR,CAIE,UAAU,CAAEG,QAJd,CAKE,YAAY,CAAEP,YAAY,CAACM,IAAD,SAACA,IAAD,iCAACA,IAAI,CAAEE,OAAP,yCAAC,eAAeE,SAAhB,CAL5B,CAME,IAAI,WAAKL,UAAL,sBANN,EAdF,cAsBE,oBAAC,MAAD,CAAQ,KAAR,EACE,KAAK,CAAC,OADR,CAEE,GAAG,CAAEF,QAFP,CAGE,QAAQ,CAAEI,QAHZ,CAIE,IAAI,WAAKF,UAAL,kBAJN,CAKE,YAAY,CAAEC,IAAF,SAAEA,IAAF,iCAAEA,IAAI,CAAEE,OAAR,yCAAE,eAAeG,KAL/B,EAtBF,CADF,CAgCD,CAjCD,CAmCA,cAAeT,CAAAA,IAAf","sourcesContent":["import React from 'react';\nimport {\n  ArrayField,\n  Control,\n  FieldElement,\n  ValidationOptions\n} from 'react-hook-form';\nimport Styled from './styled';\nimport { getCondition } from './helpers';\nimport options from './conditional.options';\n\ninterface Props {\n  register: <Element extends FieldElement = FieldElement>(\n    ref: Element,\n    validationOptions?: ValidationOptions\n  ) => void;\n  control: Control;\n  prefixName: string;\n  viewMode: boolean;\n  rule: Partial<\n    ArrayField<\n      Record<string, { condition: string; key: string; value: string }>,\n      'id'\n    >\n  >;\n}\n\nconst Rule = ({ register, control, prefixName, rule, viewMode }: Props) => {\n  return (\n    <Styled.Rule>\n      <Styled.Input\n        type=\"hidden\"\n        ref={register}\n        name={`${prefixName}.type`}\n        defaultValue=\"RULE\"\n      />\n      <Styled.Input\n        label=\"Key\"\n        ref={register}\n        disabled={viewMode}\n        name={`${prefixName}.content.key`}\n        defaultValue={rule?.content?.key}\n      />\n      <Styled.Select\n        options={options}\n        control={control}\n        label=\"Conditional\"\n        isDisabled={viewMode}\n        defaultValue={getCondition(rule?.content?.condition)}\n        name={`${prefixName}.content.condition`}\n      />\n      <Styled.Input\n        label=\"Value\"\n        ref={register}\n        disabled={viewMode}\n        name={`${prefixName}.content.value`}\n        defaultValue={rule?.content?.value}\n      />\n    </Styled.Rule>\n  );\n};\n\nexport default Rule;\n"]},"metadata":{},"sourceType":"module"}