{"ast":null,"code":"import{useHistory,useLocation,useParams,useRouteMatch}from'react-router-dom';import forEach from'lodash/forEach';import replace from'lodash/replace';import toString from'lodash/toString';import routes from'core/constants/routes';var replaceRoute=function replaceRoute(path,pathParams,params){var newPath=path;forEach(params,function(param,index){newPath=replace(newPath,pathParams[index],toString(params[index]));});return newPath;};var getPath=function getPath(){var path=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var pathParams=path.match(/:+\\w*/gi);if(pathParams===null){return path;}if(pathParams.length!==params.length){return path;}return replaceRoute(path,pathParams,params);};var useRouter=function useRouter(){var navigate=useHistory();return{push:function push(path){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}return navigate.push(getPath(path,args));},goBack:function goBack(){return navigate.goBack();},replace:function replace(path){for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}return navigate.replace(getPath(path,args));},go:function go(index){return navigate.go(index);}};};var redirectToLegacy=function redirectToLegacy(path){var _window=window,location=_window.location;var href=location.href;if(path===routes.login){location.href=\"\".concat(path,\"?redirectTo=\").concat(href);}else{location.href=path;}};export{useRouter,useLocation,useParams,useRouteMatch,redirectToLegacy,getPath,replaceRoute};","map":{"version":3,"sources":["/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/src/core/utils/routes.ts"],"names":["useHistory","useLocation","useParams","useRouteMatch","forEach","replace","toString","routes","replaceRoute","path","pathParams","params","newPath","param","index","getPath","match","length","useRouter","navigate","push","args","goBack","go","redirectToLegacy","window","location","href","login"],"mappings":"AAAA,OACEA,UADF,CAEEC,WAFF,CAGEC,SAHF,CAIEC,aAJF,KAKO,kBALP,CAMA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,MAAOC,CAAAA,QAAP,KAAqB,iBAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,uBAAnB,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CACnBC,IADmB,CAEnBC,UAFmB,CAGnBC,MAHmB,CAIhB,CACH,GAAIC,CAAAA,OAAO,CAAGH,IAAd,CAEAL,OAAO,CAACO,MAAD,CAAS,SAACE,KAAD,CAAQC,KAAR,CAAkB,CAChCF,OAAO,CAAGP,OAAO,CAACO,OAAD,CAAUF,UAAU,CAACI,KAAD,CAApB,CAA6BR,QAAQ,CAACK,MAAM,CAACG,KAAD,CAAP,CAArC,CAAjB,CACD,CAFM,CAAP,CAIA,MAAOF,CAAAA,OAAP,CACD,CAZD,CAcA,GAAMG,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAyD,IAAxDN,CAAAA,IAAwD,2DAAjD,EAAiD,IAA7CE,CAAAA,MAA6C,2DAAf,EAAe,CACvE,GAAMD,CAAAA,UAAU,CAAGD,IAAI,CAACO,KAAL,CAAW,SAAX,CAAnB,CAEA,GAAIN,UAAU,GAAK,IAAnB,CAAyB,CACvB,MAAOD,CAAAA,IAAP,CACD,CAED,GAAIC,UAAU,CAACO,MAAX,GAAsBN,MAAM,CAACM,MAAjC,CAAyC,CACvC,MAAOR,CAAAA,IAAP,CACD,CAED,MAAOD,CAAAA,YAAY,CAACC,IAAD,CAAOC,UAAP,CAAmBC,MAAnB,CAAnB,CACD,CAZD,CAcA,GAAMO,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAMC,CAAAA,QAAQ,CAAGnB,UAAU,EAA3B,CAEA,MAAO,CACLoB,IAAI,CAAE,cAACX,IAAD,gCAAkBY,IAAlB,qDAAkBA,IAAlB,gCACJF,CAAAA,QAAQ,CAACC,IAAT,CAAcL,OAAO,CAACN,IAAD,CAAOY,IAAP,CAArB,CADI,EADD,CAGLC,MAAM,CAAE,wBAAMH,CAAAA,QAAQ,CAACG,MAAT,EAAN,EAHH,CAILjB,OAAO,CAAE,iBAACI,IAAD,iCAAkBY,IAAlB,2DAAkBA,IAAlB,kCACPF,CAAAA,QAAQ,CAACd,OAAT,CAAiBU,OAAO,CAACN,IAAD,CAAOY,IAAP,CAAxB,CADO,EAJJ,CAMLE,EAAE,CAAE,YAACT,KAAD,QAAmBK,CAAAA,QAAQ,CAACI,EAAT,CAAYT,KAAZ,CAAnB,EANC,CAAP,CAQD,CAXD,CAaA,GAAMU,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACf,IAAD,CAAkB,aACpBgB,MADoB,CACjCC,QADiC,SACjCA,QADiC,IAEjCC,CAAAA,IAFiC,CAExBD,QAFwB,CAEjCC,IAFiC,CAIzC,GAAIlB,IAAI,GAAKF,MAAM,CAACqB,KAApB,CAA2B,CACzBF,QAAQ,CAACC,IAAT,WAAmBlB,IAAnB,wBAAsCkB,IAAtC,EACD,CAFD,IAEO,CACLD,QAAQ,CAACC,IAAT,CAAgBlB,IAAhB,CACD,CACF,CATD,CAWA,OACES,SADF,CAEEjB,WAFF,CAGEC,SAHF,CAIEC,aAJF,CAKEqB,gBALF,CAMET,OANF,CAOEP,YAPF","sourcesContent":["import {\n  useHistory,\n  useLocation,\n  useParams,\n  useRouteMatch\n} from 'react-router-dom';\nimport forEach from 'lodash/forEach';\nimport replace from 'lodash/replace';\nimport toString from 'lodash/toString';\nimport routes from 'core/constants/routes';\n\nconst replaceRoute = (\n  path: string,\n  pathParams: string[],\n  params: (string | number)[]\n) => {\n  let newPath = path;\n\n  forEach(params, (param, index) => {\n    newPath = replace(newPath, pathParams[index], toString(params[index]));\n  });\n\n  return newPath;\n};\n\nconst getPath = (path = '', params: (string | number)[] = []): string => {\n  const pathParams = path.match(/:+\\w*/gi);\n\n  if (pathParams === null) {\n    return path;\n  }\n\n  if (pathParams.length !== params.length) {\n    return path;\n  }\n\n  return replaceRoute(path, pathParams, params);\n};\n\nconst useRouter = () => {\n  const navigate = useHistory();\n\n  return {\n    push: (path: string, ...args: (string | number)[]) =>\n      navigate.push(getPath(path, args)),\n    goBack: () => navigate.goBack(),\n    replace: (path: string, ...args: (string | number)[]) =>\n      navigate.replace(getPath(path, args)),\n    go: (index: number) => navigate.go(index)\n  };\n};\n\nconst redirectToLegacy = (path: string) => {\n  const { location } = window;\n  const { href } = location;\n\n  if (path === routes.login) {\n    location.href = `${path}?redirectTo=${href}`;\n  } else {\n    location.href = path;\n  }\n};\n\nexport {\n  useRouter,\n  useLocation,\n  useParams,\n  useRouteMatch,\n  redirectToLegacy,\n  getPath,\n  replaceRoute\n};\n"]},"metadata":{},"sourceType":"module"}