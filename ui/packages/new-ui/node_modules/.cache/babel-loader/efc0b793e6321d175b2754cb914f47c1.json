{"ast":null,"code":"import React from'react';import{useFieldArray,useForm}from'react-hook-form';import Clause from'./Clause';import Rule from'./Rule';import Styled from'./styled';var Segments=function Segments(_ref){var rules=_ref.rules,_ref$viewMode=_ref.viewMode,viewMode=_ref$viewMode===void 0?true:_ref$viewMode;var _useForm=useForm({defaultValues:{clauses:rules===null||rules===void 0?void 0:rules.clauses}}),register=_useForm.register,control=_useForm.control;var _useFieldArray=useFieldArray({control:control,name:'clauses'}),fields=_useFieldArray.fields;return/*#__PURE__*/React.createElement(Styled.Form,null,fields.map(function(item,index){if(item.type==='CLAUSE'){return/*#__PURE__*/React.createElement(Clause,{key:item.id,clauses:item,control:control,register:register,viewMode:viewMode,prefixName:\"clauses[\".concat(index,\"]\")});}return/*#__PURE__*/React.createElement(Rule,{rule:item,key:item.id,control:control,register:register,viewMode:viewMode,prefixName:\"clauses[\".concat(index,\"]\")});}));};export default Segments;","map":{"version":3,"sources":["/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/src/modules/Circles/Segments/index.tsx"],"names":["React","useFieldArray","useForm","Clause","Rule","Styled","Segments","rules","viewMode","defaultValues","clauses","register","control","name","fields","map","item","index","type","id"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,aAAT,CAAwBC,OAAxB,KAAuC,iBAAvC,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CAwCA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAuC,IAApCC,CAAAA,KAAoC,MAApCA,KAAoC,oBAA7BC,QAA6B,CAA7BA,QAA6B,wBAAlB,IAAkB,4BACxBN,OAAO,CAAC,CACpCO,aAAa,CAAE,CAAEC,OAAO,CAAEH,KAAF,SAAEA,KAAF,iBAAEA,KAAK,CAAEG,OAAlB,CADqB,CAAD,CADiB,CAC9CC,QAD8C,UAC9CA,QAD8C,CACpCC,OADoC,UACpCA,OADoC,oBAInCX,aAAa,CAAC,CAAEW,OAAO,CAAPA,OAAF,CAAWC,IAAI,CAAE,SAAjB,CAAD,CAJsB,CAI9CC,MAJ8C,gBAI9CA,MAJ8C,CAMtD,mBACE,oBAAC,MAAD,CAAQ,IAAR,MACGA,MAAM,CAACC,GAAP,CAAW,SAACC,IAAD,CAAOC,KAAP,CAAiB,CAC3B,GAAID,IAAI,CAACE,IAAL,GAAc,QAAlB,CAA4B,CAC1B,mBACE,oBAAC,MAAD,EACE,GAAG,CAAEF,IAAI,CAACG,EADZ,CAEE,OAAO,CAAEH,IAFX,CAGE,OAAO,CAAEJ,OAHX,CAIE,QAAQ,CAAED,QAJZ,CAKE,QAAQ,CAAEH,QALZ,CAME,UAAU,mBAAaS,KAAb,KANZ,EADF,CAUD,CAED,mBACE,oBAAC,IAAD,EACE,IAAI,CAAED,IADR,CAEE,GAAG,CAAEA,IAAI,CAACG,EAFZ,CAGE,OAAO,CAAEP,OAHX,CAIE,QAAQ,CAAED,QAJZ,CAKE,QAAQ,CAAEH,QALZ,CAME,UAAU,mBAAaS,KAAb,KANZ,EADF,CAUD,CAxBA,CADH,CADF,CA6BD,CAnCD,CAqCA,cAAeX,CAAAA,QAAf","sourcesContent":["import React from 'react';\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport Clause from './Clause';\nimport Rule from './Rule';\nimport Styled from './styled';\n\nexport type Rule = {\n  type: string;\n  content: {\n    key: string;\n    value: number[] | string[];\n    condition: string;\n  };\n};\n\ntype Clause = {\n  type: string;\n  clauses:\n    | Rule[]\n    | {\n        type: string;\n        clauses: Rule[];\n        logicalOperator: string;\n      }[];\n};\n\nexport type Rules = {\n  type: string;\n  clauses: (\n    | {\n        type: string;\n        clauses: Rule[];\n        logicalOperator: string;\n      }\n    | Rule\n  )[];\n  logicalOperator: string;\n};\n\nexport interface Props {\n  viewMode?: boolean;\n  rules?: Rules;\n}\n\nconst Segments = ({ rules, viewMode = true }: Props) => {\n  const { register, control } = useForm({\n    defaultValues: { clauses: rules?.clauses }\n  });\n  const { fields } = useFieldArray({ control, name: 'clauses' });\n\n  return (\n    <Styled.Form>\n      {fields.map((item, index) => {\n        if (item.type === 'CLAUSE') {\n          return (\n            <Clause\n              key={item.id}\n              clauses={item}\n              control={control}\n              register={register}\n              viewMode={viewMode}\n              prefixName={`clauses[${index}]`}\n            />\n          );\n        }\n\n        return (\n          <Rule\n            rule={item}\n            key={item.id}\n            control={control}\n            register={register}\n            viewMode={viewMode}\n            prefixName={`clauses[${index}]`}\n          />\n        );\n      })}\n    </Styled.Form>\n  );\n};\n\nexport default Segments;\n"]},"metadata":{},"sourceType":"module"}