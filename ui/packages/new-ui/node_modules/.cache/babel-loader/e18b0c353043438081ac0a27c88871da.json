{"ast":null,"code":"/* eslint-disable */export default(function(){var toList=function toList(data){return data.map(function(_ref){var value=_ref.value,timestamp=_ref.timestamp;return[timestamp,value];});};var getRandomInt=function getRandomInt(min,max){min=Math.ceil(min);max=Math.floor(max);return Math.floor(Math.random()*(max-min+1))+min;};var buildParams=function buildParams(params){return new URLSearchParams({circleId:\"\".concat(params.circleId),metricType:\"\".concat(params.metricType),projectionType:params.projectionType});};var convertComponentsToSeries=function convertComponentsToSeries(components){return components.map(function(_ref2){var name=_ref2.name,data=_ref2.data;return{name:name,data:toList(data)};});};var buildChartSeries=function buildChartSeries(response,chartType){return chartType===\"COMPARISON\"?convertComponentsToSeries(response.components):[{name:\"\",data:toList(response.data)}];};var getMetricResource=function getMetricResource(apiParams){var circleId=apiParams.circleId,chartType=apiParams.chartType;var resource=chartType===\"COMPARISON\"?\"circle/\".concat(circleId,\"/components\"):\"\";return\"\".concat(resource,\"?\").concat(buildParams(apiParams));};var fetchUrl=function fetchUrl(apiParams,headers){fetch(\"https://darwin-api.continuousplatform.com/moove/metrics/\".concat(getMetricResource(apiParams)),{headers:headers}).then(function(response){return response.json();}).then(function(response){var data=buildChartSeries(response,apiParams.chartType);self.postMessage(data);setTimeout(function(){return fetchUrl(apiParams,headers);},getRandomInt(5000,15000));}).catch(function(err){console.error(err);});};self.addEventListener(\"message\",function(event){if(!event)return;var _event$data=event.data,apiParams=_event$data.apiParams,headers=_event$data.headers;fetchUrl(apiParams,headers);});});","map":{"version":3,"sources":["/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/src/containers/Metrics/metricWorker.js"],"names":["toList","data","map","value","timestamp","getRandomInt","min","max","Math","ceil","floor","random","buildParams","params","URLSearchParams","circleId","metricType","projectionType","convertComponentsToSeries","components","name","buildChartSeries","response","chartType","getMetricResource","apiParams","resource","fetchUrl","headers","fetch","then","json","self","postMessage","setTimeout","catch","err","console","error","addEventListener","event"],"mappings":"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","sourcesContent":["/* eslint-disable */\nexport default () => {\n  const toList = data => data.map(({ value, timestamp }) => [timestamp, value]);\n\n  const getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const buildParams = params =>\n    new URLSearchParams({\n      circleId: `${params.circleId}`,\n      metricType: `${params.metricType}`,\n      projectionType: params.projectionType\n    });\n\n  const convertComponentsToSeries = components => {\n    return components.map(({ name, data }) => ({ name, data: toList(data) }));\n  };\n\n  const buildChartSeries = (response, chartType) => {\n    return chartType === \"COMPARISON\"\n      ? convertComponentsToSeries(response.components)\n      : [{ name: \"\", data: toList(response.data) }];\n  };\n\n  const getMetricResource = apiParams => {\n    const { circleId, chartType } = apiParams;\n    const resource =\n      chartType === \"COMPARISON\" ? `circle/${circleId}/components` : \"\";\n\n    return `${resource}?${buildParams(apiParams)}`;\n  };\n\n  const fetchUrl = (apiParams, headers) => {\n    fetch(\n      `https://darwin-api.continuousplatform.com/moove/metrics/${getMetricResource(\n        apiParams\n      )}`,\n      { headers }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(response => {\n        const data = buildChartSeries(response, apiParams.chartType);\n        self.postMessage(data);\n        setTimeout(\n          () => fetchUrl(apiParams, headers),\n          getRandomInt(5000, 15000)\n        );\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  self.addEventListener(\"message\", event => {\n    if (!event) return;\n    const { apiParams, headers } = event.data;\n\n    fetchUrl(apiParams, headers);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}