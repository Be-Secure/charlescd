{"ast":null,"code":"import _defineProperty from\"/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import get from'lodash/get';export var combineReducer=function combineReducer(reducers){var reducerKeys=Object.keys(reducers);return function(state,action){var nextState=state;reducerKeys.map(function(key){var reducer=get(reducers,key);var previousStateForKey=get(state,key);var nextStateForKey=reducer(previousStateForKey,action);nextState=_objectSpread({},nextState,_defineProperty({},key,nextStateForKey));return key;});return nextState;};};","map":{"version":3,"sources":["/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/src/core/state/helpers.ts"],"names":["get","combineReducer","reducers","reducerKeys","Object","keys","state","action","nextState","map","key","reducer","previousStateForKey","nextStateForKey"],"mappings":"qWAAA,MAAOA,CAAAA,GAAP,KAAgB,YAAhB,CAKA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,QAAD,CAAuB,CACnD,GAAMC,CAAAA,WAAW,CAAGC,MAAM,CAACC,IAAP,CAAYH,QAAZ,CAApB,CAEA,MAAO,UAACI,KAAD,CAAeC,MAAf,CAA2C,CAChD,GAAIC,CAAAA,SAAS,CAAGF,KAAhB,CAEAH,WAAW,CAACM,GAAZ,CAAgB,SAAAC,GAAG,CAAI,CACrB,GAAMC,CAAAA,OAAO,CAAGX,GAAG,CAACE,QAAD,CAAWQ,GAAX,CAAnB,CACA,GAAME,CAAAA,mBAAmB,CAAGZ,GAAG,CAACM,KAAD,CAAQI,GAAR,CAA/B,CACA,GAAMG,CAAAA,eAAe,CAAGF,OAAO,CAACC,mBAAD,CAAsBL,MAAtB,CAA/B,CAEAC,SAAS,kBAAQA,SAAR,oBAAoBE,GAApB,CAA0BG,eAA1B,EAAT,CAEA,MAAOH,CAAAA,GAAP,CACD,CARD,EAUA,MAAOF,CAAAA,SAAP,CACD,CAdD,CAeD,CAlBM","sourcesContent":["import get from 'lodash/get';\nimport { State } from './interfaces/State';\nimport { Reducer } from './interfaces/Reducer';\nimport { RootActionTypes } from '.';\n\nexport const combineReducer = (reducers: Reducer) => {\n  const reducerKeys = Object.keys(reducers);\n\n  return (state: State, action: RootActionTypes) => {\n    let nextState = state;\n\n    reducerKeys.map(key => {\n      const reducer = get(reducers, key);\n      const previousStateForKey = get(state, key);\n      const nextStateForKey = reducer(previousStateForKey, action);\n\n      nextState = { ...nextState, [key]: nextStateForKey };\n\n      return key;\n    });\n\n    return nextState;\n  };\n};\n"]},"metadata":{},"sourceType":"module"}