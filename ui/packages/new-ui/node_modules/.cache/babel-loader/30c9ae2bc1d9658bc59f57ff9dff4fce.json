{"ast":null,"code":"import _defineProperty from\"/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import indexOf from'lodash/indexOf';import{METRICS_TYPE}from'containers/Metrics/enums';import routes from'core/constants/routes';import{generatePathV1}from'core/helpers/path';import{URL_PATH_POSITION,DEFAULT_CIRCLE}from'./constants';export var pathCircleEditById=function pathCircleEditById(id){return generatePathV1(routes.circlesEdit,{circleId:id});};export var pathCircleById=function pathCircleById(id){var path=window.location.href.split('?')[URL_PATH_POSITION];return\"\".concat(path,\"?circle=\").concat(id);};export var isDefaultCircle=function isDefaultCircle(name){return name===DEFAULT_CIRCLE;};export var validateChangeMetricTypes=function validateChangeMetricTypes(index){var BASE_INDEX=0;var LAST_INDEX_ELEMENT=1;var LAST_INDEX=Object.keys(METRICS_TYPE).length-LAST_INDEX_ELEMENT;if(index>LAST_INDEX){return BASE_INDEX;}if(index<BASE_INDEX){return LAST_INDEX;}return index;};export var getActiveMetric=function getActiveMetric(changeType,activeMetricType){var COUNT=1;var currentItemIndex=indexOf(Object.keys(METRICS_TYPE),activeMetricType);var computedIndex=changeType==='INCREASE'?currentItemIndex+COUNT:currentItemIndex-COUNT;var currentIndex=validateChangeMetricTypes(computedIndex);return Object.keys(METRICS_TYPE)[currentIndex];};export var getActiveMetricDescription=function getActiveMetricDescription(activeMetricType){var _METRICS_TYPE$REQUEST;return(_METRICS_TYPE$REQUEST={},_defineProperty(_METRICS_TYPE$REQUEST,METRICS_TYPE.REQUESTS_BY_CIRCLE,'Request'),_defineProperty(_METRICS_TYPE$REQUEST,METRICS_TYPE.REQUESTS_ERRORS_BY_CIRCLE,'Errors'),_defineProperty(_METRICS_TYPE$REQUEST,METRICS_TYPE.REQUESTS_LATENCY_BY_CIRCLE,'Latency'),_METRICS_TYPE$REQUEST)[activeMetricType];};","map":{"version":3,"sources":["/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/src/modules/Circles/Comparation/Item/helpers.ts"],"names":["indexOf","METRICS_TYPE","routes","generatePathV1","URL_PATH_POSITION","DEFAULT_CIRCLE","pathCircleEditById","id","circlesEdit","circleId","pathCircleById","path","window","location","href","split","isDefaultCircle","name","validateChangeMetricTypes","index","BASE_INDEX","LAST_INDEX_ELEMENT","LAST_INDEX","Object","keys","length","getActiveMetric","changeType","activeMetricType","COUNT","currentItemIndex","computedIndex","currentIndex","getActiveMetricDescription","REQUESTS_BY_CIRCLE","REQUESTS_ERRORS_BY_CIRCLE","REQUESTS_LATENCY_BY_CIRCLE"],"mappings":"oLAAA,MAAOA,CAAAA,OAAP,KAAoB,gBAApB,CACA,OAASC,YAAT,KAA6B,0BAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,uBAAnB,CACA,OAASC,cAAT,KAA+B,mBAA/B,CACA,OAASC,iBAAT,CAA4BC,cAA5B,KAAkD,aAAlD,CAIA,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,EAAD,QAChCJ,CAAAA,cAAc,CAACD,MAAM,CAACM,WAAR,CAAqB,CAAEC,QAAQ,CAAEF,EAAZ,CAArB,CADkB,EAA3B,CAGP,MAAO,IAAMG,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACH,EAAD,CAAgB,CAC5C,GAAMI,CAAAA,IAAI,CAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,GAA3B,EAAgCX,iBAAhC,CAAb,CACA,gBAAUO,IAAV,oBAAyBJ,EAAzB,EACD,CAHM,CAKP,MAAO,IAAMS,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,IAAD,QAAkBA,CAAAA,IAAI,GAAKZ,cAA3B,EAAxB,CAEP,MAAO,IAAMa,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CAACC,KAAD,CAAmB,CAC1D,GAAMC,CAAAA,UAAU,CAAG,CAAnB,CACA,GAAMC,CAAAA,kBAAkB,CAAG,CAA3B,CACA,GAAMC,CAAAA,UAAU,CAAGC,MAAM,CAACC,IAAP,CAAYvB,YAAZ,EAA0BwB,MAA1B,CAAmCJ,kBAAtD,CAEA,GAAIF,KAAK,CAAGG,UAAZ,CAAwB,CACtB,MAAOF,CAAAA,UAAP,CACD,CACD,GAAID,KAAK,CAAGC,UAAZ,CAAwB,CACtB,MAAOE,CAAAA,UAAP,CACD,CAED,MAAOH,CAAAA,KAAP,CACD,CAbM,CAeP,MAAO,IAAMO,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAC7BC,UAD6B,CAE7BC,gBAF6B,CAG1B,CACH,GAAMC,CAAAA,KAAK,CAAG,CAAd,CACA,GAAMC,CAAAA,gBAAgB,CAAG9B,OAAO,CAACuB,MAAM,CAACC,IAAP,CAAYvB,YAAZ,CAAD,CAA4B2B,gBAA5B,CAAhC,CACA,GAAMG,CAAAA,aAAa,CACjBJ,UAAU,GAAK,UAAf,CACIG,gBAAgB,CAAGD,KADvB,CAEIC,gBAAgB,CAAGD,KAHzB,CAIA,GAAMG,CAAAA,YAAY,CAAGd,yBAAyB,CAACa,aAAD,CAA9C,CAEA,MAAOR,CAAAA,MAAM,CAACC,IAAP,CAAYvB,YAAZ,EAA0B+B,YAA1B,CAAP,CACD,CAbM,CAeP,MAAO,IAAMC,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CAACL,gBAAD,CAAoC,2BAC5E,MAAO,gEACJ3B,YAAY,CAACiC,kBADT,CAC8B,SAD9B,wCAEJjC,YAAY,CAACkC,yBAFT,CAEqC,QAFrC,wCAGJlC,YAAY,CAACmC,0BAHT,CAGsC,SAHtC,yBAILR,gBAJK,CAAP,CAKD,CANM","sourcesContent":["import indexOf from 'lodash/indexOf';\nimport { METRICS_TYPE } from 'containers/Metrics/enums';\nimport routes from 'core/constants/routes';\nimport { generatePathV1 } from 'core/helpers/path';\nimport { URL_PATH_POSITION, DEFAULT_CIRCLE } from './constants';\n\nexport type ChangeType = 'INCREASE' | 'DECREASE';\n\nexport const pathCircleEditById = (id: string) =>\n  generatePathV1(routes.circlesEdit, { circleId: id });\n\nexport const pathCircleById = (id: string) => {\n  const path = window.location.href.split('?')[URL_PATH_POSITION];\n  return `${path}?circle=${id}`;\n};\n\nexport const isDefaultCircle = (name: string) => name === DEFAULT_CIRCLE;\n\nexport const validateChangeMetricTypes = (index: number) => {\n  const BASE_INDEX = 0;\n  const LAST_INDEX_ELEMENT = 1;\n  const LAST_INDEX = Object.keys(METRICS_TYPE).length - LAST_INDEX_ELEMENT;\n\n  if (index > LAST_INDEX) {\n    return BASE_INDEX;\n  }\n  if (index < BASE_INDEX) {\n    return LAST_INDEX;\n  }\n\n  return index;\n};\n\nexport const getActiveMetric = (\n  changeType: ChangeType,\n  activeMetricType: METRICS_TYPE\n) => {\n  const COUNT = 1;\n  const currentItemIndex = indexOf(Object.keys(METRICS_TYPE), activeMetricType);\n  const computedIndex =\n    changeType === 'INCREASE'\n      ? currentItemIndex + COUNT\n      : currentItemIndex - COUNT;\n  const currentIndex = validateChangeMetricTypes(computedIndex);\n\n  return Object.keys(METRICS_TYPE)[currentIndex] as METRICS_TYPE;\n};\n\nexport const getActiveMetricDescription = (activeMetricType: METRICS_TYPE) => {\n  return {\n    [METRICS_TYPE.REQUESTS_BY_CIRCLE]: 'Request',\n    [METRICS_TYPE.REQUESTS_ERRORS_BY_CIRCLE]: 'Errors',\n    [METRICS_TYPE.REQUESTS_LATENCY_BY_CIRCLE]: 'Latency'\n  }[activeMetricType];\n};\n"]},"metadata":{},"sourceType":"module"}