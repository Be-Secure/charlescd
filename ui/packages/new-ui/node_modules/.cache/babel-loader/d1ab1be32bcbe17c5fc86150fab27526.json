{"ast":null,"code":"import React from'react';import map from'lodash/map';import Rule from'./Rule';import Styled from'./styled';var Clause=function Clause(_ref){var prefixName=_ref.prefixName,register=_ref.register,control=_ref.control,clauses=_ref.clauses,viewMode=_ref.viewMode;return/*#__PURE__*/React.createElement(Styled.Clause,null,map(clauses===null||clauses===void 0?void 0:clauses.clauses,function(rule,index){return/*#__PURE__*/React.createElement(Rule,{rule:rule,key:index,control:control,register:register,viewMode:viewMode,prefixName:\"\".concat(prefixName,\".clauses\")});}));};export default Clause;","map":{"version":3,"sources":["/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/src/modules/Circles/Segments/Clause.tsx"],"names":["React","map","Rule","Styled","Clause","prefixName","register","control","clauses","viewMode","rule","index"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,GAAP,KAAgB,YAAhB,CAOA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CAaA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,UACbC,CAAAA,UADa,MACbA,UADa,CAEbC,QAFa,MAEbA,QAFa,CAGbC,OAHa,MAGbA,OAHa,CAIbC,OAJa,MAIbA,OAJa,CAKbC,QALa,MAKbA,QALa,oBAOb,oBAAC,MAAD,CAAQ,MAAR,MACGR,GAAG,CAACO,OAAD,SAACA,OAAD,iBAACA,OAAO,CAAEA,OAAV,CAAmB,SAACE,IAAD,CAAOC,KAAP,qBACrB,oBAAC,IAAD,EACE,IAAI,CAAED,IADR,CAEE,GAAG,CAAEC,KAFP,CAGE,OAAO,CAAEJ,OAHX,CAIE,QAAQ,CAAED,QAJZ,CAKE,QAAQ,CAAEG,QALZ,CAME,UAAU,WAAKJ,UAAL,YANZ,EADqB,EAAnB,CADN,CAPa,EAAf,CAqBA,cAAeD,CAAAA,MAAf","sourcesContent":["import React from 'react';\nimport map from 'lodash/map';\nimport {\n  ArrayField,\n  Control,\n  FieldElement,\n  ValidationOptions\n} from 'react-hook-form';\nimport Rule from './Rule';\nimport Styled from './styled';\n\ninterface Props {\n  control: Control;\n  register: <Element extends FieldElement = FieldElement>(\n    ref: Element,\n    validationOptions?: ValidationOptions\n  ) => void;\n  prefixName: string;\n  viewMode: boolean;\n  clauses: Partial<ArrayField<Record<string, object>, 'id'>>;\n}\n\nconst Clause = ({\n  prefixName,\n  register,\n  control,\n  clauses,\n  viewMode\n}: Props) => (\n  <Styled.Clause>\n    {map(clauses?.clauses, (rule, index) => (\n      <Rule\n        rule={rule}\n        key={index}\n        control={control}\n        register={register}\n        viewMode={viewMode}\n        prefixName={`${prefixName}.clauses`}\n      />\n    ))}\n  </Styled.Clause>\n);\n\nexport default Clause;\n"]},"metadata":{},"sourceType":"module"}