{"ast":null,"code":"import _slicedToArray from\"/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{useState}from'react';import isEmpty from'lodash/isEmpty';import Styled from'./styled';var Input=React.forwardRef(function(_ref,ref){var name=_ref.name,label=_ref.label,onChange=_ref.onChange,className=_ref.className,_ref$type=_ref.type,type=_ref$type===void 0?'text':_ref$type,_ref$disabled=_ref.disabled,disabled=_ref$disabled===void 0?false:_ref$disabled,_ref$autoComplete=_ref.autoComplete,autoComplete=_ref$autoComplete===void 0?'off':_ref$autoComplete,rest=_objectWithoutProperties(_ref,[\"name\",\"label\",\"onChange\",\"className\",\"type\",\"disabled\",\"autoComplete\"]);var _useState=useState(!isEmpty(rest.defaultValue)),_useState2=_slicedToArray(_useState,2),isFocused=_useState2[0],setIsFocused=_useState2[1];var handleChange=function handleChange(event){setIsFocused(!isEmpty(event.currentTarget.value));if(onChange){onChange(event);}};return/*#__PURE__*/React.createElement(Styled.Wrapper,{type:type,className:className},/*#__PURE__*/React.createElement(Styled.Input,Object.assign({ref:ref,type:type,name:name,\"data-testid\":\"input-\".concat(name),autoComplete:autoComplete,onChange:handleChange,disabled:disabled},rest)),label&&/*#__PURE__*/React.createElement(Styled.Label,{isFocused:isFocused},label));});export default Input;","map":{"version":3,"sources":["/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/src/core/components/Form/Input/index.tsx"],"names":["React","useState","isEmpty","Styled","Input","forwardRef","ref","name","label","onChange","className","type","disabled","autoComplete","rest","defaultValue","isFocused","setIsFocused","handleChange","event","currentTarget","value"],"mappings":"wXAAA,MAAOA,CAAAA,KAAP,EAAqBC,QAArB,KAAqC,OAArC,CAEA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CAeA,GAAMC,CAAAA,KAAK,CAAGJ,KAAK,CAACK,UAAN,CACZ,cAWEC,GAXF,CAYK,IAVDC,CAAAA,IAUC,MAVDA,IAUC,CATDC,KASC,MATDA,KASC,CARDC,QAQC,MARDA,QAQC,CAPDC,SAOC,MAPDA,SAOC,gBANDC,IAMC,CANDA,IAMC,oBANM,MAMN,8BALDC,QAKC,CALDA,QAKC,wBALU,KAKV,sCAJDC,YAIC,CAJDA,YAIC,4BAJc,KAId,mBAHEC,IAGF,uHAC+Bb,QAAQ,CAAC,CAACC,OAAO,CAACY,IAAI,CAACC,YAAN,CAAT,CADvC,wCACIC,SADJ,eACeC,YADf,eAGH,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAA6B,CAChDF,YAAY,CAAC,CAACf,OAAO,CAACiB,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAAT,CAAZ,CAEA,GAAIZ,QAAJ,CAAc,CACZA,QAAQ,CAACU,KAAD,CAAR,CACD,CACF,CAND,CAQA,mBACE,oBAAC,MAAD,CAAQ,OAAR,EAAgB,IAAI,CAAER,IAAtB,CAA4B,SAAS,CAAED,SAAvC,eACE,oBAAC,MAAD,CAAQ,KAAR,gBACE,GAAG,CAAEJ,GADP,CAEE,IAAI,CAAEK,IAFR,CAGE,IAAI,CAAEJ,IAHR,CAIE,8BAAsBA,IAAtB,CAJF,CAKE,YAAY,CAAEM,YALhB,CAME,QAAQ,CAAEK,YANZ,CAOE,QAAQ,CAAEN,QAPZ,EAQME,IARN,EADF,CAWGN,KAAK,eAAI,oBAAC,MAAD,CAAQ,KAAR,EAAc,SAAS,CAAEQ,SAAzB,EAAqCR,KAArC,CAXZ,CADF,CAeD,CAvCW,CAAd,CA0CA,cAAeJ,CAAAA,KAAf","sourcesContent":["import React, { Ref, useState } from 'react';\nimport { ChangeInputEvent, InputEvents } from 'core/interfaces/InputEvents';\nimport isEmpty from 'lodash/isEmpty';\nimport Styled from './styled';\n\nexport interface Props extends InputEvents {\n  id?: string;\n  className?: string;\n  resume?: boolean;\n  type?: string;\n  name?: string;\n  label?: string;\n  autoComplete?: string;\n  defaultValue?: string;\n  onChange?: (event: ChangeInputEvent) => void;\n  disabled?: boolean;\n}\n\nconst Input = React.forwardRef(\n  (\n    {\n      name,\n      label,\n      onChange,\n      className,\n      type = 'text',\n      disabled = false,\n      autoComplete = 'off',\n      ...rest\n    }: Props,\n    ref: Ref<HTMLInputElement>\n  ) => {\n    const [isFocused, setIsFocused] = useState(!isEmpty(rest.defaultValue));\n\n    const handleChange = (event: ChangeInputEvent) => {\n      setIsFocused(!isEmpty(event.currentTarget.value));\n\n      if (onChange) {\n        onChange(event);\n      }\n    };\n\n    return (\n      <Styled.Wrapper type={type} className={className}>\n        <Styled.Input\n          ref={ref}\n          type={type}\n          name={name}\n          data-testid={`input-${name}`}\n          autoComplete={autoComplete}\n          onChange={handleChange}\n          disabled={disabled}\n          {...rest}\n        />\n        {label && <Styled.Label isFocused={isFocused}>{label}</Styled.Label>}\n      </Styled.Wrapper>\n    );\n  }\n);\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}