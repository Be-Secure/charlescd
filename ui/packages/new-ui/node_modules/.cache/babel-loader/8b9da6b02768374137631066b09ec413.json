{"ast":null,"code":"import _slicedToArray from\"/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useCallback}from'react';import{useFetch}from'core/providers/base/hooks';import{findAllCircles,findCircleById}from'core/providers/circle';import{useDispatch}from'core/state/hooks';import{loadedCirclesAction,loadedCirclesMetricsAction}from'./state/actions';export var CIRCLE_TYPES;(function(CIRCLE_TYPES){CIRCLE_TYPES[\"metrics\"]=\"metrics\";CIRCLE_TYPES[\"list\"]=\"list\";})(CIRCLE_TYPES||(CIRCLE_TYPES={}));export var CIRCLE_STATUS;(function(CIRCLE_STATUS){CIRCLE_STATUS[\"active\"]=\"actives\";CIRCLE_STATUS[\"inactives\"]=\"inactives\";CIRCLE_STATUS[\"hypotheses\"]=\"hypotheses\";})(CIRCLE_STATUS||(CIRCLE_STATUS={}));export var useCircle=function useCircle(){var _useFetch=useFetch(findCircleById),_useFetch2=_slicedToArray(_useFetch,2),circleData=_useFetch2[0],getCircle=_useFetch2[1];var response=circleData.response;var loadCircle=useCallback(function(id){getCircle({id:id});},[getCircle]);return[response,loadCircle,getCircle];};export var useCircles=function useCircles(type){var dispatch=useDispatch();var _useFetch3=useFetch(findAllCircles),_useFetch4=_slicedToArray(_useFetch3,2),circlesData=_useFetch4[0],getCircles=_useFetch4[1];var response=circlesData.response,error=circlesData.error,loading=circlesData.loading;var filterCircles=useCallback(function(name,status){if(status===CIRCLE_STATUS.active){getCircles({name:name,active:true});}else if(status===CIRCLE_STATUS.inactives){getCircles({name:name,active:false});}},[getCircles]);useEffect(function(){if(!error&&type===CIRCLE_TYPES.list){dispatch(loadedCirclesAction(response));}else if(!error&&type===CIRCLE_TYPES.metrics){dispatch(loadedCirclesMetricsAction(response));}else{console.error(error);}},[dispatch,response,error,type]);return[loading,filterCircles,getCircles];};export default useCircles;","map":{"version":3,"sources":["/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/src/modules/Circles/hooks.ts"],"names":["useEffect","useCallback","useFetch","findAllCircles","findCircleById","useDispatch","loadedCirclesAction","loadedCirclesMetricsAction","CIRCLE_TYPES","CIRCLE_STATUS","useCircle","circleData","getCircle","response","loadCircle","id","useCircles","type","dispatch","circlesData","getCircles","error","loading","filterCircles","name","status","active","inactives","list","metrics","console"],"mappings":"kLAAA,OAASA,SAAT,CAAoBC,WAApB,KAAuC,OAAvC,CACA,OAASC,QAAT,KAAyB,2BAAzB,CACA,OAASC,cAAT,CAAyBC,cAAzB,KAA+C,uBAA/C,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,OACEC,mBADF,CAEEC,0BAFF,KAGO,iBAHP,CAOA,UAAYC,CAAAA,YAAZ,C,UAAYA,Y,EAAAA,Y,sBAAAA,Y,mBAAAA,Y,GAAAA,Y,MAKZ,UAAYC,CAAAA,aAAZ,C,UAAYA,a,EAAAA,a,qBAAAA,a,0BAAAA,a,+BAAAA,a,GAAAA,a,MAMZ,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAoC,eAC3BR,QAAQ,CAASE,cAAT,CADmB,wCACpDO,UADoD,eACxCC,SADwC,kBAEnDC,CAAAA,QAFmD,CAEtCF,UAFsC,CAEnDE,QAFmD,CAI3D,GAAMC,CAAAA,UAAU,CAAGb,WAAW,CAC5B,SAACc,EAAD,CAAgB,CACdH,SAAS,CAAC,CAAEG,EAAE,CAAFA,EAAF,CAAD,CAAT,CACD,CAH2B,CAI5B,CAACH,SAAD,CAJ4B,CAA9B,CAOA,MAAO,CAACC,QAAD,CAAWC,UAAX,CAAuBF,SAAvB,CAAP,CACD,CAZM,CAcP,MAAO,IAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CACxBC,IADwB,CAEU,CAClC,GAAMC,CAAAA,QAAQ,CAAGb,WAAW,EAA5B,CADkC,eAEAH,QAAQ,CAAmBC,cAAnB,CAFR,yCAE3BgB,WAF2B,eAEdC,UAFc,kBAG1BP,CAAAA,QAH0B,CAGGM,WAHH,CAG1BN,QAH0B,CAGhBQ,KAHgB,CAGGF,WAHH,CAGhBE,KAHgB,CAGTC,OAHS,CAGGH,WAHH,CAGTG,OAHS,CAKlC,GAAMC,CAAAA,aAAa,CAAGtB,WAAW,CAC/B,SAACuB,IAAD,CAAeC,MAAf,CAAkC,CAChC,GAAIA,MAAM,GAAKhB,aAAa,CAACiB,MAA7B,CAAqC,CACnCN,UAAU,CAAC,CAAEI,IAAI,CAAJA,IAAF,CAAQE,MAAM,CAAE,IAAhB,CAAD,CAAV,CACD,CAFD,IAEO,IAAID,MAAM,GAAKhB,aAAa,CAACkB,SAA7B,CAAwC,CAC7CP,UAAU,CAAC,CAAEI,IAAI,CAAJA,IAAF,CAAQE,MAAM,CAAE,KAAhB,CAAD,CAAV,CACD,CACF,CAP8B,CAQ/B,CAACN,UAAD,CAR+B,CAAjC,CAWApB,SAAS,CAAC,UAAM,CACd,GAAI,CAACqB,KAAD,EAAUJ,IAAI,GAAKT,YAAY,CAACoB,IAApC,CAA0C,CACxCV,QAAQ,CAACZ,mBAAmB,CAACO,QAAD,CAApB,CAAR,CACD,CAFD,IAEO,IAAI,CAACQ,KAAD,EAAUJ,IAAI,GAAKT,YAAY,CAACqB,OAApC,CAA6C,CAClDX,QAAQ,CAACX,0BAA0B,CAACM,QAAD,CAA3B,CAAR,CACD,CAFM,IAEA,CACLiB,OAAO,CAACT,KAAR,CAAcA,KAAd,EACD,CACF,CARQ,CAQN,CAACH,QAAD,CAAWL,QAAX,CAAqBQ,KAArB,CAA4BJ,IAA5B,CARM,CAAT,CAUA,MAAO,CAACK,OAAD,CAAUC,aAAV,CAAyBH,UAAzB,CAAP,CACD,CA7BM,CA+BP,cAAeJ,CAAAA,UAAf","sourcesContent":["import { useEffect, useCallback } from 'react';\nimport { useFetch } from 'core/providers/base/hooks';\nimport { findAllCircles, findCircleById } from 'core/providers/circle';\nimport { useDispatch } from 'core/state/hooks';\nimport {\n  loadedCirclesAction,\n  loadedCirclesMetricsAction\n} from './state/actions';\nimport { CirclePagination } from './interfaces/CirclesPagination';\nimport { Circle } from './interfaces/Circle';\n\nexport enum CIRCLE_TYPES {\n  metrics = 'metrics',\n  list = 'list'\n}\n\nexport enum CIRCLE_STATUS {\n  active = 'actives',\n  inactives = 'inactives',\n  hypotheses = 'hypotheses'\n}\n\nexport const useCircle = (): [Circle, Function, Function] => {\n  const [circleData, getCircle] = useFetch<Circle>(findCircleById);\n  const { response } = circleData;\n\n  const loadCircle = useCallback(\n    (id: string) => {\n      getCircle({ id });\n    },\n    [getCircle]\n  );\n\n  return [response, loadCircle, getCircle];\n};\n\nexport const useCircles = (\n  type: CIRCLE_TYPES\n): [boolean, Function, Function] => {\n  const dispatch = useDispatch();\n  const [circlesData, getCircles] = useFetch<CirclePagination>(findAllCircles);\n  const { response, error, loading } = circlesData;\n\n  const filterCircles = useCallback(\n    (name: string, status: string) => {\n      if (status === CIRCLE_STATUS.active) {\n        getCircles({ name, active: true });\n      } else if (status === CIRCLE_STATUS.inactives) {\n        getCircles({ name, active: false });\n      }\n    },\n    [getCircles]\n  );\n\n  useEffect(() => {\n    if (!error && type === CIRCLE_TYPES.list) {\n      dispatch(loadedCirclesAction(response));\n    } else if (!error && type === CIRCLE_TYPES.metrics) {\n      dispatch(loadedCirclesMetricsAction(response));\n    } else {\n      console.error(error);\n    }\n  }, [dispatch, response, error, type]);\n\n  return [loading, filterCircles, getCircles];\n};\n\nexport default useCircles;\n"]},"metadata":{},"sourceType":"module"}