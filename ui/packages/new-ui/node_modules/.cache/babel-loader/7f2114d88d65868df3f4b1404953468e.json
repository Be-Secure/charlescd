{"ast":null,"code":"import _slicedToArray from\"/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{memo,useState}from'react';import CircleMetrics from'containers/Metrics';import Text from'core/components/Text';import ContentIcon from'core/components/ContentIcon';import{METRICS_TYPE,CHART_TYPE}from'containers/Metrics/enums';import{getActiveMetric,getActiveMetricDescription}from'../helpers';import Styled from'../styled';var LayerMetrics=function LayerMetrics(_ref){var id=_ref.id;var _useState=useState(METRICS_TYPE.REQUESTS_BY_CIRCLE),_useState2=_slicedToArray(_useState,2),activeMetricType=_useState2[0],setActiveMetricType=_useState2[1];var handleChangeMetricTypes=function handleChangeMetricTypes(changeType){var activeMetric=getActiveMetric(changeType,activeMetricType);setActiveMetricType(activeMetric);};return/*#__PURE__*/React.createElement(Styled.Layer,null,/*#__PURE__*/React.createElement(Styled.MetricsTitle,null,/*#__PURE__*/React.createElement(ContentIcon,{icon:\"metrics\"},/*#__PURE__*/React.createElement(Text.h2,{color:\"light\"},\"Health\")),/*#__PURE__*/React.createElement(Styled.MetricsControl,null,/*#__PURE__*/React.createElement(Styled.MetricsLabel,null,/*#__PURE__*/React.createElement(Text.h5,{color:\"light\"},getActiveMetricDescription(activeMetricType))),/*#__PURE__*/React.createElement(Styled.SortLeft,{onClick:function onClick(){return handleChangeMetricTypes('INCREASE');}}),/*#__PURE__*/React.createElement(Styled.SortRight,{onClick:function onClick(){return handleChangeMetricTypes('DECREASE');}}))),/*#__PURE__*/React.createElement(Styled.Content,null,/*#__PURE__*/React.createElement(CircleMetrics,{id:id,metricType:activeMetricType,chartType:CHART_TYPE.COMPARISON})));};export default memo(LayerMetrics);","map":{"version":3,"sources":["/Users/ricardobasilio/projects/charlescd/ui/packages/new-ui/src/modules/Circles/Comparation/Item/Layer/Metrics.tsx"],"names":["React","memo","useState","CircleMetrics","Text","ContentIcon","METRICS_TYPE","CHART_TYPE","getActiveMetric","getActiveMetricDescription","Styled","LayerMetrics","id","REQUESTS_BY_CIRCLE","activeMetricType","setActiveMetricType","handleChangeMetricTypes","changeType","activeMetric","COMPARISON"],"mappings":"kLAAA,MAAOA,CAAAA,KAAP,EAAgBC,IAAhB,CAAsBC,QAAtB,KAAsC,OAAtC,CACA,MAAOC,CAAAA,aAAP,KAA0B,oBAA1B,CACA,MAAOC,CAAAA,IAAP,KAAiB,sBAAjB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6BAAxB,CACA,OAASC,YAAT,CAAuBC,UAAvB,KAAyC,0BAAzC,CACA,OACEC,eADF,CAGEC,0BAHF,KAIO,YAJP,CAKA,MAAOC,CAAAA,MAAP,KAAmB,WAAnB,CAMA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAmB,IAAhBC,CAAAA,EAAgB,MAAhBA,EAAgB,eACUV,QAAQ,CACtDI,YAAY,CAACO,kBADyC,CADlB,wCAC/BC,gBAD+B,eACbC,mBADa,eAKtC,GAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,UAAD,CAA4B,CAC1D,GAAMC,CAAAA,YAAY,CAAGV,eAAe,CAACS,UAAD,CAAaH,gBAAb,CAApC,CACAC,mBAAmB,CAACG,YAAD,CAAnB,CACD,CAHD,CAKA,mBACE,oBAAC,MAAD,CAAQ,KAAR,mBACE,oBAAC,MAAD,CAAQ,YAAR,mBACE,oBAAC,WAAD,EAAa,IAAI,CAAC,SAAlB,eACE,oBAAC,IAAD,CAAM,EAAN,EAAS,KAAK,CAAC,OAAf,WADF,CADF,cAIE,oBAAC,MAAD,CAAQ,cAAR,mBACE,oBAAC,MAAD,CAAQ,YAAR,mBACE,oBAAC,IAAD,CAAM,EAAN,EAAS,KAAK,CAAC,OAAf,EACGT,0BAA0B,CAACK,gBAAD,CAD7B,CADF,CADF,cAME,oBAAC,MAAD,CAAQ,QAAR,EACE,OAAO,CAAE,yBAAME,CAAAA,uBAAuB,CAAC,UAAD,CAA7B,EADX,EANF,cASE,oBAAC,MAAD,CAAQ,SAAR,EACE,OAAO,CAAE,yBAAMA,CAAAA,uBAAuB,CAAC,UAAD,CAA7B,EADX,EATF,CAJF,CADF,cAmBE,oBAAC,MAAD,CAAQ,OAAR,mBACE,oBAAC,aAAD,EACE,EAAE,CAAEJ,EADN,CAEE,UAAU,CAAEE,gBAFd,CAGE,SAAS,CAAEP,UAAU,CAACY,UAHxB,EADF,CAnBF,CADF,CA6BD,CAvCD,CAyCA,cAAelB,CAAAA,IAAI,CAACU,YAAD,CAAnB","sourcesContent":["import React, { memo, useState } from 'react';\nimport CircleMetrics from 'containers/Metrics';\nimport Text from 'core/components/Text';\nimport ContentIcon from 'core/components/ContentIcon';\nimport { METRICS_TYPE, CHART_TYPE } from 'containers/Metrics/enums';\nimport {\n  getActiveMetric,\n  ChangeType,\n  getActiveMetricDescription\n} from '../helpers';\nimport Styled from '../styled';\n\ninterface Props {\n  id: string;\n}\n\nconst LayerMetrics = ({ id }: Props) => {\n  const [activeMetricType, setActiveMetricType] = useState(\n    METRICS_TYPE.REQUESTS_BY_CIRCLE\n  );\n\n  const handleChangeMetricTypes = (changeType: ChangeType) => {\n    const activeMetric = getActiveMetric(changeType, activeMetricType);\n    setActiveMetricType(activeMetric);\n  };\n\n  return (\n    <Styled.Layer>\n      <Styled.MetricsTitle>\n        <ContentIcon icon=\"metrics\">\n          <Text.h2 color=\"light\">Health</Text.h2>\n        </ContentIcon>\n        <Styled.MetricsControl>\n          <Styled.MetricsLabel>\n            <Text.h5 color=\"light\">\n              {getActiveMetricDescription(activeMetricType)}\n            </Text.h5>\n          </Styled.MetricsLabel>\n          <Styled.SortLeft\n            onClick={() => handleChangeMetricTypes('INCREASE')}\n          />\n          <Styled.SortRight\n            onClick={() => handleChangeMetricTypes('DECREASE')}\n          />\n        </Styled.MetricsControl>\n      </Styled.MetricsTitle>\n      <Styled.Content>\n        <CircleMetrics\n          id={id}\n          metricType={activeMetricType}\n          chartType={CHART_TYPE.COMPARISON}\n        />\n      </Styled.Content>\n    </Styled.Layer>\n  );\n};\n\nexport default memo(LayerMetrics);\n"]},"metadata":{},"sourceType":"module"}