{
  "config": {
    "title": "Ui",
    "description": "Charles C.D. | Fastest hypothesis validation with Circle Deployment",
    "menu": [],
    "version": "1.0.0",
    "repository": null,
    "native": false,
    "themeConfig": {},
    "separator": "-",
    "typescript": true
  },
  "entries": [
    {
      "key": "README.md",
      "value": {
        "id": "04c6e90faac2675aa89e2176d2eec7d8",
        "filepath": "README.md",
        "fullpath": "/Users/leandroqueiroz/zup/charlescd/ui/README.md",
        "link": "",
        "hidden": false,
        "slug": "readme",
        "route": "/readme",
        "name": "Readme",
        "menu": "",
        "headings": [
          {
            "slug": "charlescd-ui",
            "depth": 1,
            "value": "CharlesCD UI"
          },
          {
            "slug": "how-to-use",
            "depth": 2,
            "value": "How to Use"
          },
          {
            "slug": "requirements",
            "depth": 3,
            "value": "Requirements"
          },
          {
            "slug": "on-terminal",
            "depth": 3,
            "value": "On terminal"
          },
          {
            "slug": "how-to-start-the-app-with-mocks",
            "depth": 3,
            "value": "How to start the app with mocks"
          },
          {
            "slug": "testing",
            "depth": 3,
            "value": "Testing"
          },
          {
            "slug": "building--deploying",
            "depth": 3,
            "value": "Building & Deploying"
          },
          {
            "slug": "cra",
            "depth": 3,
            "value": "CRA"
          },
          {
            "slug": "documentation",
            "depth": 2,
            "value": "Documentation"
          },
          {
            "slug": "contributing",
            "depth": 2,
            "value": "Contributing"
          }
        ]
      }
    },
    {
      "key": "src/docz/Text.mdx",
      "value": {
        "name": "Text Component",
        "id": "8882affa1a928a93729bd755c21a0873",
        "filepath": "src/docz/Text.mdx",
        "fullpath": "/Users/leandroqueiroz/zup/charlescd/ui/src/docz/Text.mdx",
        "link": "",
        "hidden": false,
        "slug": "src-docz-text",
        "route": "/src-docz-text",
        "menu": "",
        "headings": [
          {
            "slug": "text-component",
            "depth": 1,
            "value": "Text Component"
          },
          {
            "slug": "text-props",
            "depth": 2,
            "value": "Text Props"
          }
        ]
      }
    }
  ],
  "props": [
    {
      "key": "src/App.tsx",
      "value": []
    },
    {
      "key": "src/Routes.tsx",
      "value": []
    },
    {
      "key": "src/index.tsx",
      "value": []
    },
    {
      "key": "src/react-app-env.d.ts",
      "value": []
    },
    {
      "key": "src/setupTests.ts",
      "value": []
    },
    {
      "key": "src/styled.d.ts",
      "value": []
    },
    {
      "key": "src/__tests__/App.spec.tsx",
      "value": []
    },
    {
      "key": "src/__tests__/Routes.spec.tsx",
      "value": []
    },
    {
      "key": "src/mocks/browser.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers.ts",
      "value": []
    },
    {
      "key": "src/mocks/server.ts",
      "value": []
    },
    {
      "key": "src/unit-test/MockIntersectionObserver.ts",
      "value": []
    },
    {
      "key": "src/unit-test/apexcharts.mock.tsx",
      "value": []
    },
    {
      "key": "src/unit-test/cookie.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "removeCookie",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/unit-test/form-context.mock.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "FormContextMock",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/unit-test/icon.mock.tsx",
      "value": []
    },
    {
      "key": "src/unit-test/local-storage.tsx",
      "value": []
    },
    {
      "key": "src/unit-test/setup-msw.ts",
      "value": []
    },
    {
      "key": "src/unit-test/testUtils.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "AllTheProviders",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "ThemeProviderWrapper",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "normalizeRGBColor",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "Unmounts React trees that were mounted with render.",
          "displayName": "cleanup",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "Simply calls ReactDOMTestUtils.act(cb)\nIf that's not available (older version of react) then it\nsimply calls the given callback immediately",
          "displayName": "act",
          "methods": [],
          "props": {
            "apply": {
              "defaultValue": null,
              "description": "Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n@param thisArg The object to be used as the this object.\n@param args An array of argument values to be passed to the function.",
              "name": "apply",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <T, R>(this: (this: T) => R, thisArg: T): R; <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R; }"
              }
            },
            "call": {
              "defaultValue": null,
              "description": "Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\n@param thisArg The object to be used as the this object.\n@param args Argument values to be passed to the function.",
              "name": "call",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R"
              }
            },
            "bind": {
              "defaultValue": null,
              "description": "For a given function, creates a bound function that has the same body as the original function.\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.\n@param thisArg The object to be used as the this object.\n@param args Arguments to bind to the parameters of the function.",
              "name": "bind",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A0, A extends any[], R>(this: (this: T, arg0: A0, ...args: A) => R, thisArg: T, arg0: A0): (...args: A) => R; <T, A0, A1, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1): (...args: A) =>..."
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a function.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "prototype": {
              "defaultValue": null,
              "description": "",
              "name": "prototype",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "arguments": {
              "defaultValue": null,
              "description": "",
              "name": "arguments",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "caller": {
              "defaultValue": null,
              "description": "",
              "name": "caller",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "Returns the name of the function. Function names are read-only and can not be changed.",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "__@hasInstance": {
              "defaultValue": null,
              "description": "Determines whether the given value inherits from this function if this function was used\nas a constructor function.\n\nA constructor function can control which objects are recognized as its instances by\n'instanceof' by overriding this method.",
              "name": "__@hasInstance",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: any) => boolean"
              }
            }
          }
        },
        {
          "tags": {
            "deprecated": "`waitForDomChange` has been deprecated.\nUse `waitFor` instead: https://testing-library.com/docs/dom-testing-library/api-async#waitfor."
          },
          "description": "",
          "displayName": "waitForDomChange",
          "methods": [],
          "props": {
            "container": {
              "defaultValue": null,
              "description": "",
              "name": "container",
              "declarations": [],
              "required": false,
              "type": {
                "name": "HTMLElement"
              }
            },
            "timeout": {
              "defaultValue": null,
              "description": "",
              "name": "timeout",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "interval": {
              "defaultValue": null,
              "description": "",
              "name": "interval",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "onTimeout": {
              "defaultValue": null,
              "description": "",
              "name": "onTimeout",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(error: Error) => Error"
              }
            },
            "mutationObserverOptions": {
              "defaultValue": null,
              "description": "",
              "name": "mutationObserverOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "MutationObserverInit"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getDefaultNormalizer",
          "methods": [],
          "props": {
            "trim": {
              "defaultValue": null,
              "description": "",
              "name": "trim",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "collapseWhitespace": {
              "defaultValue": null,
              "description": "",
              "name": "collapseWhitespace",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getNodeText",
          "methods": [],
          "props": {
            "accessKey": {
              "defaultValue": null,
              "description": "",
              "name": "accessKey",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "accessKeyLabel": {
              "defaultValue": null,
              "description": "",
              "name": "accessKeyLabel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "autocapitalize": {
              "defaultValue": null,
              "description": "",
              "name": "autocapitalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "dir": {
              "defaultValue": null,
              "description": "",
              "name": "dir",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "draggable": {
              "defaultValue": null,
              "description": "",
              "name": "draggable",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "hidden": {
              "defaultValue": null,
              "description": "",
              "name": "hidden",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "innerText": {
              "defaultValue": null,
              "description": "",
              "name": "innerText",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "lang": {
              "defaultValue": null,
              "description": "",
              "name": "lang",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "offsetHeight": {
              "defaultValue": null,
              "description": "",
              "name": "offsetHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "offsetLeft": {
              "defaultValue": null,
              "description": "",
              "name": "offsetLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "offsetParent": {
              "defaultValue": null,
              "description": "",
              "name": "offsetParent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "offsetTop": {
              "defaultValue": null,
              "description": "",
              "name": "offsetTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "offsetWidth": {
              "defaultValue": null,
              "description": "",
              "name": "offsetWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "spellcheck": {
              "defaultValue": null,
              "description": "",
              "name": "spellcheck",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "translate": {
              "defaultValue": null,
              "description": "",
              "name": "translate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "click": {
              "defaultValue": null,
              "description": "",
              "name": "click",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "addEventListener": {
              "defaultValue": null,
              "description": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.",
              "name": "addEventListener",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"error\" | \"fullscreenchange\" | \"fullscreenerror\" | \"abort\" | \"animationcancel\" | \"animationend\" | \"animationiteration\" | \"animationstart\" | \"auxclick\" | \"blur\" | \"cancel\" | ... 79 more ... | \"paste\">(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventL..."
              }
            },
            "removeEventListener": {
              "defaultValue": null,
              "description": "Removes the event listener in target's event listener list with the same type, callback, and options.\nRemoves the event listener in target's event listener list with the same type, callback, and options.\nRemoves the event listener in target's event listener list with the same type, callback, and options.\nRemoves the event listener in target's event listener list with the same type, callback, and options.",
              "name": "removeEventListener",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"error\" | \"fullscreenchange\" | \"fullscreenerror\" | \"abort\" | \"animationcancel\" | \"animationend\" | \"animationiteration\" | \"animationstart\" | \"auxclick\" | \"blur\" | \"cancel\" | ... 79 more ... | \"paste\">(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventList..."
              }
            },
            "assignedSlot": {
              "defaultValue": null,
              "description": "",
              "name": "assignedSlot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLSlotElement"
              }
            },
            "attributes": {
              "defaultValue": null,
              "description": "",
              "name": "attributes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "NamedNodeMap"
              }
            },
            "classList": {
              "defaultValue": null,
              "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
              "name": "classList",
              "declarations": [],
              "required": true,
              "type": {
                "name": "DOMTokenList"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
              "name": "className",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "clientHeight": {
              "defaultValue": null,
              "description": "",
              "name": "clientHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientLeft": {
              "defaultValue": null,
              "description": "",
              "name": "clientLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientTop": {
              "defaultValue": null,
              "description": "",
              "name": "clientTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientWidth": {
              "defaultValue": null,
              "description": "",
              "name": "clientWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "id": {
              "defaultValue": null,
              "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "localName": {
              "defaultValue": null,
              "description": "Returns the local name.",
              "name": "localName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "namespaceURI": {
              "defaultValue": null,
              "description": "Returns the namespace.",
              "name": "namespaceURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onfullscreenchange": {
              "defaultValue": null,
              "description": "",
              "name": "onfullscreenchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: Element, ev: Event) => any"
              }
            },
            "onfullscreenerror": {
              "defaultValue": null,
              "description": "",
              "name": "onfullscreenerror",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: Element, ev: Event) => any"
              }
            },
            "outerHTML": {
              "defaultValue": null,
              "description": "",
              "name": "outerHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "prefix": {
              "defaultValue": null,
              "description": "Returns the namespace prefix.",
              "name": "prefix",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "scrollHeight": {
              "defaultValue": null,
              "description": "",
              "name": "scrollHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollLeft": {
              "defaultValue": null,
              "description": "",
              "name": "scrollLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollTop": {
              "defaultValue": null,
              "description": "",
              "name": "scrollTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollWidth": {
              "defaultValue": null,
              "description": "",
              "name": "scrollWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "shadowRoot": {
              "defaultValue": null,
              "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
              "name": "shadowRoot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ShadowRoot"
              }
            },
            "slot": {
              "defaultValue": null,
              "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
              "name": "slot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "tagName": {
              "defaultValue": null,
              "description": "Returns the HTML-uppercased qualified name.",
              "name": "tagName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "attachShadow": {
              "defaultValue": null,
              "description": "Creates a shadow root for element and returns it.",
              "name": "attachShadow",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(init: ShadowRootInit) => ShadowRoot"
              }
            },
            "closest": {
              "defaultValue": null,
              "description": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.",
              "name": "closest",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selector: K): HTMLElementTagNameMap[K]; <K extends \"symbol\" | ... 55 more ... | \"view\">(selector: K..."
              }
            },
            "getAttribute": {
              "defaultValue": null,
              "description": "Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.",
              "name": "getAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => string"
              }
            },
            "getAttributeNS": {
              "defaultValue": null,
              "description": "Returns element's attribute whose namespace is namespace and local name is localName, and null if there is\nno such attribute otherwise.",
              "name": "getAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => string"
              }
            },
            "getAttributeNames": {
              "defaultValue": null,
              "description": "Returns the qualified names of all element's attributes.\nCan contain duplicates.",
              "name": "getAttributeNames",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string[]"
              }
            },
            "getAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "getAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => Attr"
              }
            },
            "getAttributeNodeNS": {
              "defaultValue": null,
              "description": "",
              "name": "getAttributeNodeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespaceURI: string, localName: string) => Attr"
              }
            },
            "getBoundingClientRect": {
              "defaultValue": null,
              "description": "",
              "name": "getBoundingClientRect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ClientRect | DOMRect"
              }
            },
            "getClientRects": {
              "defaultValue": null,
              "description": "",
              "name": "getClientRects",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ClientRectList | DOMRectList"
              }
            },
            "getElementsByClassName": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByClassName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(classNames: string) => HTMLCollectionOf<Element>"
              }
            },
            "getElementsByTagName": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByTagName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(qualifiedName: K): HTMLCollectionOf<...>; <K extends \"symbol\" | ... 55 more ... | \"view\">(qualified..."
              }
            },
            "getElementsByTagNameNS": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByTagNameNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>; (namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<SVGElement>; (namespaceURI: string, localName: string): HTMLCollectionOf<...>; }"
              }
            },
            "hasAttribute": {
              "defaultValue": null,
              "description": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.",
              "name": "hasAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => boolean"
              }
            },
            "hasAttributeNS": {
              "defaultValue": null,
              "description": "Returns true if element has an attribute whose namespace is namespace and local name is localName.",
              "name": "hasAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => boolean"
              }
            },
            "hasAttributes": {
              "defaultValue": null,
              "description": "Returns true if element has attributes, and false otherwise.",
              "name": "hasAttributes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => boolean"
              }
            },
            "hasPointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "hasPointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => boolean"
              }
            },
            "insertAdjacentElement": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentElement",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(position: InsertPosition, insertedElement: Element) => Element"
              }
            },
            "insertAdjacentHTML": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(where: InsertPosition, html: string) => void"
              }
            },
            "insertAdjacentText": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentText",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(where: InsertPosition, text: string) => void"
              }
            },
            "matches": {
              "defaultValue": null,
              "description": "Returns true if matching selectors against element's root yields element, and false otherwise.",
              "name": "matches",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(selectors: string) => boolean"
              }
            },
            "msGetRegionContent": {
              "defaultValue": null,
              "description": "",
              "name": "msGetRegionContent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => any"
              }
            },
            "releasePointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "releasePointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => void"
              }
            },
            "removeAttribute": {
              "defaultValue": null,
              "description": "Removes element's first attribute whose qualified name is qualifiedName.",
              "name": "removeAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => void"
              }
            },
            "removeAttributeNS": {
              "defaultValue": null,
              "description": "Removes element's attribute whose namespace is namespace and local name is localName.",
              "name": "removeAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => void"
              }
            },
            "removeAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "removeAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "requestFullscreen": {
              "defaultValue": null,
              "description": "Displays element fullscreen and resolves promise when done.\nWhen supplied, options's navigationUI member indicates whether showing\nnavigation UI while in fullscreen is preferred or not. If set to \"show\", navigation\nsimplicity is preferred over screen space, and if set to \"hide\", more screen space\nis preferred. User agents are always free to honor user preference over the application's. The\ndefault value \"auto\" indicates no application preference.",
              "name": "requestFullscreen",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: FullscreenOptions) => Promise<void>"
              }
            },
            "requestPointerLock": {
              "defaultValue": null,
              "description": "",
              "name": "requestPointerLock",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "scroll": {
              "defaultValue": null,
              "description": "",
              "name": "scroll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "scrollBy": {
              "defaultValue": null,
              "description": "",
              "name": "scrollBy",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "scrollIntoView": {
              "defaultValue": null,
              "description": "",
              "name": "scrollIntoView",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(arg?: boolean | ScrollIntoViewOptions) => void"
              }
            },
            "scrollTo": {
              "defaultValue": null,
              "description": "",
              "name": "scrollTo",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "setAttribute": {
              "defaultValue": null,
              "description": "Sets the value of element's first attribute whose qualified name is qualifiedName to value.",
              "name": "setAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string, value: string) => void"
              }
            },
            "setAttributeNS": {
              "defaultValue": null,
              "description": "Sets the value of element's attribute whose namespace is namespace and local name is localName to value.",
              "name": "setAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, qualifiedName: string, value: string) => void"
              }
            },
            "setAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "setAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "setAttributeNodeNS": {
              "defaultValue": null,
              "description": "",
              "name": "setAttributeNodeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "setPointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "setPointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => void"
              }
            },
            "toggleAttribute": {
              "defaultValue": null,
              "description": "If force is not given, \"toggles\" qualifiedName, removing it if it is\npresent and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.\nReturns true if qualifiedName is now present, and false otherwise.",
              "name": "toggleAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string, force?: boolean) => boolean"
              }
            },
            "webkitMatchesSelector": {
              "defaultValue": null,
              "description": "",
              "name": "webkitMatchesSelector",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(selectors: string) => boolean"
              }
            },
            "baseURI": {
              "defaultValue": null,
              "description": "Returns node's node document's document base URL.",
              "name": "baseURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "childNodes": {
              "defaultValue": null,
              "description": "Returns the children.",
              "name": "childNodes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "NodeListOf<ChildNode>"
              }
            },
            "firstChild": {
              "defaultValue": null,
              "description": "Returns the first child.",
              "name": "firstChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "isConnected": {
              "defaultValue": null,
              "description": "Returns true if node is connected and false otherwise.",
              "name": "isConnected",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "lastChild": {
              "defaultValue": null,
              "description": "Returns the last child.",
              "name": "lastChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "nextSibling": {
              "defaultValue": null,
              "description": "Returns the next sibling.",
              "name": "nextSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "nodeName": {
              "defaultValue": null,
              "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
              "name": "nodeName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "nodeType": {
              "defaultValue": null,
              "description": "",
              "name": "nodeType",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "nodeValue": {
              "defaultValue": null,
              "description": "",
              "name": "nodeValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "ownerDocument": {
              "defaultValue": null,
              "description": "Returns the node document.\nReturns null for documents.",
              "name": "ownerDocument",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Document"
              }
            },
            "parentElement": {
              "defaultValue": null,
              "description": "Returns the parent element.",
              "name": "parentElement",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLElement"
              }
            },
            "parentNode": {
              "defaultValue": null,
              "description": "Returns the parent.",
              "name": "parentNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Node & ParentNode"
              }
            },
            "previousSibling": {
              "defaultValue": null,
              "description": "Returns the previous sibling.",
              "name": "previousSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Node"
              }
            },
            "textContent": {
              "defaultValue": null,
              "description": "",
              "name": "textContent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "appendChild": {
              "defaultValue": null,
              "description": "",
              "name": "appendChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: T) => T"
              }
            },
            "cloneNode": {
              "defaultValue": null,
              "description": "Returns a copy of node. If deep is true, the copy also includes the node's descendants.",
              "name": "cloneNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(deep?: boolean) => Node"
              }
            },
            "compareDocumentPosition": {
              "defaultValue": null,
              "description": "",
              "name": "compareDocumentPosition",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(other: Node) => number"
              }
            },
            "contains": {
              "defaultValue": null,
              "description": "Returns true if other is an inclusive descendant of node, and false otherwise.",
              "name": "contains",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(other: Node) => boolean"
              }
            },
            "getRootNode": {
              "defaultValue": null,
              "description": "Returns node's shadow-including root.",
              "name": "getRootNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: GetRootNodeOptions) => Node"
              }
            },
            "hasChildNodes": {
              "defaultValue": null,
              "description": "Returns whether node has children.",
              "name": "hasChildNodes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => boolean"
              }
            },
            "insertBefore": {
              "defaultValue": null,
              "description": "",
              "name": "insertBefore",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: T, refChild: Node) => T"
              }
            },
            "isDefaultNamespace": {
              "defaultValue": null,
              "description": "",
              "name": "isDefaultNamespace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string) => boolean"
              }
            },
            "isEqualNode": {
              "defaultValue": null,
              "description": "Returns whether node and otherNode have the same properties.",
              "name": "isEqualNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(otherNode: Node) => boolean"
              }
            },
            "isSameNode": {
              "defaultValue": null,
              "description": "",
              "name": "isSameNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(otherNode: Node) => boolean"
              }
            },
            "lookupNamespaceURI": {
              "defaultValue": null,
              "description": "",
              "name": "lookupNamespaceURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(prefix: string) => string"
              }
            },
            "lookupPrefix": {
              "defaultValue": null,
              "description": "",
              "name": "lookupPrefix",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string) => string"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "removeChild": {
              "defaultValue": null,
              "description": "",
              "name": "removeChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(oldChild: T) => T"
              }
            },
            "replaceChild": {
              "defaultValue": null,
              "description": "",
              "name": "replaceChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: Node, oldChild: T) => T"
              }
            },
            "ATTRIBUTE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ATTRIBUTE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "CDATA_SECTION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "CDATA_SECTION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "COMMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "COMMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_FRAGMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_FRAGMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_CONTAINED_BY": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_CONTAINED_BY",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_CONTAINS": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_CONTAINS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_DISCONNECTED": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_DISCONNECTED",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_FOLLOWING": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_FOLLOWING",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_PRECEDING": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_PRECEDING",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_TYPE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_TYPE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ELEMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ELEMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ENTITY_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ENTITY_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ENTITY_REFERENCE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ENTITY_REFERENCE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "NOTATION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "NOTATION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "PROCESSING_INSTRUCTION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "PROCESSING_INSTRUCTION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "TEXT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "TEXT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "dispatchEvent": {
              "defaultValue": null,
              "description": "Dispatches a synthetic event event to target and returns true\nif either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.",
              "name": "dispatchEvent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(event: Event) => boolean"
              }
            },
            "childElementCount": {
              "defaultValue": null,
              "description": "",
              "name": "childElementCount",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "Returns the child elements.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLCollection"
              }
            },
            "firstElementChild": {
              "defaultValue": null,
              "description": "Returns the first child that is an element, and null otherwise.",
              "name": "firstElementChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "lastElementChild": {
              "defaultValue": null,
              "description": "Returns the last child that is an element, and null otherwise.",
              "name": "lastElementChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "append": {
              "defaultValue": null,
              "description": "Inserts nodes after the last child of node, while replacing\nstrings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "append",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "prepend": {
              "defaultValue": null,
              "description": "Inserts nodes before the first child of node, while\nreplacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "prepend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "querySelector": {
              "defaultValue": null,
              "description": "Returns the first element that is a descendant of node that\nmatches selectors.",
              "name": "querySelector",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selectors: K): HTMLElementTagNameMap[K]; <K extends \"symbol\" | ... 55 more ... | \"view\">(selectors:..."
              }
            },
            "querySelectorAll": {
              "defaultValue": null,
              "description": "Returns all element descendants of node that\nmatch selectors.",
              "name": "querySelectorAll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selectors: K): NodeListOf<...>; <K extends \"symbol\" | ... 55 more ... | \"view\">(selectors: K): Node..."
              }
            },
            "nextElementSibling": {
              "defaultValue": null,
              "description": "Returns the first following sibling that\nis an element, and null otherwise.",
              "name": "nextElementSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "previousElementSibling": {
              "defaultValue": null,
              "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
              "name": "previousElementSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "after": {
              "defaultValue": null,
              "description": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "after",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "before": {
              "defaultValue": null,
              "description": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "before",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "remove": {
              "defaultValue": null,
              "description": "Removes node.",
              "name": "remove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "replaceWith": {
              "defaultValue": null,
              "description": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "replaceWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "innerHTML": {
              "defaultValue": null,
              "description": "",
              "name": "innerHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "animate": {
              "defaultValue": null,
              "description": "",
              "name": "animate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation"
              }
            },
            "getAnimations": {
              "defaultValue": null,
              "description": "",
              "name": "getAnimations",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Animation[]"
              }
            },
            "onabort": {
              "defaultValue": null,
              "description": "Fires when the user aborts the download.\n@param ev The event.",
              "name": "onabort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: UIEvent) => any"
              }
            },
            "onanimationcancel": {
              "defaultValue": null,
              "description": "",
              "name": "onanimationcancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: AnimationEvent) => any"
              }
            },
            "onanimationend": {
              "defaultValue": null,
              "description": "",
              "name": "onanimationend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: AnimationEvent) => any"
              }
            },
            "onanimationiteration": {
              "defaultValue": null,
              "description": "",
              "name": "onanimationiteration",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: AnimationEvent) => any"
              }
            },
            "onanimationstart": {
              "defaultValue": null,
              "description": "",
              "name": "onanimationstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: AnimationEvent) => any"
              }
            },
            "onauxclick": {
              "defaultValue": null,
              "description": "",
              "name": "onauxclick",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onblur": {
              "defaultValue": null,
              "description": "Fires when the object loses the input focus.\n@param ev The focus event.",
              "name": "onblur",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: FocusEvent) => any"
              }
            },
            "oncancel": {
              "defaultValue": null,
              "description": "",
              "name": "oncancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "oncanplay": {
              "defaultValue": null,
              "description": "Occurs when playback is possible, but would require further buffering.\n@param ev The event.",
              "name": "oncanplay",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "oncanplaythrough": {
              "defaultValue": null,
              "description": "",
              "name": "oncanplaythrough",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onchange": {
              "defaultValue": null,
              "description": "Fires when the contents of the object or selection have changed.\n@param ev The event.",
              "name": "onchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onclick": {
              "defaultValue": null,
              "description": "Fires when the user clicks the left mouse button on the object\n@param ev The mouse event.",
              "name": "onclick",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onclose": {
              "defaultValue": null,
              "description": "",
              "name": "onclose",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "oncontextmenu": {
              "defaultValue": null,
              "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.\n@param ev The mouse event.",
              "name": "oncontextmenu",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "oncuechange": {
              "defaultValue": null,
              "description": "",
              "name": "oncuechange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ondblclick": {
              "defaultValue": null,
              "description": "Fires when the user double-clicks the object.\n@param ev The mouse event.",
              "name": "ondblclick",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "ondrag": {
              "defaultValue": null,
              "description": "Fires on the source object continuously during a drag operation.\n@param ev The event.",
              "name": "ondrag",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragend": {
              "defaultValue": null,
              "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.\n@param ev The event.",
              "name": "ondragend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragenter": {
              "defaultValue": null,
              "description": "Fires on the target element when the user drags the object to a valid drop target.\n@param ev The drag event.",
              "name": "ondragenter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragexit": {
              "defaultValue": null,
              "description": "",
              "name": "ondragexit",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ondragleave": {
              "defaultValue": null,
              "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\n@param ev The drag event.",
              "name": "ondragleave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragover": {
              "defaultValue": null,
              "description": "Fires on the target element continuously while the user drags the object over a valid drop target.\n@param ev The event.",
              "name": "ondragover",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragstart": {
              "defaultValue": null,
              "description": "Fires on the source object when the user starts to drag a text selection or selected object.\n@param ev The event.",
              "name": "ondragstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondrop": {
              "defaultValue": null,
              "description": "",
              "name": "ondrop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondurationchange": {
              "defaultValue": null,
              "description": "Occurs when the duration attribute is updated.\n@param ev The event.",
              "name": "ondurationchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onemptied": {
              "defaultValue": null,
              "description": "Occurs when the media element is reset to its initial state.\n@param ev The event.",
              "name": "onemptied",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onended": {
              "defaultValue": null,
              "description": "Occurs when the end of playback is reached.\n@param ev The event",
              "name": "onended",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onerror": {
              "defaultValue": null,
              "description": "Fires when an error occurs during object loading.\n@param ev The event.",
              "name": "onerror",
              "declarations": [],
              "required": true,
              "type": {
                "name": "OnErrorEventHandlerNonNull"
              }
            },
            "onfocus": {
              "defaultValue": null,
              "description": "Fires when the object receives focus.\n@param ev The event.",
              "name": "onfocus",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: FocusEvent) => any"
              }
            },
            "ongotpointercapture": {
              "defaultValue": null,
              "description": "",
              "name": "ongotpointercapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "oninput": {
              "defaultValue": null,
              "description": "",
              "name": "oninput",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "oninvalid": {
              "defaultValue": null,
              "description": "",
              "name": "oninvalid",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onkeydown": {
              "defaultValue": null,
              "description": "Fires when the user presses a key.\n@param ev The keyboard event",
              "name": "onkeydown",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any"
              }
            },
            "onkeypress": {
              "defaultValue": null,
              "description": "Fires when the user presses an alphanumeric key.\n@param ev The event.",
              "name": "onkeypress",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any"
              }
            },
            "onkeyup": {
              "defaultValue": null,
              "description": "Fires when the user releases a key.\n@param ev The keyboard event",
              "name": "onkeyup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any"
              }
            },
            "onload": {
              "defaultValue": null,
              "description": "Fires immediately after the browser loads the object.\n@param ev The event.",
              "name": "onload",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onloadeddata": {
              "defaultValue": null,
              "description": "Occurs when media data is loaded at the current playback position.\n@param ev The event.",
              "name": "onloadeddata",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onloadedmetadata": {
              "defaultValue": null,
              "description": "Occurs when the duration and dimensions of the media have been determined.\n@param ev The event.",
              "name": "onloadedmetadata",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onloadend": {
              "defaultValue": null,
              "description": "",
              "name": "onloadend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: ProgressEvent) => any"
              }
            },
            "onloadstart": {
              "defaultValue": null,
              "description": "Occurs when Internet Explorer begins looking for media data.\n@param ev The event.",
              "name": "onloadstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onlostpointercapture": {
              "defaultValue": null,
              "description": "",
              "name": "onlostpointercapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onmousedown": {
              "defaultValue": null,
              "description": "Fires when the user clicks the object with either mouse button.\n@param ev The mouse event.",
              "name": "onmousedown",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseenter": {
              "defaultValue": null,
              "description": "",
              "name": "onmouseenter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseleave": {
              "defaultValue": null,
              "description": "",
              "name": "onmouseleave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmousemove": {
              "defaultValue": null,
              "description": "Fires when the user moves the mouse over the object.\n@param ev The mouse event.",
              "name": "onmousemove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseout": {
              "defaultValue": null,
              "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.\n@param ev The mouse event.",
              "name": "onmouseout",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseover": {
              "defaultValue": null,
              "description": "Fires when the user moves the mouse pointer into the object.\n@param ev The mouse event.",
              "name": "onmouseover",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseup": {
              "defaultValue": null,
              "description": "Fires when the user releases a mouse button while the mouse is over the object.\n@param ev The mouse event.",
              "name": "onmouseup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onpause": {
              "defaultValue": null,
              "description": "Occurs when playback is paused.\n@param ev The event.",
              "name": "onpause",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onplay": {
              "defaultValue": null,
              "description": "Occurs when the play method is requested.\n@param ev The event.",
              "name": "onplay",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onplaying": {
              "defaultValue": null,
              "description": "Occurs when the audio or video has started playing.\n@param ev The event.",
              "name": "onplaying",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onpointercancel": {
              "defaultValue": null,
              "description": "",
              "name": "onpointercancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerdown": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerdown",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerenter": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerenter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerleave": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerleave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointermove": {
              "defaultValue": null,
              "description": "",
              "name": "onpointermove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerout": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerout",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerover": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerover",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerup": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onprogress": {
              "defaultValue": null,
              "description": "Occurs to indicate progress while downloading media data.\n@param ev The event.",
              "name": "onprogress",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: ProgressEvent) => any"
              }
            },
            "onratechange": {
              "defaultValue": null,
              "description": "Occurs when the playback rate is increased or decreased.\n@param ev The event.",
              "name": "onratechange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onreset": {
              "defaultValue": null,
              "description": "Fires when the user resets a form.\n@param ev The event.",
              "name": "onreset",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onresize": {
              "defaultValue": null,
              "description": "",
              "name": "onresize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: UIEvent) => any"
              }
            },
            "onscroll": {
              "defaultValue": null,
              "description": "Fires when the user repositions the scroll box in the scroll bar on the object.\n@param ev The event.",
              "name": "onscroll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onsecuritypolicyviolation": {
              "defaultValue": null,
              "description": "",
              "name": "onsecuritypolicyviolation",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any"
              }
            },
            "onseeked": {
              "defaultValue": null,
              "description": "Occurs when the seek operation ends.\n@param ev The event.",
              "name": "onseeked",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onseeking": {
              "defaultValue": null,
              "description": "Occurs when the current playback position is moved.\n@param ev The event.",
              "name": "onseeking",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onselect": {
              "defaultValue": null,
              "description": "Fires when the current selection changes.\n@param ev The event.",
              "name": "onselect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onselectionchange": {
              "defaultValue": null,
              "description": "",
              "name": "onselectionchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onselectstart": {
              "defaultValue": null,
              "description": "",
              "name": "onselectstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onstalled": {
              "defaultValue": null,
              "description": "Occurs when the download has stopped.\n@param ev The event.",
              "name": "onstalled",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onsubmit": {
              "defaultValue": null,
              "description": "",
              "name": "onsubmit",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onsuspend": {
              "defaultValue": null,
              "description": "Occurs if the load operation has been intentionally halted.\n@param ev The event.",
              "name": "onsuspend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ontimeupdate": {
              "defaultValue": null,
              "description": "Occurs to indicate the current playback position.\n@param ev The event.",
              "name": "ontimeupdate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ontoggle": {
              "defaultValue": null,
              "description": "",
              "name": "ontoggle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ontouchcancel": {
              "defaultValue": null,
              "description": "",
              "name": "ontouchcancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TouchEvent) => any"
              }
            },
            "ontouchend": {
              "defaultValue": null,
              "description": "",
              "name": "ontouchend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TouchEvent) => any"
              }
            },
            "ontouchmove": {
              "defaultValue": null,
              "description": "",
              "name": "ontouchmove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TouchEvent) => any"
              }
            },
            "ontouchstart": {
              "defaultValue": null,
              "description": "",
              "name": "ontouchstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TouchEvent) => any"
              }
            },
            "ontransitioncancel": {
              "defaultValue": null,
              "description": "",
              "name": "ontransitioncancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TransitionEvent) => any"
              }
            },
            "ontransitionend": {
              "defaultValue": null,
              "description": "",
              "name": "ontransitionend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TransitionEvent) => any"
              }
            },
            "ontransitionrun": {
              "defaultValue": null,
              "description": "",
              "name": "ontransitionrun",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TransitionEvent) => any"
              }
            },
            "ontransitionstart": {
              "defaultValue": null,
              "description": "",
              "name": "ontransitionstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TransitionEvent) => any"
              }
            },
            "onvolumechange": {
              "defaultValue": null,
              "description": "Occurs when the volume is changed, or playback is muted or unmuted.\n@param ev The event.",
              "name": "onvolumechange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onwaiting": {
              "defaultValue": null,
              "description": "Occurs when playback stops because the next frame of a video resource is not available.\n@param ev The event.",
              "name": "onwaiting",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onwheel": {
              "defaultValue": null,
              "description": "",
              "name": "onwheel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: WheelEvent) => any"
              }
            },
            "oncopy": {
              "defaultValue": null,
              "description": "",
              "name": "oncopy",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any"
              }
            },
            "oncut": {
              "defaultValue": null,
              "description": "",
              "name": "oncut",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any"
              }
            },
            "onpaste": {
              "defaultValue": null,
              "description": "",
              "name": "onpaste",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any"
              }
            },
            "contentEditable": {
              "defaultValue": null,
              "description": "",
              "name": "contentEditable",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "inputMode": {
              "defaultValue": null,
              "description": "",
              "name": "inputMode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "isContentEditable": {
              "defaultValue": null,
              "description": "",
              "name": "isContentEditable",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "dataset": {
              "defaultValue": null,
              "description": "",
              "name": "dataset",
              "declarations": [],
              "required": true,
              "type": {
                "name": "DOMStringMap"
              }
            },
            "nonce": {
              "defaultValue": null,
              "description": "",
              "name": "nonce",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "tabIndex": {
              "defaultValue": null,
              "description": "",
              "name": "tabIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "blur": {
              "defaultValue": null,
              "description": "",
              "name": "blur",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "focus": {
              "defaultValue": null,
              "description": "",
              "name": "focus",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: FocusOptions) => void"
              }
            },
            "style": {
              "defaultValue": null,
              "description": "",
              "name": "style",
              "declarations": [],
              "required": true,
              "type": {
                "name": "CSSStyleDeclaration"
              }
            }
          }
        },
        {
          "tags": {
            "param": "val any potential JavaScript object\noptions Custom settings"
          },
          "description": "Returns a presentation string of your `val` object",
          "displayName": "prettyFormat",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "logRoles",
          "methods": [],
          "props": {
            "accessKey": {
              "defaultValue": null,
              "description": "",
              "name": "accessKey",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "accessKeyLabel": {
              "defaultValue": null,
              "description": "",
              "name": "accessKeyLabel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "autocapitalize": {
              "defaultValue": null,
              "description": "",
              "name": "autocapitalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "dir": {
              "defaultValue": null,
              "description": "",
              "name": "dir",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "draggable": {
              "defaultValue": null,
              "description": "",
              "name": "draggable",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "hidden": {
              "defaultValue": null,
              "description": "",
              "name": "hidden",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "innerText": {
              "defaultValue": null,
              "description": "",
              "name": "innerText",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "lang": {
              "defaultValue": null,
              "description": "",
              "name": "lang",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "offsetHeight": {
              "defaultValue": null,
              "description": "",
              "name": "offsetHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "offsetLeft": {
              "defaultValue": null,
              "description": "",
              "name": "offsetLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "offsetParent": {
              "defaultValue": null,
              "description": "",
              "name": "offsetParent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "offsetTop": {
              "defaultValue": null,
              "description": "",
              "name": "offsetTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "offsetWidth": {
              "defaultValue": null,
              "description": "",
              "name": "offsetWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "spellcheck": {
              "defaultValue": null,
              "description": "",
              "name": "spellcheck",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "translate": {
              "defaultValue": null,
              "description": "",
              "name": "translate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "click": {
              "defaultValue": null,
              "description": "",
              "name": "click",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "addEventListener": {
              "defaultValue": null,
              "description": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.",
              "name": "addEventListener",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"error\" | \"fullscreenchange\" | \"fullscreenerror\" | \"abort\" | \"animationcancel\" | \"animationend\" | \"animationiteration\" | \"animationstart\" | \"auxclick\" | \"blur\" | \"cancel\" | ... 79 more ... | \"paste\">(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventL..."
              }
            },
            "removeEventListener": {
              "defaultValue": null,
              "description": "Removes the event listener in target's event listener list with the same type, callback, and options.\nRemoves the event listener in target's event listener list with the same type, callback, and options.\nRemoves the event listener in target's event listener list with the same type, callback, and options.\nRemoves the event listener in target's event listener list with the same type, callback, and options.",
              "name": "removeEventListener",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"error\" | \"fullscreenchange\" | \"fullscreenerror\" | \"abort\" | \"animationcancel\" | \"animationend\" | \"animationiteration\" | \"animationstart\" | \"auxclick\" | \"blur\" | \"cancel\" | ... 79 more ... | \"paste\">(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventList..."
              }
            },
            "assignedSlot": {
              "defaultValue": null,
              "description": "",
              "name": "assignedSlot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLSlotElement"
              }
            },
            "attributes": {
              "defaultValue": null,
              "description": "",
              "name": "attributes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "NamedNodeMap"
              }
            },
            "classList": {
              "defaultValue": null,
              "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
              "name": "classList",
              "declarations": [],
              "required": true,
              "type": {
                "name": "DOMTokenList"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
              "name": "className",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "clientHeight": {
              "defaultValue": null,
              "description": "",
              "name": "clientHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientLeft": {
              "defaultValue": null,
              "description": "",
              "name": "clientLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientTop": {
              "defaultValue": null,
              "description": "",
              "name": "clientTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientWidth": {
              "defaultValue": null,
              "description": "",
              "name": "clientWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "id": {
              "defaultValue": null,
              "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "localName": {
              "defaultValue": null,
              "description": "Returns the local name.",
              "name": "localName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "namespaceURI": {
              "defaultValue": null,
              "description": "Returns the namespace.",
              "name": "namespaceURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onfullscreenchange": {
              "defaultValue": null,
              "description": "",
              "name": "onfullscreenchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: Element, ev: Event) => any"
              }
            },
            "onfullscreenerror": {
              "defaultValue": null,
              "description": "",
              "name": "onfullscreenerror",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: Element, ev: Event) => any"
              }
            },
            "outerHTML": {
              "defaultValue": null,
              "description": "",
              "name": "outerHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "prefix": {
              "defaultValue": null,
              "description": "Returns the namespace prefix.",
              "name": "prefix",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "scrollHeight": {
              "defaultValue": null,
              "description": "",
              "name": "scrollHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollLeft": {
              "defaultValue": null,
              "description": "",
              "name": "scrollLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollTop": {
              "defaultValue": null,
              "description": "",
              "name": "scrollTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollWidth": {
              "defaultValue": null,
              "description": "",
              "name": "scrollWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "shadowRoot": {
              "defaultValue": null,
              "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
              "name": "shadowRoot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ShadowRoot"
              }
            },
            "slot": {
              "defaultValue": null,
              "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
              "name": "slot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "tagName": {
              "defaultValue": null,
              "description": "Returns the HTML-uppercased qualified name.",
              "name": "tagName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "attachShadow": {
              "defaultValue": null,
              "description": "Creates a shadow root for element and returns it.",
              "name": "attachShadow",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(init: ShadowRootInit) => ShadowRoot"
              }
            },
            "closest": {
              "defaultValue": null,
              "description": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.",
              "name": "closest",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selector: K): HTMLElementTagNameMap[K]; <K extends \"symbol\" | ... 55 more ... | \"view\">(selector: K..."
              }
            },
            "getAttribute": {
              "defaultValue": null,
              "description": "Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.",
              "name": "getAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => string"
              }
            },
            "getAttributeNS": {
              "defaultValue": null,
              "description": "Returns element's attribute whose namespace is namespace and local name is localName, and null if there is\nno such attribute otherwise.",
              "name": "getAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => string"
              }
            },
            "getAttributeNames": {
              "defaultValue": null,
              "description": "Returns the qualified names of all element's attributes.\nCan contain duplicates.",
              "name": "getAttributeNames",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string[]"
              }
            },
            "getAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "getAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => Attr"
              }
            },
            "getAttributeNodeNS": {
              "defaultValue": null,
              "description": "",
              "name": "getAttributeNodeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespaceURI: string, localName: string) => Attr"
              }
            },
            "getBoundingClientRect": {
              "defaultValue": null,
              "description": "",
              "name": "getBoundingClientRect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ClientRect | DOMRect"
              }
            },
            "getClientRects": {
              "defaultValue": null,
              "description": "",
              "name": "getClientRects",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ClientRectList | DOMRectList"
              }
            },
            "getElementsByClassName": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByClassName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(classNames: string) => HTMLCollectionOf<Element>"
              }
            },
            "getElementsByTagName": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByTagName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(qualifiedName: K): HTMLCollectionOf<...>; <K extends \"symbol\" | ... 55 more ... | \"view\">(qualified..."
              }
            },
            "getElementsByTagNameNS": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByTagNameNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>; (namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<SVGElement>; (namespaceURI: string, localName: string): HTMLCollectionOf<...>; }"
              }
            },
            "hasAttribute": {
              "defaultValue": null,
              "description": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.",
              "name": "hasAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => boolean"
              }
            },
            "hasAttributeNS": {
              "defaultValue": null,
              "description": "Returns true if element has an attribute whose namespace is namespace and local name is localName.",
              "name": "hasAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => boolean"
              }
            },
            "hasAttributes": {
              "defaultValue": null,
              "description": "Returns true if element has attributes, and false otherwise.",
              "name": "hasAttributes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => boolean"
              }
            },
            "hasPointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "hasPointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => boolean"
              }
            },
            "insertAdjacentElement": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentElement",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(position: InsertPosition, insertedElement: Element) => Element"
              }
            },
            "insertAdjacentHTML": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(where: InsertPosition, html: string) => void"
              }
            },
            "insertAdjacentText": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentText",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(where: InsertPosition, text: string) => void"
              }
            },
            "matches": {
              "defaultValue": null,
              "description": "Returns true if matching selectors against element's root yields element, and false otherwise.",
              "name": "matches",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(selectors: string) => boolean"
              }
            },
            "msGetRegionContent": {
              "defaultValue": null,
              "description": "",
              "name": "msGetRegionContent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => any"
              }
            },
            "releasePointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "releasePointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => void"
              }
            },
            "removeAttribute": {
              "defaultValue": null,
              "description": "Removes element's first attribute whose qualified name is qualifiedName.",
              "name": "removeAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => void"
              }
            },
            "removeAttributeNS": {
              "defaultValue": null,
              "description": "Removes element's attribute whose namespace is namespace and local name is localName.",
              "name": "removeAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => void"
              }
            },
            "removeAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "removeAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "requestFullscreen": {
              "defaultValue": null,
              "description": "Displays element fullscreen and resolves promise when done.\nWhen supplied, options's navigationUI member indicates whether showing\nnavigation UI while in fullscreen is preferred or not. If set to \"show\", navigation\nsimplicity is preferred over screen space, and if set to \"hide\", more screen space\nis preferred. User agents are always free to honor user preference over the application's. The\ndefault value \"auto\" indicates no application preference.",
              "name": "requestFullscreen",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: FullscreenOptions) => Promise<void>"
              }
            },
            "requestPointerLock": {
              "defaultValue": null,
              "description": "",
              "name": "requestPointerLock",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "scroll": {
              "defaultValue": null,
              "description": "",
              "name": "scroll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "scrollBy": {
              "defaultValue": null,
              "description": "",
              "name": "scrollBy",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "scrollIntoView": {
              "defaultValue": null,
              "description": "",
              "name": "scrollIntoView",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(arg?: boolean | ScrollIntoViewOptions) => void"
              }
            },
            "scrollTo": {
              "defaultValue": null,
              "description": "",
              "name": "scrollTo",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "setAttribute": {
              "defaultValue": null,
              "description": "Sets the value of element's first attribute whose qualified name is qualifiedName to value.",
              "name": "setAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string, value: string) => void"
              }
            },
            "setAttributeNS": {
              "defaultValue": null,
              "description": "Sets the value of element's attribute whose namespace is namespace and local name is localName to value.",
              "name": "setAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, qualifiedName: string, value: string) => void"
              }
            },
            "setAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "setAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "setAttributeNodeNS": {
              "defaultValue": null,
              "description": "",
              "name": "setAttributeNodeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "setPointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "setPointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => void"
              }
            },
            "toggleAttribute": {
              "defaultValue": null,
              "description": "If force is not given, \"toggles\" qualifiedName, removing it if it is\npresent and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.\nReturns true if qualifiedName is now present, and false otherwise.",
              "name": "toggleAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string, force?: boolean) => boolean"
              }
            },
            "webkitMatchesSelector": {
              "defaultValue": null,
              "description": "",
              "name": "webkitMatchesSelector",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(selectors: string) => boolean"
              }
            },
            "baseURI": {
              "defaultValue": null,
              "description": "Returns node's node document's document base URL.",
              "name": "baseURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "childNodes": {
              "defaultValue": null,
              "description": "Returns the children.",
              "name": "childNodes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "NodeListOf<ChildNode>"
              }
            },
            "firstChild": {
              "defaultValue": null,
              "description": "Returns the first child.",
              "name": "firstChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "isConnected": {
              "defaultValue": null,
              "description": "Returns true if node is connected and false otherwise.",
              "name": "isConnected",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "lastChild": {
              "defaultValue": null,
              "description": "Returns the last child.",
              "name": "lastChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "nextSibling": {
              "defaultValue": null,
              "description": "Returns the next sibling.",
              "name": "nextSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "nodeName": {
              "defaultValue": null,
              "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
              "name": "nodeName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "nodeType": {
              "defaultValue": null,
              "description": "",
              "name": "nodeType",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "nodeValue": {
              "defaultValue": null,
              "description": "",
              "name": "nodeValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "ownerDocument": {
              "defaultValue": null,
              "description": "Returns the node document.\nReturns null for documents.",
              "name": "ownerDocument",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Document"
              }
            },
            "parentElement": {
              "defaultValue": null,
              "description": "Returns the parent element.",
              "name": "parentElement",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLElement"
              }
            },
            "parentNode": {
              "defaultValue": null,
              "description": "Returns the parent.",
              "name": "parentNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Node & ParentNode"
              }
            },
            "previousSibling": {
              "defaultValue": null,
              "description": "Returns the previous sibling.",
              "name": "previousSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Node"
              }
            },
            "textContent": {
              "defaultValue": null,
              "description": "",
              "name": "textContent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "appendChild": {
              "defaultValue": null,
              "description": "",
              "name": "appendChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: T) => T"
              }
            },
            "cloneNode": {
              "defaultValue": null,
              "description": "Returns a copy of node. If deep is true, the copy also includes the node's descendants.",
              "name": "cloneNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(deep?: boolean) => Node"
              }
            },
            "compareDocumentPosition": {
              "defaultValue": null,
              "description": "",
              "name": "compareDocumentPosition",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(other: Node) => number"
              }
            },
            "contains": {
              "defaultValue": null,
              "description": "Returns true if other is an inclusive descendant of node, and false otherwise.",
              "name": "contains",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(other: Node) => boolean"
              }
            },
            "getRootNode": {
              "defaultValue": null,
              "description": "Returns node's shadow-including root.",
              "name": "getRootNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: GetRootNodeOptions) => Node"
              }
            },
            "hasChildNodes": {
              "defaultValue": null,
              "description": "Returns whether node has children.",
              "name": "hasChildNodes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => boolean"
              }
            },
            "insertBefore": {
              "defaultValue": null,
              "description": "",
              "name": "insertBefore",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: T, refChild: Node) => T"
              }
            },
            "isDefaultNamespace": {
              "defaultValue": null,
              "description": "",
              "name": "isDefaultNamespace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string) => boolean"
              }
            },
            "isEqualNode": {
              "defaultValue": null,
              "description": "Returns whether node and otherNode have the same properties.",
              "name": "isEqualNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(otherNode: Node) => boolean"
              }
            },
            "isSameNode": {
              "defaultValue": null,
              "description": "",
              "name": "isSameNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(otherNode: Node) => boolean"
              }
            },
            "lookupNamespaceURI": {
              "defaultValue": null,
              "description": "",
              "name": "lookupNamespaceURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(prefix: string) => string"
              }
            },
            "lookupPrefix": {
              "defaultValue": null,
              "description": "",
              "name": "lookupPrefix",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string) => string"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "removeChild": {
              "defaultValue": null,
              "description": "",
              "name": "removeChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(oldChild: T) => T"
              }
            },
            "replaceChild": {
              "defaultValue": null,
              "description": "",
              "name": "replaceChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: Node, oldChild: T) => T"
              }
            },
            "ATTRIBUTE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ATTRIBUTE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "CDATA_SECTION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "CDATA_SECTION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "COMMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "COMMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_FRAGMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_FRAGMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_CONTAINED_BY": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_CONTAINED_BY",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_CONTAINS": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_CONTAINS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_DISCONNECTED": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_DISCONNECTED",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_FOLLOWING": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_FOLLOWING",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_PRECEDING": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_PRECEDING",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_TYPE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_TYPE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ELEMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ELEMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ENTITY_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ENTITY_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ENTITY_REFERENCE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ENTITY_REFERENCE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "NOTATION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "NOTATION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "PROCESSING_INSTRUCTION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "PROCESSING_INSTRUCTION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "TEXT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "TEXT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "dispatchEvent": {
              "defaultValue": null,
              "description": "Dispatches a synthetic event event to target and returns true\nif either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.",
              "name": "dispatchEvent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(event: Event) => boolean"
              }
            },
            "childElementCount": {
              "defaultValue": null,
              "description": "",
              "name": "childElementCount",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "Returns the child elements.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLCollection"
              }
            },
            "firstElementChild": {
              "defaultValue": null,
              "description": "Returns the first child that is an element, and null otherwise.",
              "name": "firstElementChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "lastElementChild": {
              "defaultValue": null,
              "description": "Returns the last child that is an element, and null otherwise.",
              "name": "lastElementChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "append": {
              "defaultValue": null,
              "description": "Inserts nodes after the last child of node, while replacing\nstrings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "append",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "prepend": {
              "defaultValue": null,
              "description": "Inserts nodes before the first child of node, while\nreplacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "prepend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "querySelector": {
              "defaultValue": null,
              "description": "Returns the first element that is a descendant of node that\nmatches selectors.",
              "name": "querySelector",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selectors: K): HTMLElementTagNameMap[K]; <K extends \"symbol\" | ... 55 more ... | \"view\">(selectors:..."
              }
            },
            "querySelectorAll": {
              "defaultValue": null,
              "description": "Returns all element descendants of node that\nmatch selectors.",
              "name": "querySelectorAll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selectors: K): NodeListOf<...>; <K extends \"symbol\" | ... 55 more ... | \"view\">(selectors: K): Node..."
              }
            },
            "nextElementSibling": {
              "defaultValue": null,
              "description": "Returns the first following sibling that\nis an element, and null otherwise.",
              "name": "nextElementSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "previousElementSibling": {
              "defaultValue": null,
              "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
              "name": "previousElementSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "after": {
              "defaultValue": null,
              "description": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "after",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "before": {
              "defaultValue": null,
              "description": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "before",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "remove": {
              "defaultValue": null,
              "description": "Removes node.",
              "name": "remove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "replaceWith": {
              "defaultValue": null,
              "description": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "replaceWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "innerHTML": {
              "defaultValue": null,
              "description": "",
              "name": "innerHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "animate": {
              "defaultValue": null,
              "description": "",
              "name": "animate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation"
              }
            },
            "getAnimations": {
              "defaultValue": null,
              "description": "",
              "name": "getAnimations",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Animation[]"
              }
            },
            "onabort": {
              "defaultValue": null,
              "description": "Fires when the user aborts the download.\n@param ev The event.",
              "name": "onabort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: UIEvent) => any"
              }
            },
            "onanimationcancel": {
              "defaultValue": null,
              "description": "",
              "name": "onanimationcancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: AnimationEvent) => any"
              }
            },
            "onanimationend": {
              "defaultValue": null,
              "description": "",
              "name": "onanimationend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: AnimationEvent) => any"
              }
            },
            "onanimationiteration": {
              "defaultValue": null,
              "description": "",
              "name": "onanimationiteration",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: AnimationEvent) => any"
              }
            },
            "onanimationstart": {
              "defaultValue": null,
              "description": "",
              "name": "onanimationstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: AnimationEvent) => any"
              }
            },
            "onauxclick": {
              "defaultValue": null,
              "description": "",
              "name": "onauxclick",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onblur": {
              "defaultValue": null,
              "description": "Fires when the object loses the input focus.\n@param ev The focus event.",
              "name": "onblur",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: FocusEvent) => any"
              }
            },
            "oncancel": {
              "defaultValue": null,
              "description": "",
              "name": "oncancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "oncanplay": {
              "defaultValue": null,
              "description": "Occurs when playback is possible, but would require further buffering.\n@param ev The event.",
              "name": "oncanplay",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "oncanplaythrough": {
              "defaultValue": null,
              "description": "",
              "name": "oncanplaythrough",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onchange": {
              "defaultValue": null,
              "description": "Fires when the contents of the object or selection have changed.\n@param ev The event.",
              "name": "onchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onclick": {
              "defaultValue": null,
              "description": "Fires when the user clicks the left mouse button on the object\n@param ev The mouse event.",
              "name": "onclick",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onclose": {
              "defaultValue": null,
              "description": "",
              "name": "onclose",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "oncontextmenu": {
              "defaultValue": null,
              "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.\n@param ev The mouse event.",
              "name": "oncontextmenu",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "oncuechange": {
              "defaultValue": null,
              "description": "",
              "name": "oncuechange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ondblclick": {
              "defaultValue": null,
              "description": "Fires when the user double-clicks the object.\n@param ev The mouse event.",
              "name": "ondblclick",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "ondrag": {
              "defaultValue": null,
              "description": "Fires on the source object continuously during a drag operation.\n@param ev The event.",
              "name": "ondrag",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragend": {
              "defaultValue": null,
              "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.\n@param ev The event.",
              "name": "ondragend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragenter": {
              "defaultValue": null,
              "description": "Fires on the target element when the user drags the object to a valid drop target.\n@param ev The drag event.",
              "name": "ondragenter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragexit": {
              "defaultValue": null,
              "description": "",
              "name": "ondragexit",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ondragleave": {
              "defaultValue": null,
              "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\n@param ev The drag event.",
              "name": "ondragleave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragover": {
              "defaultValue": null,
              "description": "Fires on the target element continuously while the user drags the object over a valid drop target.\n@param ev The event.",
              "name": "ondragover",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragstart": {
              "defaultValue": null,
              "description": "Fires on the source object when the user starts to drag a text selection or selected object.\n@param ev The event.",
              "name": "ondragstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondrop": {
              "defaultValue": null,
              "description": "",
              "name": "ondrop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondurationchange": {
              "defaultValue": null,
              "description": "Occurs when the duration attribute is updated.\n@param ev The event.",
              "name": "ondurationchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onemptied": {
              "defaultValue": null,
              "description": "Occurs when the media element is reset to its initial state.\n@param ev The event.",
              "name": "onemptied",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onended": {
              "defaultValue": null,
              "description": "Occurs when the end of playback is reached.\n@param ev The event",
              "name": "onended",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onerror": {
              "defaultValue": null,
              "description": "Fires when an error occurs during object loading.\n@param ev The event.",
              "name": "onerror",
              "declarations": [],
              "required": true,
              "type": {
                "name": "OnErrorEventHandlerNonNull"
              }
            },
            "onfocus": {
              "defaultValue": null,
              "description": "Fires when the object receives focus.\n@param ev The event.",
              "name": "onfocus",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: FocusEvent) => any"
              }
            },
            "ongotpointercapture": {
              "defaultValue": null,
              "description": "",
              "name": "ongotpointercapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "oninput": {
              "defaultValue": null,
              "description": "",
              "name": "oninput",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "oninvalid": {
              "defaultValue": null,
              "description": "",
              "name": "oninvalid",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onkeydown": {
              "defaultValue": null,
              "description": "Fires when the user presses a key.\n@param ev The keyboard event",
              "name": "onkeydown",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any"
              }
            },
            "onkeypress": {
              "defaultValue": null,
              "description": "Fires when the user presses an alphanumeric key.\n@param ev The event.",
              "name": "onkeypress",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any"
              }
            },
            "onkeyup": {
              "defaultValue": null,
              "description": "Fires when the user releases a key.\n@param ev The keyboard event",
              "name": "onkeyup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any"
              }
            },
            "onload": {
              "defaultValue": null,
              "description": "Fires immediately after the browser loads the object.\n@param ev The event.",
              "name": "onload",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onloadeddata": {
              "defaultValue": null,
              "description": "Occurs when media data is loaded at the current playback position.\n@param ev The event.",
              "name": "onloadeddata",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onloadedmetadata": {
              "defaultValue": null,
              "description": "Occurs when the duration and dimensions of the media have been determined.\n@param ev The event.",
              "name": "onloadedmetadata",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onloadend": {
              "defaultValue": null,
              "description": "",
              "name": "onloadend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: ProgressEvent) => any"
              }
            },
            "onloadstart": {
              "defaultValue": null,
              "description": "Occurs when Internet Explorer begins looking for media data.\n@param ev The event.",
              "name": "onloadstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onlostpointercapture": {
              "defaultValue": null,
              "description": "",
              "name": "onlostpointercapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onmousedown": {
              "defaultValue": null,
              "description": "Fires when the user clicks the object with either mouse button.\n@param ev The mouse event.",
              "name": "onmousedown",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseenter": {
              "defaultValue": null,
              "description": "",
              "name": "onmouseenter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseleave": {
              "defaultValue": null,
              "description": "",
              "name": "onmouseleave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmousemove": {
              "defaultValue": null,
              "description": "Fires when the user moves the mouse over the object.\n@param ev The mouse event.",
              "name": "onmousemove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseout": {
              "defaultValue": null,
              "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.\n@param ev The mouse event.",
              "name": "onmouseout",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseover": {
              "defaultValue": null,
              "description": "Fires when the user moves the mouse pointer into the object.\n@param ev The mouse event.",
              "name": "onmouseover",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseup": {
              "defaultValue": null,
              "description": "Fires when the user releases a mouse button while the mouse is over the object.\n@param ev The mouse event.",
              "name": "onmouseup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onpause": {
              "defaultValue": null,
              "description": "Occurs when playback is paused.\n@param ev The event.",
              "name": "onpause",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onplay": {
              "defaultValue": null,
              "description": "Occurs when the play method is requested.\n@param ev The event.",
              "name": "onplay",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onplaying": {
              "defaultValue": null,
              "description": "Occurs when the audio or video has started playing.\n@param ev The event.",
              "name": "onplaying",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onpointercancel": {
              "defaultValue": null,
              "description": "",
              "name": "onpointercancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerdown": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerdown",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerenter": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerenter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerleave": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerleave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointermove": {
              "defaultValue": null,
              "description": "",
              "name": "onpointermove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerout": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerout",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerover": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerover",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerup": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onprogress": {
              "defaultValue": null,
              "description": "Occurs to indicate progress while downloading media data.\n@param ev The event.",
              "name": "onprogress",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: ProgressEvent) => any"
              }
            },
            "onratechange": {
              "defaultValue": null,
              "description": "Occurs when the playback rate is increased or decreased.\n@param ev The event.",
              "name": "onratechange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onreset": {
              "defaultValue": null,
              "description": "Fires when the user resets a form.\n@param ev The event.",
              "name": "onreset",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onresize": {
              "defaultValue": null,
              "description": "",
              "name": "onresize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: UIEvent) => any"
              }
            },
            "onscroll": {
              "defaultValue": null,
              "description": "Fires when the user repositions the scroll box in the scroll bar on the object.\n@param ev The event.",
              "name": "onscroll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onsecuritypolicyviolation": {
              "defaultValue": null,
              "description": "",
              "name": "onsecuritypolicyviolation",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any"
              }
            },
            "onseeked": {
              "defaultValue": null,
              "description": "Occurs when the seek operation ends.\n@param ev The event.",
              "name": "onseeked",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onseeking": {
              "defaultValue": null,
              "description": "Occurs when the current playback position is moved.\n@param ev The event.",
              "name": "onseeking",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onselect": {
              "defaultValue": null,
              "description": "Fires when the current selection changes.\n@param ev The event.",
              "name": "onselect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onselectionchange": {
              "defaultValue": null,
              "description": "",
              "name": "onselectionchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onselectstart": {
              "defaultValue": null,
              "description": "",
              "name": "onselectstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onstalled": {
              "defaultValue": null,
              "description": "Occurs when the download has stopped.\n@param ev The event.",
              "name": "onstalled",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onsubmit": {
              "defaultValue": null,
              "description": "",
              "name": "onsubmit",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onsuspend": {
              "defaultValue": null,
              "description": "Occurs if the load operation has been intentionally halted.\n@param ev The event.",
              "name": "onsuspend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ontimeupdate": {
              "defaultValue": null,
              "description": "Occurs to indicate the current playback position.\n@param ev The event.",
              "name": "ontimeupdate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ontoggle": {
              "defaultValue": null,
              "description": "",
              "name": "ontoggle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ontouchcancel": {
              "defaultValue": null,
              "description": "",
              "name": "ontouchcancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TouchEvent) => any"
              }
            },
            "ontouchend": {
              "defaultValue": null,
              "description": "",
              "name": "ontouchend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TouchEvent) => any"
              }
            },
            "ontouchmove": {
              "defaultValue": null,
              "description": "",
              "name": "ontouchmove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TouchEvent) => any"
              }
            },
            "ontouchstart": {
              "defaultValue": null,
              "description": "",
              "name": "ontouchstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TouchEvent) => any"
              }
            },
            "ontransitioncancel": {
              "defaultValue": null,
              "description": "",
              "name": "ontransitioncancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TransitionEvent) => any"
              }
            },
            "ontransitionend": {
              "defaultValue": null,
              "description": "",
              "name": "ontransitionend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TransitionEvent) => any"
              }
            },
            "ontransitionrun": {
              "defaultValue": null,
              "description": "",
              "name": "ontransitionrun",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TransitionEvent) => any"
              }
            },
            "ontransitionstart": {
              "defaultValue": null,
              "description": "",
              "name": "ontransitionstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TransitionEvent) => any"
              }
            },
            "onvolumechange": {
              "defaultValue": null,
              "description": "Occurs when the volume is changed, or playback is muted or unmuted.\n@param ev The event.",
              "name": "onvolumechange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onwaiting": {
              "defaultValue": null,
              "description": "Occurs when playback stops because the next frame of a video resource is not available.\n@param ev The event.",
              "name": "onwaiting",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onwheel": {
              "defaultValue": null,
              "description": "",
              "name": "onwheel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: WheelEvent) => any"
              }
            },
            "oncopy": {
              "defaultValue": null,
              "description": "",
              "name": "oncopy",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any"
              }
            },
            "oncut": {
              "defaultValue": null,
              "description": "",
              "name": "oncut",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any"
              }
            },
            "onpaste": {
              "defaultValue": null,
              "description": "",
              "name": "onpaste",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any"
              }
            },
            "contentEditable": {
              "defaultValue": null,
              "description": "",
              "name": "contentEditable",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "inputMode": {
              "defaultValue": null,
              "description": "",
              "name": "inputMode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "isContentEditable": {
              "defaultValue": null,
              "description": "",
              "name": "isContentEditable",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "dataset": {
              "defaultValue": null,
              "description": "",
              "name": "dataset",
              "declarations": [],
              "required": true,
              "type": {
                "name": "DOMStringMap"
              }
            },
            "nonce": {
              "defaultValue": null,
              "description": "",
              "name": "nonce",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "tabIndex": {
              "defaultValue": null,
              "description": "",
              "name": "tabIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "blur": {
              "defaultValue": null,
              "description": "",
              "name": "blur",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "focus": {
              "defaultValue": null,
              "description": "",
              "name": "focus",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: FocusOptions) => void"
              }
            },
            "style": {
              "defaultValue": null,
              "description": "",
              "name": "style",
              "declarations": [],
              "required": true,
              "type": {
                "name": "CSSStyleDeclaration"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getRoles",
          "methods": [],
          "props": {
            "accessKey": {
              "defaultValue": null,
              "description": "",
              "name": "accessKey",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "accessKeyLabel": {
              "defaultValue": null,
              "description": "",
              "name": "accessKeyLabel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "autocapitalize": {
              "defaultValue": null,
              "description": "",
              "name": "autocapitalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "dir": {
              "defaultValue": null,
              "description": "",
              "name": "dir",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "draggable": {
              "defaultValue": null,
              "description": "",
              "name": "draggable",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "hidden": {
              "defaultValue": null,
              "description": "",
              "name": "hidden",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "innerText": {
              "defaultValue": null,
              "description": "",
              "name": "innerText",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "lang": {
              "defaultValue": null,
              "description": "",
              "name": "lang",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "offsetHeight": {
              "defaultValue": null,
              "description": "",
              "name": "offsetHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "offsetLeft": {
              "defaultValue": null,
              "description": "",
              "name": "offsetLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "offsetParent": {
              "defaultValue": null,
              "description": "",
              "name": "offsetParent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "offsetTop": {
              "defaultValue": null,
              "description": "",
              "name": "offsetTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "offsetWidth": {
              "defaultValue": null,
              "description": "",
              "name": "offsetWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "spellcheck": {
              "defaultValue": null,
              "description": "",
              "name": "spellcheck",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "translate": {
              "defaultValue": null,
              "description": "",
              "name": "translate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "click": {
              "defaultValue": null,
              "description": "",
              "name": "click",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "addEventListener": {
              "defaultValue": null,
              "description": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.",
              "name": "addEventListener",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"error\" | \"fullscreenchange\" | \"fullscreenerror\" | \"abort\" | \"animationcancel\" | \"animationend\" | \"animationiteration\" | \"animationstart\" | \"auxclick\" | \"blur\" | \"cancel\" | ... 79 more ... | \"paste\">(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventL..."
              }
            },
            "removeEventListener": {
              "defaultValue": null,
              "description": "Removes the event listener in target's event listener list with the same type, callback, and options.\nRemoves the event listener in target's event listener list with the same type, callback, and options.\nRemoves the event listener in target's event listener list with the same type, callback, and options.\nRemoves the event listener in target's event listener list with the same type, callback, and options.",
              "name": "removeEventListener",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"error\" | \"fullscreenchange\" | \"fullscreenerror\" | \"abort\" | \"animationcancel\" | \"animationend\" | \"animationiteration\" | \"animationstart\" | \"auxclick\" | \"blur\" | \"cancel\" | ... 79 more ... | \"paste\">(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventList..."
              }
            },
            "assignedSlot": {
              "defaultValue": null,
              "description": "",
              "name": "assignedSlot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLSlotElement"
              }
            },
            "attributes": {
              "defaultValue": null,
              "description": "",
              "name": "attributes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "NamedNodeMap"
              }
            },
            "classList": {
              "defaultValue": null,
              "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
              "name": "classList",
              "declarations": [],
              "required": true,
              "type": {
                "name": "DOMTokenList"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
              "name": "className",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "clientHeight": {
              "defaultValue": null,
              "description": "",
              "name": "clientHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientLeft": {
              "defaultValue": null,
              "description": "",
              "name": "clientLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientTop": {
              "defaultValue": null,
              "description": "",
              "name": "clientTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientWidth": {
              "defaultValue": null,
              "description": "",
              "name": "clientWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "id": {
              "defaultValue": null,
              "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "localName": {
              "defaultValue": null,
              "description": "Returns the local name.",
              "name": "localName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "namespaceURI": {
              "defaultValue": null,
              "description": "Returns the namespace.",
              "name": "namespaceURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onfullscreenchange": {
              "defaultValue": null,
              "description": "",
              "name": "onfullscreenchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: Element, ev: Event) => any"
              }
            },
            "onfullscreenerror": {
              "defaultValue": null,
              "description": "",
              "name": "onfullscreenerror",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: Element, ev: Event) => any"
              }
            },
            "outerHTML": {
              "defaultValue": null,
              "description": "",
              "name": "outerHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "prefix": {
              "defaultValue": null,
              "description": "Returns the namespace prefix.",
              "name": "prefix",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "scrollHeight": {
              "defaultValue": null,
              "description": "",
              "name": "scrollHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollLeft": {
              "defaultValue": null,
              "description": "",
              "name": "scrollLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollTop": {
              "defaultValue": null,
              "description": "",
              "name": "scrollTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollWidth": {
              "defaultValue": null,
              "description": "",
              "name": "scrollWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "shadowRoot": {
              "defaultValue": null,
              "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
              "name": "shadowRoot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ShadowRoot"
              }
            },
            "slot": {
              "defaultValue": null,
              "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
              "name": "slot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "tagName": {
              "defaultValue": null,
              "description": "Returns the HTML-uppercased qualified name.",
              "name": "tagName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "attachShadow": {
              "defaultValue": null,
              "description": "Creates a shadow root for element and returns it.",
              "name": "attachShadow",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(init: ShadowRootInit) => ShadowRoot"
              }
            },
            "closest": {
              "defaultValue": null,
              "description": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.",
              "name": "closest",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selector: K): HTMLElementTagNameMap[K]; <K extends \"symbol\" | ... 55 more ... | \"view\">(selector: K..."
              }
            },
            "getAttribute": {
              "defaultValue": null,
              "description": "Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.",
              "name": "getAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => string"
              }
            },
            "getAttributeNS": {
              "defaultValue": null,
              "description": "Returns element's attribute whose namespace is namespace and local name is localName, and null if there is\nno such attribute otherwise.",
              "name": "getAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => string"
              }
            },
            "getAttributeNames": {
              "defaultValue": null,
              "description": "Returns the qualified names of all element's attributes.\nCan contain duplicates.",
              "name": "getAttributeNames",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string[]"
              }
            },
            "getAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "getAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => Attr"
              }
            },
            "getAttributeNodeNS": {
              "defaultValue": null,
              "description": "",
              "name": "getAttributeNodeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespaceURI: string, localName: string) => Attr"
              }
            },
            "getBoundingClientRect": {
              "defaultValue": null,
              "description": "",
              "name": "getBoundingClientRect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ClientRect | DOMRect"
              }
            },
            "getClientRects": {
              "defaultValue": null,
              "description": "",
              "name": "getClientRects",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ClientRectList | DOMRectList"
              }
            },
            "getElementsByClassName": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByClassName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(classNames: string) => HTMLCollectionOf<Element>"
              }
            },
            "getElementsByTagName": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByTagName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(qualifiedName: K): HTMLCollectionOf<...>; <K extends \"symbol\" | ... 55 more ... | \"view\">(qualified..."
              }
            },
            "getElementsByTagNameNS": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByTagNameNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>; (namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<SVGElement>; (namespaceURI: string, localName: string): HTMLCollectionOf<...>; }"
              }
            },
            "hasAttribute": {
              "defaultValue": null,
              "description": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.",
              "name": "hasAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => boolean"
              }
            },
            "hasAttributeNS": {
              "defaultValue": null,
              "description": "Returns true if element has an attribute whose namespace is namespace and local name is localName.",
              "name": "hasAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => boolean"
              }
            },
            "hasAttributes": {
              "defaultValue": null,
              "description": "Returns true if element has attributes, and false otherwise.",
              "name": "hasAttributes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => boolean"
              }
            },
            "hasPointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "hasPointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => boolean"
              }
            },
            "insertAdjacentElement": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentElement",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(position: InsertPosition, insertedElement: Element) => Element"
              }
            },
            "insertAdjacentHTML": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(where: InsertPosition, html: string) => void"
              }
            },
            "insertAdjacentText": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentText",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(where: InsertPosition, text: string) => void"
              }
            },
            "matches": {
              "defaultValue": null,
              "description": "Returns true if matching selectors against element's root yields element, and false otherwise.",
              "name": "matches",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(selectors: string) => boolean"
              }
            },
            "msGetRegionContent": {
              "defaultValue": null,
              "description": "",
              "name": "msGetRegionContent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => any"
              }
            },
            "releasePointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "releasePointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => void"
              }
            },
            "removeAttribute": {
              "defaultValue": null,
              "description": "Removes element's first attribute whose qualified name is qualifiedName.",
              "name": "removeAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => void"
              }
            },
            "removeAttributeNS": {
              "defaultValue": null,
              "description": "Removes element's attribute whose namespace is namespace and local name is localName.",
              "name": "removeAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => void"
              }
            },
            "removeAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "removeAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "requestFullscreen": {
              "defaultValue": null,
              "description": "Displays element fullscreen and resolves promise when done.\nWhen supplied, options's navigationUI member indicates whether showing\nnavigation UI while in fullscreen is preferred or not. If set to \"show\", navigation\nsimplicity is preferred over screen space, and if set to \"hide\", more screen space\nis preferred. User agents are always free to honor user preference over the application's. The\ndefault value \"auto\" indicates no application preference.",
              "name": "requestFullscreen",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: FullscreenOptions) => Promise<void>"
              }
            },
            "requestPointerLock": {
              "defaultValue": null,
              "description": "",
              "name": "requestPointerLock",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "scroll": {
              "defaultValue": null,
              "description": "",
              "name": "scroll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "scrollBy": {
              "defaultValue": null,
              "description": "",
              "name": "scrollBy",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "scrollIntoView": {
              "defaultValue": null,
              "description": "",
              "name": "scrollIntoView",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(arg?: boolean | ScrollIntoViewOptions) => void"
              }
            },
            "scrollTo": {
              "defaultValue": null,
              "description": "",
              "name": "scrollTo",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "setAttribute": {
              "defaultValue": null,
              "description": "Sets the value of element's first attribute whose qualified name is qualifiedName to value.",
              "name": "setAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string, value: string) => void"
              }
            },
            "setAttributeNS": {
              "defaultValue": null,
              "description": "Sets the value of element's attribute whose namespace is namespace and local name is localName to value.",
              "name": "setAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, qualifiedName: string, value: string) => void"
              }
            },
            "setAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "setAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "setAttributeNodeNS": {
              "defaultValue": null,
              "description": "",
              "name": "setAttributeNodeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "setPointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "setPointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => void"
              }
            },
            "toggleAttribute": {
              "defaultValue": null,
              "description": "If force is not given, \"toggles\" qualifiedName, removing it if it is\npresent and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.\nReturns true if qualifiedName is now present, and false otherwise.",
              "name": "toggleAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string, force?: boolean) => boolean"
              }
            },
            "webkitMatchesSelector": {
              "defaultValue": null,
              "description": "",
              "name": "webkitMatchesSelector",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(selectors: string) => boolean"
              }
            },
            "baseURI": {
              "defaultValue": null,
              "description": "Returns node's node document's document base URL.",
              "name": "baseURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "childNodes": {
              "defaultValue": null,
              "description": "Returns the children.",
              "name": "childNodes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "NodeListOf<ChildNode>"
              }
            },
            "firstChild": {
              "defaultValue": null,
              "description": "Returns the first child.",
              "name": "firstChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "isConnected": {
              "defaultValue": null,
              "description": "Returns true if node is connected and false otherwise.",
              "name": "isConnected",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "lastChild": {
              "defaultValue": null,
              "description": "Returns the last child.",
              "name": "lastChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "nextSibling": {
              "defaultValue": null,
              "description": "Returns the next sibling.",
              "name": "nextSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "nodeName": {
              "defaultValue": null,
              "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
              "name": "nodeName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "nodeType": {
              "defaultValue": null,
              "description": "",
              "name": "nodeType",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "nodeValue": {
              "defaultValue": null,
              "description": "",
              "name": "nodeValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "ownerDocument": {
              "defaultValue": null,
              "description": "Returns the node document.\nReturns null for documents.",
              "name": "ownerDocument",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Document"
              }
            },
            "parentElement": {
              "defaultValue": null,
              "description": "Returns the parent element.",
              "name": "parentElement",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLElement"
              }
            },
            "parentNode": {
              "defaultValue": null,
              "description": "Returns the parent.",
              "name": "parentNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Node & ParentNode"
              }
            },
            "previousSibling": {
              "defaultValue": null,
              "description": "Returns the previous sibling.",
              "name": "previousSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Node"
              }
            },
            "textContent": {
              "defaultValue": null,
              "description": "",
              "name": "textContent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "appendChild": {
              "defaultValue": null,
              "description": "",
              "name": "appendChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: T) => T"
              }
            },
            "cloneNode": {
              "defaultValue": null,
              "description": "Returns a copy of node. If deep is true, the copy also includes the node's descendants.",
              "name": "cloneNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(deep?: boolean) => Node"
              }
            },
            "compareDocumentPosition": {
              "defaultValue": null,
              "description": "",
              "name": "compareDocumentPosition",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(other: Node) => number"
              }
            },
            "contains": {
              "defaultValue": null,
              "description": "Returns true if other is an inclusive descendant of node, and false otherwise.",
              "name": "contains",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(other: Node) => boolean"
              }
            },
            "getRootNode": {
              "defaultValue": null,
              "description": "Returns node's shadow-including root.",
              "name": "getRootNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: GetRootNodeOptions) => Node"
              }
            },
            "hasChildNodes": {
              "defaultValue": null,
              "description": "Returns whether node has children.",
              "name": "hasChildNodes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => boolean"
              }
            },
            "insertBefore": {
              "defaultValue": null,
              "description": "",
              "name": "insertBefore",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: T, refChild: Node) => T"
              }
            },
            "isDefaultNamespace": {
              "defaultValue": null,
              "description": "",
              "name": "isDefaultNamespace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string) => boolean"
              }
            },
            "isEqualNode": {
              "defaultValue": null,
              "description": "Returns whether node and otherNode have the same properties.",
              "name": "isEqualNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(otherNode: Node) => boolean"
              }
            },
            "isSameNode": {
              "defaultValue": null,
              "description": "",
              "name": "isSameNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(otherNode: Node) => boolean"
              }
            },
            "lookupNamespaceURI": {
              "defaultValue": null,
              "description": "",
              "name": "lookupNamespaceURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(prefix: string) => string"
              }
            },
            "lookupPrefix": {
              "defaultValue": null,
              "description": "",
              "name": "lookupPrefix",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string) => string"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "removeChild": {
              "defaultValue": null,
              "description": "",
              "name": "removeChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(oldChild: T) => T"
              }
            },
            "replaceChild": {
              "defaultValue": null,
              "description": "",
              "name": "replaceChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: Node, oldChild: T) => T"
              }
            },
            "ATTRIBUTE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ATTRIBUTE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "CDATA_SECTION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "CDATA_SECTION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "COMMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "COMMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_FRAGMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_FRAGMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_CONTAINED_BY": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_CONTAINED_BY",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_CONTAINS": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_CONTAINS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_DISCONNECTED": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_DISCONNECTED",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_FOLLOWING": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_FOLLOWING",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_PRECEDING": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_PRECEDING",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_TYPE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_TYPE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ELEMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ELEMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ENTITY_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ENTITY_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ENTITY_REFERENCE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ENTITY_REFERENCE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "NOTATION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "NOTATION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "PROCESSING_INSTRUCTION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "PROCESSING_INSTRUCTION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "TEXT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "TEXT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "dispatchEvent": {
              "defaultValue": null,
              "description": "Dispatches a synthetic event event to target and returns true\nif either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.",
              "name": "dispatchEvent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(event: Event) => boolean"
              }
            },
            "childElementCount": {
              "defaultValue": null,
              "description": "",
              "name": "childElementCount",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "Returns the child elements.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLCollection"
              }
            },
            "firstElementChild": {
              "defaultValue": null,
              "description": "Returns the first child that is an element, and null otherwise.",
              "name": "firstElementChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "lastElementChild": {
              "defaultValue": null,
              "description": "Returns the last child that is an element, and null otherwise.",
              "name": "lastElementChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "append": {
              "defaultValue": null,
              "description": "Inserts nodes after the last child of node, while replacing\nstrings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "append",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "prepend": {
              "defaultValue": null,
              "description": "Inserts nodes before the first child of node, while\nreplacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "prepend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "querySelector": {
              "defaultValue": null,
              "description": "Returns the first element that is a descendant of node that\nmatches selectors.",
              "name": "querySelector",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selectors: K): HTMLElementTagNameMap[K]; <K extends \"symbol\" | ... 55 more ... | \"view\">(selectors:..."
              }
            },
            "querySelectorAll": {
              "defaultValue": null,
              "description": "Returns all element descendants of node that\nmatch selectors.",
              "name": "querySelectorAll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selectors: K): NodeListOf<...>; <K extends \"symbol\" | ... 55 more ... | \"view\">(selectors: K): Node..."
              }
            },
            "nextElementSibling": {
              "defaultValue": null,
              "description": "Returns the first following sibling that\nis an element, and null otherwise.",
              "name": "nextElementSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "previousElementSibling": {
              "defaultValue": null,
              "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
              "name": "previousElementSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "after": {
              "defaultValue": null,
              "description": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "after",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "before": {
              "defaultValue": null,
              "description": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "before",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "remove": {
              "defaultValue": null,
              "description": "Removes node.",
              "name": "remove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "replaceWith": {
              "defaultValue": null,
              "description": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "replaceWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "innerHTML": {
              "defaultValue": null,
              "description": "",
              "name": "innerHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "animate": {
              "defaultValue": null,
              "description": "",
              "name": "animate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation"
              }
            },
            "getAnimations": {
              "defaultValue": null,
              "description": "",
              "name": "getAnimations",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Animation[]"
              }
            },
            "onabort": {
              "defaultValue": null,
              "description": "Fires when the user aborts the download.\n@param ev The event.",
              "name": "onabort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: UIEvent) => any"
              }
            },
            "onanimationcancel": {
              "defaultValue": null,
              "description": "",
              "name": "onanimationcancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: AnimationEvent) => any"
              }
            },
            "onanimationend": {
              "defaultValue": null,
              "description": "",
              "name": "onanimationend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: AnimationEvent) => any"
              }
            },
            "onanimationiteration": {
              "defaultValue": null,
              "description": "",
              "name": "onanimationiteration",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: AnimationEvent) => any"
              }
            },
            "onanimationstart": {
              "defaultValue": null,
              "description": "",
              "name": "onanimationstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: AnimationEvent) => any"
              }
            },
            "onauxclick": {
              "defaultValue": null,
              "description": "",
              "name": "onauxclick",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onblur": {
              "defaultValue": null,
              "description": "Fires when the object loses the input focus.\n@param ev The focus event.",
              "name": "onblur",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: FocusEvent) => any"
              }
            },
            "oncancel": {
              "defaultValue": null,
              "description": "",
              "name": "oncancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "oncanplay": {
              "defaultValue": null,
              "description": "Occurs when playback is possible, but would require further buffering.\n@param ev The event.",
              "name": "oncanplay",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "oncanplaythrough": {
              "defaultValue": null,
              "description": "",
              "name": "oncanplaythrough",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onchange": {
              "defaultValue": null,
              "description": "Fires when the contents of the object or selection have changed.\n@param ev The event.",
              "name": "onchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onclick": {
              "defaultValue": null,
              "description": "Fires when the user clicks the left mouse button on the object\n@param ev The mouse event.",
              "name": "onclick",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onclose": {
              "defaultValue": null,
              "description": "",
              "name": "onclose",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "oncontextmenu": {
              "defaultValue": null,
              "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.\n@param ev The mouse event.",
              "name": "oncontextmenu",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "oncuechange": {
              "defaultValue": null,
              "description": "",
              "name": "oncuechange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ondblclick": {
              "defaultValue": null,
              "description": "Fires when the user double-clicks the object.\n@param ev The mouse event.",
              "name": "ondblclick",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "ondrag": {
              "defaultValue": null,
              "description": "Fires on the source object continuously during a drag operation.\n@param ev The event.",
              "name": "ondrag",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragend": {
              "defaultValue": null,
              "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.\n@param ev The event.",
              "name": "ondragend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragenter": {
              "defaultValue": null,
              "description": "Fires on the target element when the user drags the object to a valid drop target.\n@param ev The drag event.",
              "name": "ondragenter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragexit": {
              "defaultValue": null,
              "description": "",
              "name": "ondragexit",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ondragleave": {
              "defaultValue": null,
              "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\n@param ev The drag event.",
              "name": "ondragleave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragover": {
              "defaultValue": null,
              "description": "Fires on the target element continuously while the user drags the object over a valid drop target.\n@param ev The event.",
              "name": "ondragover",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondragstart": {
              "defaultValue": null,
              "description": "Fires on the source object when the user starts to drag a text selection or selected object.\n@param ev The event.",
              "name": "ondragstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondrop": {
              "defaultValue": null,
              "description": "",
              "name": "ondrop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: DragEvent) => any"
              }
            },
            "ondurationchange": {
              "defaultValue": null,
              "description": "Occurs when the duration attribute is updated.\n@param ev The event.",
              "name": "ondurationchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onemptied": {
              "defaultValue": null,
              "description": "Occurs when the media element is reset to its initial state.\n@param ev The event.",
              "name": "onemptied",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onended": {
              "defaultValue": null,
              "description": "Occurs when the end of playback is reached.\n@param ev The event",
              "name": "onended",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onerror": {
              "defaultValue": null,
              "description": "Fires when an error occurs during object loading.\n@param ev The event.",
              "name": "onerror",
              "declarations": [],
              "required": true,
              "type": {
                "name": "OnErrorEventHandlerNonNull"
              }
            },
            "onfocus": {
              "defaultValue": null,
              "description": "Fires when the object receives focus.\n@param ev The event.",
              "name": "onfocus",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: FocusEvent) => any"
              }
            },
            "ongotpointercapture": {
              "defaultValue": null,
              "description": "",
              "name": "ongotpointercapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "oninput": {
              "defaultValue": null,
              "description": "",
              "name": "oninput",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "oninvalid": {
              "defaultValue": null,
              "description": "",
              "name": "oninvalid",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onkeydown": {
              "defaultValue": null,
              "description": "Fires when the user presses a key.\n@param ev The keyboard event",
              "name": "onkeydown",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any"
              }
            },
            "onkeypress": {
              "defaultValue": null,
              "description": "Fires when the user presses an alphanumeric key.\n@param ev The event.",
              "name": "onkeypress",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any"
              }
            },
            "onkeyup": {
              "defaultValue": null,
              "description": "Fires when the user releases a key.\n@param ev The keyboard event",
              "name": "onkeyup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any"
              }
            },
            "onload": {
              "defaultValue": null,
              "description": "Fires immediately after the browser loads the object.\n@param ev The event.",
              "name": "onload",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onloadeddata": {
              "defaultValue": null,
              "description": "Occurs when media data is loaded at the current playback position.\n@param ev The event.",
              "name": "onloadeddata",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onloadedmetadata": {
              "defaultValue": null,
              "description": "Occurs when the duration and dimensions of the media have been determined.\n@param ev The event.",
              "name": "onloadedmetadata",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onloadend": {
              "defaultValue": null,
              "description": "",
              "name": "onloadend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: ProgressEvent) => any"
              }
            },
            "onloadstart": {
              "defaultValue": null,
              "description": "Occurs when Internet Explorer begins looking for media data.\n@param ev The event.",
              "name": "onloadstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onlostpointercapture": {
              "defaultValue": null,
              "description": "",
              "name": "onlostpointercapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onmousedown": {
              "defaultValue": null,
              "description": "Fires when the user clicks the object with either mouse button.\n@param ev The mouse event.",
              "name": "onmousedown",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseenter": {
              "defaultValue": null,
              "description": "",
              "name": "onmouseenter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseleave": {
              "defaultValue": null,
              "description": "",
              "name": "onmouseleave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmousemove": {
              "defaultValue": null,
              "description": "Fires when the user moves the mouse over the object.\n@param ev The mouse event.",
              "name": "onmousemove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseout": {
              "defaultValue": null,
              "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.\n@param ev The mouse event.",
              "name": "onmouseout",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseover": {
              "defaultValue": null,
              "description": "Fires when the user moves the mouse pointer into the object.\n@param ev The mouse event.",
              "name": "onmouseover",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onmouseup": {
              "defaultValue": null,
              "description": "Fires when the user releases a mouse button while the mouse is over the object.\n@param ev The mouse event.",
              "name": "onmouseup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: MouseEvent) => any"
              }
            },
            "onpause": {
              "defaultValue": null,
              "description": "Occurs when playback is paused.\n@param ev The event.",
              "name": "onpause",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onplay": {
              "defaultValue": null,
              "description": "Occurs when the play method is requested.\n@param ev The event.",
              "name": "onplay",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onplaying": {
              "defaultValue": null,
              "description": "Occurs when the audio or video has started playing.\n@param ev The event.",
              "name": "onplaying",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onpointercancel": {
              "defaultValue": null,
              "description": "",
              "name": "onpointercancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerdown": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerdown",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerenter": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerenter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerleave": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerleave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointermove": {
              "defaultValue": null,
              "description": "",
              "name": "onpointermove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerout": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerout",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerover": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerover",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onpointerup": {
              "defaultValue": null,
              "description": "",
              "name": "onpointerup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: PointerEvent) => any"
              }
            },
            "onprogress": {
              "defaultValue": null,
              "description": "Occurs to indicate progress while downloading media data.\n@param ev The event.",
              "name": "onprogress",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: ProgressEvent) => any"
              }
            },
            "onratechange": {
              "defaultValue": null,
              "description": "Occurs when the playback rate is increased or decreased.\n@param ev The event.",
              "name": "onratechange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onreset": {
              "defaultValue": null,
              "description": "Fires when the user resets a form.\n@param ev The event.",
              "name": "onreset",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onresize": {
              "defaultValue": null,
              "description": "",
              "name": "onresize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: UIEvent) => any"
              }
            },
            "onscroll": {
              "defaultValue": null,
              "description": "Fires when the user repositions the scroll box in the scroll bar on the object.\n@param ev The event.",
              "name": "onscroll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onsecuritypolicyviolation": {
              "defaultValue": null,
              "description": "",
              "name": "onsecuritypolicyviolation",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any"
              }
            },
            "onseeked": {
              "defaultValue": null,
              "description": "Occurs when the seek operation ends.\n@param ev The event.",
              "name": "onseeked",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onseeking": {
              "defaultValue": null,
              "description": "Occurs when the current playback position is moved.\n@param ev The event.",
              "name": "onseeking",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onselect": {
              "defaultValue": null,
              "description": "Fires when the current selection changes.\n@param ev The event.",
              "name": "onselect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onselectionchange": {
              "defaultValue": null,
              "description": "",
              "name": "onselectionchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onselectstart": {
              "defaultValue": null,
              "description": "",
              "name": "onselectstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onstalled": {
              "defaultValue": null,
              "description": "Occurs when the download has stopped.\n@param ev The event.",
              "name": "onstalled",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onsubmit": {
              "defaultValue": null,
              "description": "",
              "name": "onsubmit",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onsuspend": {
              "defaultValue": null,
              "description": "Occurs if the load operation has been intentionally halted.\n@param ev The event.",
              "name": "onsuspend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ontimeupdate": {
              "defaultValue": null,
              "description": "Occurs to indicate the current playback position.\n@param ev The event.",
              "name": "ontimeupdate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ontoggle": {
              "defaultValue": null,
              "description": "",
              "name": "ontoggle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "ontouchcancel": {
              "defaultValue": null,
              "description": "",
              "name": "ontouchcancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TouchEvent) => any"
              }
            },
            "ontouchend": {
              "defaultValue": null,
              "description": "",
              "name": "ontouchend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TouchEvent) => any"
              }
            },
            "ontouchmove": {
              "defaultValue": null,
              "description": "",
              "name": "ontouchmove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TouchEvent) => any"
              }
            },
            "ontouchstart": {
              "defaultValue": null,
              "description": "",
              "name": "ontouchstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TouchEvent) => any"
              }
            },
            "ontransitioncancel": {
              "defaultValue": null,
              "description": "",
              "name": "ontransitioncancel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TransitionEvent) => any"
              }
            },
            "ontransitionend": {
              "defaultValue": null,
              "description": "",
              "name": "ontransitionend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TransitionEvent) => any"
              }
            },
            "ontransitionrun": {
              "defaultValue": null,
              "description": "",
              "name": "ontransitionrun",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TransitionEvent) => any"
              }
            },
            "ontransitionstart": {
              "defaultValue": null,
              "description": "",
              "name": "ontransitionstart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: TransitionEvent) => any"
              }
            },
            "onvolumechange": {
              "defaultValue": null,
              "description": "Occurs when the volume is changed, or playback is muted or unmuted.\n@param ev The event.",
              "name": "onvolumechange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onwaiting": {
              "defaultValue": null,
              "description": "Occurs when playback stops because the next frame of a video resource is not available.\n@param ev The event.",
              "name": "onwaiting",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: Event) => any"
              }
            },
            "onwheel": {
              "defaultValue": null,
              "description": "",
              "name": "onwheel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: GlobalEventHandlers, ev: WheelEvent) => any"
              }
            },
            "oncopy": {
              "defaultValue": null,
              "description": "",
              "name": "oncopy",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any"
              }
            },
            "oncut": {
              "defaultValue": null,
              "description": "",
              "name": "oncut",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any"
              }
            },
            "onpaste": {
              "defaultValue": null,
              "description": "",
              "name": "onpaste",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any"
              }
            },
            "contentEditable": {
              "defaultValue": null,
              "description": "",
              "name": "contentEditable",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "inputMode": {
              "defaultValue": null,
              "description": "",
              "name": "inputMode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "isContentEditable": {
              "defaultValue": null,
              "description": "",
              "name": "isContentEditable",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "dataset": {
              "defaultValue": null,
              "description": "",
              "name": "dataset",
              "declarations": [],
              "required": true,
              "type": {
                "name": "DOMStringMap"
              }
            },
            "nonce": {
              "defaultValue": null,
              "description": "",
              "name": "nonce",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "tabIndex": {
              "defaultValue": null,
              "description": "",
              "name": "tabIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "blur": {
              "defaultValue": null,
              "description": "",
              "name": "blur",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "focus": {
              "defaultValue": null,
              "description": "",
              "name": "focus",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: FocusOptions) => void"
              }
            },
            "style": {
              "defaultValue": null,
              "description": "",
              "name": "style",
              "declarations": [],
              "required": true,
              "type": {
                "name": "CSSStyleDeclaration"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "https://testing-library.com/docs/dom-testing-library/api-helpers#isinaccessible",
          "displayName": "isInaccessible",
          "methods": [],
          "props": {
            "assignedSlot": {
              "defaultValue": null,
              "description": "",
              "name": "assignedSlot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLSlotElement"
              }
            },
            "attributes": {
              "defaultValue": null,
              "description": "",
              "name": "attributes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "NamedNodeMap"
              }
            },
            "classList": {
              "defaultValue": null,
              "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
              "name": "classList",
              "declarations": [],
              "required": true,
              "type": {
                "name": "DOMTokenList"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
              "name": "className",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "clientHeight": {
              "defaultValue": null,
              "description": "",
              "name": "clientHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientLeft": {
              "defaultValue": null,
              "description": "",
              "name": "clientLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientTop": {
              "defaultValue": null,
              "description": "",
              "name": "clientTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientWidth": {
              "defaultValue": null,
              "description": "",
              "name": "clientWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "id": {
              "defaultValue": null,
              "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "localName": {
              "defaultValue": null,
              "description": "Returns the local name.",
              "name": "localName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "namespaceURI": {
              "defaultValue": null,
              "description": "Returns the namespace.",
              "name": "namespaceURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onfullscreenchange": {
              "defaultValue": null,
              "description": "",
              "name": "onfullscreenchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: Element, ev: Event) => any"
              }
            },
            "onfullscreenerror": {
              "defaultValue": null,
              "description": "",
              "name": "onfullscreenerror",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: Element, ev: Event) => any"
              }
            },
            "outerHTML": {
              "defaultValue": null,
              "description": "",
              "name": "outerHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "prefix": {
              "defaultValue": null,
              "description": "Returns the namespace prefix.",
              "name": "prefix",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "scrollHeight": {
              "defaultValue": null,
              "description": "",
              "name": "scrollHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollLeft": {
              "defaultValue": null,
              "description": "",
              "name": "scrollLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollTop": {
              "defaultValue": null,
              "description": "",
              "name": "scrollTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollWidth": {
              "defaultValue": null,
              "description": "",
              "name": "scrollWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "shadowRoot": {
              "defaultValue": null,
              "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
              "name": "shadowRoot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ShadowRoot"
              }
            },
            "slot": {
              "defaultValue": null,
              "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
              "name": "slot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "tagName": {
              "defaultValue": null,
              "description": "Returns the HTML-uppercased qualified name.",
              "name": "tagName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "attachShadow": {
              "defaultValue": null,
              "description": "Creates a shadow root for element and returns it.",
              "name": "attachShadow",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(init: ShadowRootInit) => ShadowRoot"
              }
            },
            "closest": {
              "defaultValue": null,
              "description": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.",
              "name": "closest",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selector: K): HTMLElementTagNameMap[K]; <K extends \"symbol\" | ... 55 more ... | \"view\">(selector: K..."
              }
            },
            "getAttribute": {
              "defaultValue": null,
              "description": "Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.",
              "name": "getAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => string"
              }
            },
            "getAttributeNS": {
              "defaultValue": null,
              "description": "Returns element's attribute whose namespace is namespace and local name is localName, and null if there is\nno such attribute otherwise.",
              "name": "getAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => string"
              }
            },
            "getAttributeNames": {
              "defaultValue": null,
              "description": "Returns the qualified names of all element's attributes.\nCan contain duplicates.",
              "name": "getAttributeNames",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string[]"
              }
            },
            "getAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "getAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => Attr"
              }
            },
            "getAttributeNodeNS": {
              "defaultValue": null,
              "description": "",
              "name": "getAttributeNodeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespaceURI: string, localName: string) => Attr"
              }
            },
            "getBoundingClientRect": {
              "defaultValue": null,
              "description": "",
              "name": "getBoundingClientRect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ClientRect | DOMRect"
              }
            },
            "getClientRects": {
              "defaultValue": null,
              "description": "",
              "name": "getClientRects",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ClientRectList | DOMRectList"
              }
            },
            "getElementsByClassName": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByClassName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(classNames: string) => HTMLCollectionOf<Element>"
              }
            },
            "getElementsByTagName": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByTagName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(qualifiedName: K): HTMLCollectionOf<...>; <K extends \"symbol\" | ... 55 more ... | \"view\">(qualified..."
              }
            },
            "getElementsByTagNameNS": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByTagNameNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>; (namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<SVGElement>; (namespaceURI: string, localName: string): HTMLCollectionOf<...>; }"
              }
            },
            "hasAttribute": {
              "defaultValue": null,
              "description": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.",
              "name": "hasAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => boolean"
              }
            },
            "hasAttributeNS": {
              "defaultValue": null,
              "description": "Returns true if element has an attribute whose namespace is namespace and local name is localName.",
              "name": "hasAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => boolean"
              }
            },
            "hasAttributes": {
              "defaultValue": null,
              "description": "Returns true if element has attributes, and false otherwise.",
              "name": "hasAttributes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => boolean"
              }
            },
            "hasPointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "hasPointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => boolean"
              }
            },
            "insertAdjacentElement": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentElement",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(position: InsertPosition, insertedElement: Element) => Element"
              }
            },
            "insertAdjacentHTML": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(where: InsertPosition, html: string) => void"
              }
            },
            "insertAdjacentText": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentText",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(where: InsertPosition, text: string) => void"
              }
            },
            "matches": {
              "defaultValue": null,
              "description": "Returns true if matching selectors against element's root yields element, and false otherwise.",
              "name": "matches",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(selectors: string) => boolean"
              }
            },
            "msGetRegionContent": {
              "defaultValue": null,
              "description": "",
              "name": "msGetRegionContent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => any"
              }
            },
            "releasePointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "releasePointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => void"
              }
            },
            "removeAttribute": {
              "defaultValue": null,
              "description": "Removes element's first attribute whose qualified name is qualifiedName.",
              "name": "removeAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => void"
              }
            },
            "removeAttributeNS": {
              "defaultValue": null,
              "description": "Removes element's attribute whose namespace is namespace and local name is localName.",
              "name": "removeAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => void"
              }
            },
            "removeAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "removeAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "requestFullscreen": {
              "defaultValue": null,
              "description": "Displays element fullscreen and resolves promise when done.\nWhen supplied, options's navigationUI member indicates whether showing\nnavigation UI while in fullscreen is preferred or not. If set to \"show\", navigation\nsimplicity is preferred over screen space, and if set to \"hide\", more screen space\nis preferred. User agents are always free to honor user preference over the application's. The\ndefault value \"auto\" indicates no application preference.",
              "name": "requestFullscreen",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: FullscreenOptions) => Promise<void>"
              }
            },
            "requestPointerLock": {
              "defaultValue": null,
              "description": "",
              "name": "requestPointerLock",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "scroll": {
              "defaultValue": null,
              "description": "",
              "name": "scroll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "scrollBy": {
              "defaultValue": null,
              "description": "",
              "name": "scrollBy",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "scrollIntoView": {
              "defaultValue": null,
              "description": "",
              "name": "scrollIntoView",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(arg?: boolean | ScrollIntoViewOptions) => void"
              }
            },
            "scrollTo": {
              "defaultValue": null,
              "description": "",
              "name": "scrollTo",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "setAttribute": {
              "defaultValue": null,
              "description": "Sets the value of element's first attribute whose qualified name is qualifiedName to value.",
              "name": "setAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string, value: string) => void"
              }
            },
            "setAttributeNS": {
              "defaultValue": null,
              "description": "Sets the value of element's attribute whose namespace is namespace and local name is localName to value.",
              "name": "setAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, qualifiedName: string, value: string) => void"
              }
            },
            "setAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "setAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "setAttributeNodeNS": {
              "defaultValue": null,
              "description": "",
              "name": "setAttributeNodeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "setPointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "setPointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => void"
              }
            },
            "toggleAttribute": {
              "defaultValue": null,
              "description": "If force is not given, \"toggles\" qualifiedName, removing it if it is\npresent and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.\nReturns true if qualifiedName is now present, and false otherwise.",
              "name": "toggleAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string, force?: boolean) => boolean"
              }
            },
            "webkitMatchesSelector": {
              "defaultValue": null,
              "description": "",
              "name": "webkitMatchesSelector",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(selectors: string) => boolean"
              }
            },
            "addEventListener": {
              "defaultValue": null,
              "description": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.",
              "name": "addEventListener",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"fullscreenchange\" | \"fullscreenerror\">(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void; }"
              }
            },
            "removeEventListener": {
              "defaultValue": null,
              "description": "Removes the event listener in target's event listener list with the same type, callback, and options.\nRemoves the event listener in target's event listener list with the same type, callback, and options.",
              "name": "removeEventListener",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"fullscreenchange\" | \"fullscreenerror\">(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void; }"
              }
            },
            "baseURI": {
              "defaultValue": null,
              "description": "Returns node's node document's document base URL.",
              "name": "baseURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "childNodes": {
              "defaultValue": null,
              "description": "Returns the children.",
              "name": "childNodes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "NodeListOf<ChildNode>"
              }
            },
            "firstChild": {
              "defaultValue": null,
              "description": "Returns the first child.",
              "name": "firstChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "isConnected": {
              "defaultValue": null,
              "description": "Returns true if node is connected and false otherwise.",
              "name": "isConnected",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "lastChild": {
              "defaultValue": null,
              "description": "Returns the last child.",
              "name": "lastChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "nextSibling": {
              "defaultValue": null,
              "description": "Returns the next sibling.",
              "name": "nextSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "nodeName": {
              "defaultValue": null,
              "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
              "name": "nodeName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "nodeType": {
              "defaultValue": null,
              "description": "",
              "name": "nodeType",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "nodeValue": {
              "defaultValue": null,
              "description": "",
              "name": "nodeValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "ownerDocument": {
              "defaultValue": null,
              "description": "Returns the node document.\nReturns null for documents.",
              "name": "ownerDocument",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Document"
              }
            },
            "parentElement": {
              "defaultValue": null,
              "description": "Returns the parent element.",
              "name": "parentElement",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLElement"
              }
            },
            "parentNode": {
              "defaultValue": null,
              "description": "Returns the parent.",
              "name": "parentNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Node & ParentNode"
              }
            },
            "previousSibling": {
              "defaultValue": null,
              "description": "Returns the previous sibling.",
              "name": "previousSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Node"
              }
            },
            "textContent": {
              "defaultValue": null,
              "description": "",
              "name": "textContent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "appendChild": {
              "defaultValue": null,
              "description": "",
              "name": "appendChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: T) => T"
              }
            },
            "cloneNode": {
              "defaultValue": null,
              "description": "Returns a copy of node. If deep is true, the copy also includes the node's descendants.",
              "name": "cloneNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(deep?: boolean) => Node"
              }
            },
            "compareDocumentPosition": {
              "defaultValue": null,
              "description": "",
              "name": "compareDocumentPosition",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(other: Node) => number"
              }
            },
            "contains": {
              "defaultValue": null,
              "description": "Returns true if other is an inclusive descendant of node, and false otherwise.",
              "name": "contains",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(other: Node) => boolean"
              }
            },
            "getRootNode": {
              "defaultValue": null,
              "description": "Returns node's shadow-including root.",
              "name": "getRootNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: GetRootNodeOptions) => Node"
              }
            },
            "hasChildNodes": {
              "defaultValue": null,
              "description": "Returns whether node has children.",
              "name": "hasChildNodes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => boolean"
              }
            },
            "insertBefore": {
              "defaultValue": null,
              "description": "",
              "name": "insertBefore",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: T, refChild: Node) => T"
              }
            },
            "isDefaultNamespace": {
              "defaultValue": null,
              "description": "",
              "name": "isDefaultNamespace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string) => boolean"
              }
            },
            "isEqualNode": {
              "defaultValue": null,
              "description": "Returns whether node and otherNode have the same properties.",
              "name": "isEqualNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(otherNode: Node) => boolean"
              }
            },
            "isSameNode": {
              "defaultValue": null,
              "description": "",
              "name": "isSameNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(otherNode: Node) => boolean"
              }
            },
            "lookupNamespaceURI": {
              "defaultValue": null,
              "description": "",
              "name": "lookupNamespaceURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(prefix: string) => string"
              }
            },
            "lookupPrefix": {
              "defaultValue": null,
              "description": "",
              "name": "lookupPrefix",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string) => string"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "removeChild": {
              "defaultValue": null,
              "description": "",
              "name": "removeChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(oldChild: T) => T"
              }
            },
            "replaceChild": {
              "defaultValue": null,
              "description": "",
              "name": "replaceChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: Node, oldChild: T) => T"
              }
            },
            "ATTRIBUTE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ATTRIBUTE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "CDATA_SECTION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "CDATA_SECTION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "COMMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "COMMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_FRAGMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_FRAGMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_CONTAINED_BY": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_CONTAINED_BY",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_CONTAINS": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_CONTAINS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_DISCONNECTED": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_DISCONNECTED",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_FOLLOWING": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_FOLLOWING",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_PRECEDING": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_PRECEDING",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_TYPE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_TYPE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ELEMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ELEMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ENTITY_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ENTITY_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ENTITY_REFERENCE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ENTITY_REFERENCE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "NOTATION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "NOTATION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "PROCESSING_INSTRUCTION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "PROCESSING_INSTRUCTION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "TEXT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "TEXT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "dispatchEvent": {
              "defaultValue": null,
              "description": "Dispatches a synthetic event event to target and returns true\nif either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.",
              "name": "dispatchEvent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(event: Event) => boolean"
              }
            },
            "childElementCount": {
              "defaultValue": null,
              "description": "",
              "name": "childElementCount",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "Returns the child elements.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLCollection"
              }
            },
            "firstElementChild": {
              "defaultValue": null,
              "description": "Returns the first child that is an element, and null otherwise.",
              "name": "firstElementChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "lastElementChild": {
              "defaultValue": null,
              "description": "Returns the last child that is an element, and null otherwise.",
              "name": "lastElementChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "append": {
              "defaultValue": null,
              "description": "Inserts nodes after the last child of node, while replacing\nstrings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "append",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "prepend": {
              "defaultValue": null,
              "description": "Inserts nodes before the first child of node, while\nreplacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "prepend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "querySelector": {
              "defaultValue": null,
              "description": "Returns the first element that is a descendant of node that\nmatches selectors.",
              "name": "querySelector",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selectors: K): HTMLElementTagNameMap[K]; <K extends \"symbol\" | ... 55 more ... | \"view\">(selectors:..."
              }
            },
            "querySelectorAll": {
              "defaultValue": null,
              "description": "Returns all element descendants of node that\nmatch selectors.",
              "name": "querySelectorAll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selectors: K): NodeListOf<...>; <K extends \"symbol\" | ... 55 more ... | \"view\">(selectors: K): Node..."
              }
            },
            "nextElementSibling": {
              "defaultValue": null,
              "description": "Returns the first following sibling that\nis an element, and null otherwise.",
              "name": "nextElementSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "previousElementSibling": {
              "defaultValue": null,
              "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
              "name": "previousElementSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "after": {
              "defaultValue": null,
              "description": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "after",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "before": {
              "defaultValue": null,
              "description": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "before",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "remove": {
              "defaultValue": null,
              "description": "Removes node.",
              "name": "remove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "replaceWith": {
              "defaultValue": null,
              "description": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "replaceWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "innerHTML": {
              "defaultValue": null,
              "description": "",
              "name": "innerHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "animate": {
              "defaultValue": null,
              "description": "",
              "name": "animate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation"
              }
            },
            "getAnimations": {
              "defaultValue": null,
              "description": "",
              "name": "getAnimations",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Animation[]"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "computeHeadingLevel",
          "methods": [],
          "props": {
            "assignedSlot": {
              "defaultValue": null,
              "description": "",
              "name": "assignedSlot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLSlotElement"
              }
            },
            "attributes": {
              "defaultValue": null,
              "description": "",
              "name": "attributes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "NamedNodeMap"
              }
            },
            "classList": {
              "defaultValue": null,
              "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
              "name": "classList",
              "declarations": [],
              "required": true,
              "type": {
                "name": "DOMTokenList"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
              "name": "className",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "clientHeight": {
              "defaultValue": null,
              "description": "",
              "name": "clientHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientLeft": {
              "defaultValue": null,
              "description": "",
              "name": "clientLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientTop": {
              "defaultValue": null,
              "description": "",
              "name": "clientTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "clientWidth": {
              "defaultValue": null,
              "description": "",
              "name": "clientWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "id": {
              "defaultValue": null,
              "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "localName": {
              "defaultValue": null,
              "description": "Returns the local name.",
              "name": "localName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "namespaceURI": {
              "defaultValue": null,
              "description": "Returns the namespace.",
              "name": "namespaceURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onfullscreenchange": {
              "defaultValue": null,
              "description": "",
              "name": "onfullscreenchange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: Element, ev: Event) => any"
              }
            },
            "onfullscreenerror": {
              "defaultValue": null,
              "description": "",
              "name": "onfullscreenerror",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(this: Element, ev: Event) => any"
              }
            },
            "outerHTML": {
              "defaultValue": null,
              "description": "",
              "name": "outerHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "prefix": {
              "defaultValue": null,
              "description": "Returns the namespace prefix.",
              "name": "prefix",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "scrollHeight": {
              "defaultValue": null,
              "description": "",
              "name": "scrollHeight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollLeft": {
              "defaultValue": null,
              "description": "",
              "name": "scrollLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollTop": {
              "defaultValue": null,
              "description": "",
              "name": "scrollTop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "scrollWidth": {
              "defaultValue": null,
              "description": "",
              "name": "scrollWidth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "shadowRoot": {
              "defaultValue": null,
              "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
              "name": "shadowRoot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ShadowRoot"
              }
            },
            "slot": {
              "defaultValue": null,
              "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
              "name": "slot",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "tagName": {
              "defaultValue": null,
              "description": "Returns the HTML-uppercased qualified name.",
              "name": "tagName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "attachShadow": {
              "defaultValue": null,
              "description": "Creates a shadow root for element and returns it.",
              "name": "attachShadow",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(init: ShadowRootInit) => ShadowRoot"
              }
            },
            "closest": {
              "defaultValue": null,
              "description": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.",
              "name": "closest",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selector: K): HTMLElementTagNameMap[K]; <K extends \"symbol\" | ... 55 more ... | \"view\">(selector: K..."
              }
            },
            "getAttribute": {
              "defaultValue": null,
              "description": "Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.",
              "name": "getAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => string"
              }
            },
            "getAttributeNS": {
              "defaultValue": null,
              "description": "Returns element's attribute whose namespace is namespace and local name is localName, and null if there is\nno such attribute otherwise.",
              "name": "getAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => string"
              }
            },
            "getAttributeNames": {
              "defaultValue": null,
              "description": "Returns the qualified names of all element's attributes.\nCan contain duplicates.",
              "name": "getAttributeNames",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string[]"
              }
            },
            "getAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "getAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => Attr"
              }
            },
            "getAttributeNodeNS": {
              "defaultValue": null,
              "description": "",
              "name": "getAttributeNodeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespaceURI: string, localName: string) => Attr"
              }
            },
            "getBoundingClientRect": {
              "defaultValue": null,
              "description": "",
              "name": "getBoundingClientRect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ClientRect | DOMRect"
              }
            },
            "getClientRects": {
              "defaultValue": null,
              "description": "",
              "name": "getClientRects",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ClientRectList | DOMRectList"
              }
            },
            "getElementsByClassName": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByClassName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(classNames: string) => HTMLCollectionOf<Element>"
              }
            },
            "getElementsByTagName": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByTagName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(qualifiedName: K): HTMLCollectionOf<...>; <K extends \"symbol\" | ... 55 more ... | \"view\">(qualified..."
              }
            },
            "getElementsByTagNameNS": {
              "defaultValue": null,
              "description": "",
              "name": "getElementsByTagNameNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>; (namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<SVGElement>; (namespaceURI: string, localName: string): HTMLCollectionOf<...>; }"
              }
            },
            "hasAttribute": {
              "defaultValue": null,
              "description": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.",
              "name": "hasAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => boolean"
              }
            },
            "hasAttributeNS": {
              "defaultValue": null,
              "description": "Returns true if element has an attribute whose namespace is namespace and local name is localName.",
              "name": "hasAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => boolean"
              }
            },
            "hasAttributes": {
              "defaultValue": null,
              "description": "Returns true if element has attributes, and false otherwise.",
              "name": "hasAttributes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => boolean"
              }
            },
            "hasPointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "hasPointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => boolean"
              }
            },
            "insertAdjacentElement": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentElement",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(position: InsertPosition, insertedElement: Element) => Element"
              }
            },
            "insertAdjacentHTML": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(where: InsertPosition, html: string) => void"
              }
            },
            "insertAdjacentText": {
              "defaultValue": null,
              "description": "",
              "name": "insertAdjacentText",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(where: InsertPosition, text: string) => void"
              }
            },
            "matches": {
              "defaultValue": null,
              "description": "Returns true if matching selectors against element's root yields element, and false otherwise.",
              "name": "matches",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(selectors: string) => boolean"
              }
            },
            "msGetRegionContent": {
              "defaultValue": null,
              "description": "",
              "name": "msGetRegionContent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => any"
              }
            },
            "releasePointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "releasePointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => void"
              }
            },
            "removeAttribute": {
              "defaultValue": null,
              "description": "Removes element's first attribute whose qualified name is qualifiedName.",
              "name": "removeAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string) => void"
              }
            },
            "removeAttributeNS": {
              "defaultValue": null,
              "description": "Removes element's attribute whose namespace is namespace and local name is localName.",
              "name": "removeAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, localName: string) => void"
              }
            },
            "removeAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "removeAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "requestFullscreen": {
              "defaultValue": null,
              "description": "Displays element fullscreen and resolves promise when done.\nWhen supplied, options's navigationUI member indicates whether showing\nnavigation UI while in fullscreen is preferred or not. If set to \"show\", navigation\nsimplicity is preferred over screen space, and if set to \"hide\", more screen space\nis preferred. User agents are always free to honor user preference over the application's. The\ndefault value \"auto\" indicates no application preference.",
              "name": "requestFullscreen",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: FullscreenOptions) => Promise<void>"
              }
            },
            "requestPointerLock": {
              "defaultValue": null,
              "description": "",
              "name": "requestPointerLock",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "scroll": {
              "defaultValue": null,
              "description": "",
              "name": "scroll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "scrollBy": {
              "defaultValue": null,
              "description": "",
              "name": "scrollBy",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "scrollIntoView": {
              "defaultValue": null,
              "description": "",
              "name": "scrollIntoView",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(arg?: boolean | ScrollIntoViewOptions) => void"
              }
            },
            "scrollTo": {
              "defaultValue": null,
              "description": "",
              "name": "scrollTo",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }"
              }
            },
            "setAttribute": {
              "defaultValue": null,
              "description": "Sets the value of element's first attribute whose qualified name is qualifiedName to value.",
              "name": "setAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string, value: string) => void"
              }
            },
            "setAttributeNS": {
              "defaultValue": null,
              "description": "Sets the value of element's attribute whose namespace is namespace and local name is localName to value.",
              "name": "setAttributeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string, qualifiedName: string, value: string) => void"
              }
            },
            "setAttributeNode": {
              "defaultValue": null,
              "description": "",
              "name": "setAttributeNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "setAttributeNodeNS": {
              "defaultValue": null,
              "description": "",
              "name": "setAttributeNodeNS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(attr: Attr) => Attr"
              }
            },
            "setPointerCapture": {
              "defaultValue": null,
              "description": "",
              "name": "setPointerCapture",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pointerId: number) => void"
              }
            },
            "toggleAttribute": {
              "defaultValue": null,
              "description": "If force is not given, \"toggles\" qualifiedName, removing it if it is\npresent and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.\nReturns true if qualifiedName is now present, and false otherwise.",
              "name": "toggleAttribute",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(qualifiedName: string, force?: boolean) => boolean"
              }
            },
            "webkitMatchesSelector": {
              "defaultValue": null,
              "description": "",
              "name": "webkitMatchesSelector",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(selectors: string) => boolean"
              }
            },
            "addEventListener": {
              "defaultValue": null,
              "description": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\nThe options argument sets listener-specific options. For compatibility this can be a\nboolean, in which case the method behaves exactly as if the value was specified as options's capture.\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will\nbe removed.\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.",
              "name": "addEventListener",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"fullscreenchange\" | \"fullscreenerror\">(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void; }"
              }
            },
            "removeEventListener": {
              "defaultValue": null,
              "description": "Removes the event listener in target's event listener list with the same type, callback, and options.\nRemoves the event listener in target's event listener list with the same type, callback, and options.",
              "name": "removeEventListener",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"fullscreenchange\" | \"fullscreenerror\">(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void; }"
              }
            },
            "baseURI": {
              "defaultValue": null,
              "description": "Returns node's node document's document base URL.",
              "name": "baseURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "childNodes": {
              "defaultValue": null,
              "description": "Returns the children.",
              "name": "childNodes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "NodeListOf<ChildNode>"
              }
            },
            "firstChild": {
              "defaultValue": null,
              "description": "Returns the first child.",
              "name": "firstChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "isConnected": {
              "defaultValue": null,
              "description": "Returns true if node is connected and false otherwise.",
              "name": "isConnected",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "lastChild": {
              "defaultValue": null,
              "description": "Returns the last child.",
              "name": "lastChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "nextSibling": {
              "defaultValue": null,
              "description": "Returns the next sibling.",
              "name": "nextSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ChildNode"
              }
            },
            "nodeName": {
              "defaultValue": null,
              "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
              "name": "nodeName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "nodeType": {
              "defaultValue": null,
              "description": "",
              "name": "nodeType",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "nodeValue": {
              "defaultValue": null,
              "description": "",
              "name": "nodeValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "ownerDocument": {
              "defaultValue": null,
              "description": "Returns the node document.\nReturns null for documents.",
              "name": "ownerDocument",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Document"
              }
            },
            "parentElement": {
              "defaultValue": null,
              "description": "Returns the parent element.",
              "name": "parentElement",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLElement"
              }
            },
            "parentNode": {
              "defaultValue": null,
              "description": "Returns the parent.",
              "name": "parentNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Node & ParentNode"
              }
            },
            "previousSibling": {
              "defaultValue": null,
              "description": "Returns the previous sibling.",
              "name": "previousSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Node"
              }
            },
            "textContent": {
              "defaultValue": null,
              "description": "",
              "name": "textContent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "appendChild": {
              "defaultValue": null,
              "description": "",
              "name": "appendChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: T) => T"
              }
            },
            "cloneNode": {
              "defaultValue": null,
              "description": "Returns a copy of node. If deep is true, the copy also includes the node's descendants.",
              "name": "cloneNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(deep?: boolean) => Node"
              }
            },
            "compareDocumentPosition": {
              "defaultValue": null,
              "description": "",
              "name": "compareDocumentPosition",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(other: Node) => number"
              }
            },
            "contains": {
              "defaultValue": null,
              "description": "Returns true if other is an inclusive descendant of node, and false otherwise.",
              "name": "contains",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(other: Node) => boolean"
              }
            },
            "getRootNode": {
              "defaultValue": null,
              "description": "Returns node's shadow-including root.",
              "name": "getRootNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(options?: GetRootNodeOptions) => Node"
              }
            },
            "hasChildNodes": {
              "defaultValue": null,
              "description": "Returns whether node has children.",
              "name": "hasChildNodes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => boolean"
              }
            },
            "insertBefore": {
              "defaultValue": null,
              "description": "",
              "name": "insertBefore",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: T, refChild: Node) => T"
              }
            },
            "isDefaultNamespace": {
              "defaultValue": null,
              "description": "",
              "name": "isDefaultNamespace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string) => boolean"
              }
            },
            "isEqualNode": {
              "defaultValue": null,
              "description": "Returns whether node and otherNode have the same properties.",
              "name": "isEqualNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(otherNode: Node) => boolean"
              }
            },
            "isSameNode": {
              "defaultValue": null,
              "description": "",
              "name": "isSameNode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(otherNode: Node) => boolean"
              }
            },
            "lookupNamespaceURI": {
              "defaultValue": null,
              "description": "",
              "name": "lookupNamespaceURI",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(prefix: string) => string"
              }
            },
            "lookupPrefix": {
              "defaultValue": null,
              "description": "",
              "name": "lookupPrefix",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(namespace: string) => string"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "removeChild": {
              "defaultValue": null,
              "description": "",
              "name": "removeChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(oldChild: T) => T"
              }
            },
            "replaceChild": {
              "defaultValue": null,
              "description": "",
              "name": "replaceChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T extends Node>(newChild: Node, oldChild: T) => T"
              }
            },
            "ATTRIBUTE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ATTRIBUTE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "CDATA_SECTION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "CDATA_SECTION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "COMMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "COMMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_FRAGMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_FRAGMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_CONTAINED_BY": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_CONTAINED_BY",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_CONTAINS": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_CONTAINS",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_DISCONNECTED": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_DISCONNECTED",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_FOLLOWING": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_FOLLOWING",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_POSITION_PRECEDING": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_POSITION_PRECEDING",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "DOCUMENT_TYPE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "DOCUMENT_TYPE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ELEMENT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ELEMENT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ENTITY_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ENTITY_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "ENTITY_REFERENCE_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "ENTITY_REFERENCE_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "NOTATION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "NOTATION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "PROCESSING_INSTRUCTION_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "PROCESSING_INSTRUCTION_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "TEXT_NODE": {
              "defaultValue": null,
              "description": "",
              "name": "TEXT_NODE",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "dispatchEvent": {
              "defaultValue": null,
              "description": "Dispatches a synthetic event event to target and returns true\nif either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.",
              "name": "dispatchEvent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(event: Event) => boolean"
              }
            },
            "childElementCount": {
              "defaultValue": null,
              "description": "",
              "name": "childElementCount",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "Returns the child elements.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "HTMLCollection"
              }
            },
            "firstElementChild": {
              "defaultValue": null,
              "description": "Returns the first child that is an element, and null otherwise.",
              "name": "firstElementChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "lastElementChild": {
              "defaultValue": null,
              "description": "Returns the last child that is an element, and null otherwise.",
              "name": "lastElementChild",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "append": {
              "defaultValue": null,
              "description": "Inserts nodes after the last child of node, while replacing\nstrings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "append",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "prepend": {
              "defaultValue": null,
              "description": "Inserts nodes before the first child of node, while\nreplacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "prepend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "querySelector": {
              "defaultValue": null,
              "description": "Returns the first element that is a descendant of node that\nmatches selectors.",
              "name": "querySelector",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selectors: K): HTMLElementTagNameMap[K]; <K extends \"symbol\" | ... 55 more ... | \"view\">(selectors:..."
              }
            },
            "querySelectorAll": {
              "defaultValue": null,
              "description": "Returns all element descendants of node that\nmatch selectors.",
              "name": "querySelectorAll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <K extends \"object\" | \"audio\" | \"embed\" | \"font\" | \"script\" | \"style\" | \"track\" | \"video\" | \"button\" | \"link\" | \"option\" | \"menu\" | \"article\" | \"blockquote\" | \"caption\" | \"figure\" | \"img\" | ... 101 more ... | \"wbr\">(selectors: K): NodeListOf<...>; <K extends \"symbol\" | ... 55 more ... | \"view\">(selectors: K): Node..."
              }
            },
            "nextElementSibling": {
              "defaultValue": null,
              "description": "Returns the first following sibling that\nis an element, and null otherwise.",
              "name": "nextElementSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "previousElementSibling": {
              "defaultValue": null,
              "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
              "name": "previousElementSibling",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Element"
              }
            },
            "after": {
              "defaultValue": null,
              "description": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "after",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "before": {
              "defaultValue": null,
              "description": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "before",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "remove": {
              "defaultValue": null,
              "description": "Removes node.",
              "name": "remove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "replaceWith": {
              "defaultValue": null,
              "description": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\nThrows a \"HierarchyRequestError\" DOMException if the constraints of\nthe node tree are violated.",
              "name": "replaceWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...nodes: (string | Node)[]) => void"
              }
            },
            "innerHTML": {
              "defaultValue": null,
              "description": "",
              "name": "innerHTML",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "animate": {
              "defaultValue": null,
              "description": "",
              "name": "animate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation"
              }
            },
            "getAnimations": {
              "defaultValue": null,
              "description": "",
              "name": "getAnimations",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Animation[]"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "configure",
          "methods": [],
          "props": {
            "apply": {
              "defaultValue": null,
              "description": "Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n@param thisArg The object to be used as the this object.\n@param args An array of argument values to be passed to the function.",
              "name": "apply",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <T, R>(this: (this: T) => R, thisArg: T): R; <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R; }"
              }
            },
            "call": {
              "defaultValue": null,
              "description": "Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\n@param thisArg The object to be used as the this object.\n@param args Argument values to be passed to the function.",
              "name": "call",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R"
              }
            },
            "bind": {
              "defaultValue": null,
              "description": "For a given function, creates a bound function that has the same body as the original function.\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.\n@param thisArg The object to be used as the this object.\n@param args Arguments to bind to the parameters of the function.",
              "name": "bind",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A0, A extends any[], R>(this: (this: T, arg0: A0, ...args: A) => R, thisArg: T, arg0: A0): (...args: A) => R; <T, A0, A1, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1): (...args: A) =>..."
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a function.\nReturns a string representation of an object.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(() => string) | (() => string)"
              }
            },
            "prototype": {
              "defaultValue": null,
              "description": "",
              "name": "prototype",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "arguments": {
              "defaultValue": null,
              "description": "",
              "name": "arguments",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "caller": {
              "defaultValue": null,
              "description": "",
              "name": "caller",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "Returns the name of the function. Function names are read-only and can not be changed.",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "__@hasInstance": {
              "defaultValue": null,
              "description": "Determines whether the given value inherits from this function if this function was used\nas a constructor function.\n\nA constructor function can control which objects are recognized as its instances by\n'instanceof' by overriding this method.",
              "name": "__@hasInstance",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: any) => boolean"
              }
            },
            "testIdAttribute": {
              "defaultValue": null,
              "description": "",
              "name": "testIdAttribute",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "asyncWrapper": {
              "defaultValue": null,
              "description": "",
              "name": "asyncWrapper",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(cb: (...args: any[]) => any) => Promise<any>"
              }
            },
            "eventWrapper": {
              "defaultValue": null,
              "description": "",
              "name": "eventWrapper",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(cb: (...args: any[]) => any) => void"
              }
            },
            "asyncUtilTimeout": {
              "defaultValue": null,
              "description": "",
              "name": "asyncUtilTimeout",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "computedStyleSupportsPseudoElements": {
              "defaultValue": null,
              "description": "",
              "name": "computedStyleSupportsPseudoElements",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "defaultHidden": {
              "defaultValue": null,
              "description": "",
              "name": "defaultHidden",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "showOriginalStackTrace": {
              "defaultValue": null,
              "description": "",
              "name": "showOriginalStackTrace",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "throwSuggestions": {
              "defaultValue": null,
              "description": "",
              "name": "throwSuggestions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "getElementError": {
              "defaultValue": null,
              "description": "",
              "name": "getElementError",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(message: string, container: Element) => Error"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/containers/Can/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Can",
          "methods": [],
          "props": {
            "I": {
              "defaultValue": null,
              "description": "",
              "name": "I",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Actions"
              }
            },
            "a": {
              "defaultValue": null,
              "description": "",
              "name": "a",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Subjects"
              }
            },
            "passThrough": {
              "defaultValue": null,
              "description": "",
              "name": "passThrough",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "allowedRoutes": {
              "defaultValue": null,
              "description": "",
              "name": "allowedRoutes",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/containers/PrivateRoute/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "isAllowed",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: string[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: string, b: string) => number) => string[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: string[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends string>(predicate: (this: void, value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: string, start?: number, end?: number) => string[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => string[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, string]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/containers/PrivateRoute/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "PrivateRoute",
          "methods": [],
          "props": {
            "allowedRoles": {
              "defaultValue": null,
              "description": "",
              "name": "allowedRoles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string[]"
              }
            },
            "allowedRoute": {
              "defaultValue": null,
              "description": "",
              "name": "allowedRoute",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "location": {
              "defaultValue": null,
              "description": "",
              "name": "location",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Location<unknown>"
              }
            },
            "component": {
              "defaultValue": null,
              "description": "",
              "name": "component",
              "declarations": [],
              "required": false,
              "type": {
                "name": "FunctionComponent<any> | ComponentClass<RouteComponentProps<any, StaticContext, unknown>, any> | FunctionComponent<RouteComponentProps<any, StaticContext, unknown>> | ComponentClass<any, any>"
              }
            },
            "render": {
              "defaultValue": null,
              "description": "",
              "name": "render",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(props: RouteComponentProps<any, StaticContext, unknown>) => ReactNode"
              }
            },
            "path": {
              "defaultValue": null,
              "description": "",
              "name": "path",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string | string[]"
              }
            },
            "exact": {
              "defaultValue": null,
              "description": "",
              "name": "exact",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "sensitive": {
              "defaultValue": null,
              "description": "",
              "name": "sensitive",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "strict": {
              "defaultValue": null,
              "description": "",
              "name": "strict",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/assets/colors.ts",
      "value": []
    },
    {
      "key": "src/core/assets/zindex.ts",
      "value": []
    },
    {
      "key": "src/core/constants/metrics-providers.ts",
      "value": []
    },
    {
      "key": "src/core/constants/request.ts",
      "value": []
    },
    {
      "key": "src/core/constants/routes.ts",
      "value": []
    },
    {
      "key": "src/core/enums/DeploymentStatus.ts",
      "value": []
    },
    {
      "key": "src/core/enums/HttpStatus.ts",
      "value": []
    },
    {
      "key": "src/core/hooks/useClickOutside.ts",
      "value": []
    },
    {
      "key": "src/core/hooks/useForm.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "useForm",
          "methods": [],
          "props": {
            "mode": {
              "defaultValue": null,
              "description": "",
              "name": "mode",
              "declarations": [],
              "required": false,
              "type": {
                "name": "\"onBlur\" | \"onChange\" | \"onSubmit\" | \"onTouched\" | \"all\""
              }
            },
            "reValidateMode": {
              "defaultValue": null,
              "description": "",
              "name": "reValidateMode",
              "declarations": [],
              "required": false,
              "type": {
                "name": "\"onBlur\" | \"onChange\" | \"onSubmit\""
              }
            },
            "defaultValues": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValues",
              "declarations": [],
              "required": false,
              "type": {
                "name": "any"
              }
            },
            "resolver": {
              "defaultValue": null,
              "description": "",
              "name": "resolver",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Resolver<TFieldValues, TContext>"
              }
            },
            "context": {
              "defaultValue": null,
              "description": "",
              "name": "context",
              "declarations": [],
              "required": false,
              "type": {
                "name": "object"
              }
            },
            "shouldFocusError": {
              "defaultValue": null,
              "description": "",
              "name": "shouldFocusError",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "shouldUnregister": {
              "defaultValue": null,
              "description": "",
              "name": "shouldUnregister",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "criteriaMode": {
              "defaultValue": null,
              "description": "",
              "name": "criteriaMode",
              "declarations": [],
              "required": false,
              "type": {
                "name": "\"all\" | \"firstError\""
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/hooks/useInfiniteScroll.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "useInfiniteScroll",
          "methods": [],
          "props": {
            "hasMore": {
              "defaultValue": null,
              "description": "",
              "name": "hasMore",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "loadMore": {
              "defaultValue": null,
              "description": "",
              "name": "loadMore",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(page: number) => void"
              }
            },
            "distance": {
              "defaultValue": null,
              "description": "",
              "name": "distance",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "rootMargin": {
              "defaultValue": null,
              "description": "",
              "name": "rootMargin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/hooks/useInterval.ts",
      "value": []
    },
    {
      "key": "src/core/hooks/usePrevious.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "usePrevious",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/core/hooks/useTestConnection.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "useTestConnection",
          "methods": [],
          "props": {
            "apply": {
              "defaultValue": null,
              "description": "Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n@param thisArg The object to be used as the this object.\n@param args An array of argument values to be passed to the function.",
              "name": "apply",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <T, R>(this: (this: T) => R, thisArg: T): R; <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R; }"
              }
            },
            "call": {
              "defaultValue": null,
              "description": "Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\n@param thisArg The object to be used as the this object.\n@param args Argument values to be passed to the function.",
              "name": "call",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R"
              }
            },
            "bind": {
              "defaultValue": null,
              "description": "For a given function, creates a bound function that has the same body as the original function.\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.\n@param thisArg The object to be used as the this object.\n@param args Arguments to bind to the parameters of the function.",
              "name": "bind",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A0, A extends any[], R>(this: (this: T, arg0: A0, ...args: A) => R, thisArg: T, arg0: A0): (...args: A) => R; <T, A0, A1, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1): (...args: A) =>..."
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a function.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "prototype": {
              "defaultValue": null,
              "description": "",
              "name": "prototype",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "arguments": {
              "defaultValue": null,
              "description": "",
              "name": "arguments",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "caller": {
              "defaultValue": null,
              "description": "",
              "name": "caller",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "Returns the name of the function. Function names are read-only and can not be changed.",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "__@hasInstance": {
              "defaultValue": null,
              "description": "Determines whether the given value inherits from this function if this function was used\nas a constructor function.\n\nA constructor function can control which objects are recognized as its instances by\n'instanceof' by overriding this method.",
              "name": "__@hasInstance",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: any) => boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/hooks/useWorker.ts",
      "value": []
    },
    {
      "key": "src/core/interfaces/InputEvents.ts",
      "value": []
    },
    {
      "key": "src/core/interfaces/Pagination.ts",
      "value": []
    },
    {
      "key": "src/core/interfaces/PrimaryColors.ts",
      "value": []
    },
    {
      "key": "src/core/interfaces/TextAreaEvents.ts",
      "value": []
    },
    {
      "key": "src/core/interfaces/ValidationError.ts",
      "value": []
    },
    {
      "key": "src/core/interfaces/color.ts",
      "value": []
    },
    {
      "key": "src/core/providers/actions.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "deleteActionById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getPluginsByCategory",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "createAction",
          "methods": [],
          "props": {
            "nickname": {
              "defaultValue": null,
              "description": "",
              "name": "nickname",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "description": {
              "defaultValue": null,
              "description": "",
              "name": "description",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "type": {
              "defaultValue": null,
              "description": "",
              "name": "type",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "useDefaultConfiguration": {
              "defaultValue": null,
              "description": "",
              "name": "useDefaultConfiguration",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "configuration": {
              "defaultValue": null,
              "description": "",
              "name": "configuration",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ActionConfiguration"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/auth.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "circleMatcher",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "codeToTokens",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "renewToken",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/builds.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "composeBuild",
          "methods": [],
          "props": {
            "releaseName": {
              "defaultValue": null,
              "description": "",
              "name": "releaseName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "modules": {
              "defaultValue": null,
              "description": "",
              "name": "modules",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Module[]"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findBuilds",
          "methods": [],
          "props": {
            "tagName": {
              "defaultValue": null,
              "description": "",
              "name": "tagName",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "status": {
              "defaultValue": null,
              "description": "",
              "name": "status",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/circle.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "findAllCircles",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "active": {
              "defaultValue": null,
              "description": "",
              "name": "active",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findPercentageCircles",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "active": {
              "defaultValue": null,
              "description": "",
              "name": "active",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findComponents",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findCircleById",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "active": {
              "defaultValue": null,
              "description": "",
              "name": "active",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "deleteCircleById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "circleMatcherIdentify",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "createCircleManually",
          "methods": [],
          "props": {
            "rules": {
              "defaultValue": null,
              "description": "",
              "name": "rules",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "createCirclePercentage",
          "methods": [],
          "props": {
            "authorId": {
              "defaultValue": null,
              "description": "",
              "name": "authorId",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "percentage": {
              "defaultValue": null,
              "description": "",
              "name": "percentage",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "createCircleWithFile",
          "methods": [],
          "props": {
            "file": {
              "defaultValue": null,
              "description": "",
              "name": "file",
              "declarations": [],
              "required": true,
              "type": {
                "name": "File"
              }
            },
            "keyName": {
              "defaultValue": null,
              "description": "",
              "name": "keyName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findAllCirclesWithoutActive",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "active": {
              "defaultValue": null,
              "description": "",
              "name": "active",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findAllCirclesSimple",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "active": {
              "defaultValue": null,
              "description": "",
              "name": "active",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/circleMatcher.ts",
      "value": []
    },
    {
      "key": "src/core/providers/datasources.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "testDataSourceConnection",
          "methods": [],
          "props": {
            "pluginSrc": {
              "defaultValue": null,
              "description": "",
              "name": "pluginSrc",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "createDatasource",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "pluginSrc": {
              "defaultValue": null,
              "description": "",
              "name": "pluginSrc",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "healthy": {
              "defaultValue": null,
              "description": "",
              "name": "healthy",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "DatasourceData"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "deleteDatasource",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/deployment.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "createDeployment",
          "methods": [],
          "props": {
            "buildId": {
              "defaultValue": null,
              "description": "",
              "name": "buildId",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "circleId": {
              "defaultValue": null,
              "description": "",
              "name": "circleId",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "undeploy",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findDeployLogsByDeploymentId",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/deploymentConfiguration.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "create",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "butlerUrl": {
              "defaultValue": null,
              "description": "",
              "name": "butlerUrl",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "namespace": {
              "defaultValue": null,
              "description": "",
              "name": "namespace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "gitToken": {
              "defaultValue": null,
              "description": "",
              "name": "gitToken",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "gitProvider": {
              "defaultValue": null,
              "description": "",
              "name": "gitProvider",
              "declarations": [],
              "required": true,
              "type": {
                "name": "GitProviders"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "removeDeploymentConfiguration",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/git.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "create",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "credentials": {
              "defaultValue": null,
              "description": "",
              "name": "credentials",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Credentials"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/metricProvider.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "create",
          "methods": [],
          "props": {
            "provider": {
              "defaultValue": null,
              "description": "",
              "name": "provider",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "url": {
              "defaultValue": null,
              "description": "",
              "name": "url",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "verifyProviderConnection",
          "methods": [],
          "props": {
            "append": {
              "defaultValue": null,
              "description": "Appends a specified key/value pair as a new search parameter.",
              "name": "append",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, value: string) => void"
              }
            },
            "delete": {
              "defaultValue": null,
              "description": "Deletes the given search parameter, and its associated value, from the list of all search parameters.",
              "name": "delete",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => void"
              }
            },
            "get": {
              "defaultValue": null,
              "description": "Returns the first value associated to the given search parameter.",
              "name": "get",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "getAll": {
              "defaultValue": null,
              "description": "Returns all the values association with a given search parameter.",
              "name": "getAll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string[]"
              }
            },
            "has": {
              "defaultValue": null,
              "description": "Returns a Boolean indicating if such a search parameter exists.",
              "name": "has",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => boolean"
              }
            },
            "set": {
              "defaultValue": null,
              "description": "Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.",
              "name": "set",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, value: string) => void"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any) => void"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[string, string]>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an array of key, value pairs for every entry in the search params.",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[string, string]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns a list of keys in the search params.",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns a list of values in the search params.",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/metrics.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "findCircleMetrics",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findDeployMetrics",
          "methods": [],
          "props": {
            "append": {
              "defaultValue": null,
              "description": "Appends a specified key/value pair as a new search parameter.",
              "name": "append",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, value: string) => void"
              }
            },
            "delete": {
              "defaultValue": null,
              "description": "Deletes the given search parameter, and its associated value, from the list of all search parameters.",
              "name": "delete",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => void"
              }
            },
            "get": {
              "defaultValue": null,
              "description": "Returns the first value associated to the given search parameter.",
              "name": "get",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "getAll": {
              "defaultValue": null,
              "description": "Returns all the values association with a given search parameter.",
              "name": "getAll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string[]"
              }
            },
            "has": {
              "defaultValue": null,
              "description": "Returns a Boolean indicating if such a search parameter exists.",
              "name": "has",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => boolean"
              }
            },
            "set": {
              "defaultValue": null,
              "description": "Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.",
              "name": "set",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, value: string) => void"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any) => void"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[string, string]>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an array of key, value pairs for every entry in the search params.",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[string, string]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns a list of keys in the search params.",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns a list of values in the search params.",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findAllCirclesHistory",
          "methods": [],
          "props": {
            "append": {
              "defaultValue": null,
              "description": "Appends a specified key/value pair as a new search parameter.",
              "name": "append",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, value: string) => void"
              }
            },
            "delete": {
              "defaultValue": null,
              "description": "Deletes the given search parameter, and its associated value, from the list of all search parameters.",
              "name": "delete",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => void"
              }
            },
            "get": {
              "defaultValue": null,
              "description": "Returns the first value associated to the given search parameter.",
              "name": "get",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "getAll": {
              "defaultValue": null,
              "description": "Returns all the values association with a given search parameter.",
              "name": "getAll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string[]"
              }
            },
            "has": {
              "defaultValue": null,
              "description": "Returns a Boolean indicating if such a search parameter exists.",
              "name": "has",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => boolean"
              }
            },
            "set": {
              "defaultValue": null,
              "description": "Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.",
              "name": "set",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, value: string) => void"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any) => void"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[string, string]>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an array of key, value pairs for every entry in the search params.",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[string, string]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns a list of keys in the search params.",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns a list of values in the search params.",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/metricsGroups.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "getMetricsGroupsResumeById",
          "methods": [],
          "props": {
            "append": {
              "defaultValue": null,
              "description": "Appends a specified key/value pair as a new search parameter.",
              "name": "append",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, value: string) => void"
              }
            },
            "delete": {
              "defaultValue": null,
              "description": "Deletes the given search parameter, and its associated value, from the list of all search parameters.",
              "name": "delete",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => void"
              }
            },
            "get": {
              "defaultValue": null,
              "description": "Returns the first value associated to the given search parameter.",
              "name": "get",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "getAll": {
              "defaultValue": null,
              "description": "Returns all the values association with a given search parameter.",
              "name": "getAll",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string[]"
              }
            },
            "has": {
              "defaultValue": null,
              "description": "Returns a Boolean indicating if such a search parameter exists.",
              "name": "has",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => boolean"
              }
            },
            "set": {
              "defaultValue": null,
              "description": "Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.",
              "name": "set",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, value: string) => void"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any) => void"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[string, string]>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an array of key, value pairs for every entry in the search params.",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[string, string]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns a list of keys in the search params.",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns a list of values in the search params.",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getAllMetricsGroupsById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getAllDataSourceMetrics",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "createMetricGroup",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "metrics": {
              "defaultValue": null,
              "description": "",
              "name": "metrics",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Metric[]"
              }
            },
            "actions": {
              "defaultValue": null,
              "description": "",
              "name": "actions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Action[]"
              }
            },
            "status": {
              "defaultValue": null,
              "description": "",
              "name": "status",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "circleId": {
              "defaultValue": null,
              "description": "",
              "name": "circleId",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "deleteMetricGroup",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "createAction",
          "methods": [],
          "props": {
            "metricsGroupId": {
              "defaultValue": null,
              "description": "",
              "name": "metricsGroupId",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "actionId": {
              "defaultValue": null,
              "description": "",
              "name": "actionId",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "nickname": {
              "defaultValue": null,
              "description": "",
              "name": "nickname",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "executionParameters": {
              "defaultValue": null,
              "description": "",
              "name": "executionParameters",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ExecutionParameters"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "deleteActionByActionId",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getGroupActionById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/modules.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "findAll",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "create",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "helmRepository": {
              "defaultValue": null,
              "description": "",
              "name": "helmRepository",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "gitRepositoryAddress": {
              "defaultValue": null,
              "description": "",
              "name": "gitRepositoryAddress",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "components": {
              "defaultValue": null,
              "description": "",
              "name": "components",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Component[]"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "deleteModule",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/registry.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "create",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "address": {
              "defaultValue": null,
              "description": "",
              "name": "address",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "provider": {
              "defaultValue": null,
              "description": "",
              "name": "provider",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "accessKey": {
              "defaultValue": null,
              "description": "",
              "name": "accessKey",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "secretKey": {
              "defaultValue": null,
              "description": "",
              "name": "secretKey",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "username": {
              "defaultValue": null,
              "description": "",
              "name": "username",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "region": {
              "defaultValue": null,
              "description": "",
              "name": "region",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "password": {
              "defaultValue": null,
              "description": "",
              "name": "password",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "jsonKey": {
              "defaultValue": null,
              "description": "",
              "name": "jsonKey",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "organization": {
              "defaultValue": null,
              "description": "",
              "name": "organization",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "testRegistryConnection",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "address": {
              "defaultValue": null,
              "description": "",
              "name": "address",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "provider": {
              "defaultValue": null,
              "description": "",
              "name": "provider",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "accessKey": {
              "defaultValue": null,
              "description": "",
              "name": "accessKey",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "secretKey": {
              "defaultValue": null,
              "description": "",
              "name": "secretKey",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "username": {
              "defaultValue": null,
              "description": "",
              "name": "username",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "region": {
              "defaultValue": null,
              "description": "",
              "name": "region",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "password": {
              "defaultValue": null,
              "description": "",
              "name": "password",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "jsonKey": {
              "defaultValue": null,
              "description": "",
              "name": "jsonKey",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "organization": {
              "defaultValue": null,
              "description": "",
              "name": "organization",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "validateConnection",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/roles.ts",
      "value": []
    },
    {
      "key": "src/core/providers/tokens.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "findAll",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "create",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "permissions": {
              "defaultValue": null,
              "description": "",
              "name": "permissions",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string[]"
              }
            },
            "workspaces": {
              "defaultValue": null,
              "description": "",
              "name": "workspaces",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string[]"
              }
            },
            "allWorkspaces": {
              "defaultValue": null,
              "description": "",
              "name": "allWorkspaces",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "token": {
              "defaultValue": null,
              "description": "",
              "name": "token",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "author": {
              "defaultValue": null,
              "description": "",
              "name": "author",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "revoked": {
              "defaultValue": null,
              "description": "",
              "name": "revoked",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "created_at": {
              "defaultValue": null,
              "description": "",
              "name": "created_at",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "revoked_at": {
              "defaultValue": null,
              "description": "",
              "name": "revoked_at",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "last_used_at": {
              "defaultValue": null,
              "description": "",
              "name": "last_used_at",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "revoke",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "regenerate",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/user-group.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "findAllUserGroup",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findUserGroupById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "saveUserGroup",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "deleteUserGroup",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/userGroup.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "findByName",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/users.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "findAllWorkspaceUsers",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "email": {
              "defaultValue": null,
              "description": "",
              "name": "email",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findAllUsers",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "email": {
              "defaultValue": null,
              "description": "",
              "name": "email",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "resetPasswordById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findUserByEmail",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "deleteUserById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "createNewUser",
          "methods": [],
          "props": {
            "password": {
              "defaultValue": null,
              "description": "",
              "name": "password",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "root": {
              "defaultValue": null,
              "description": "",
              "name": "root",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "email": {
              "defaultValue": null,
              "description": "",
              "name": "email",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "changePassword",
          "methods": [],
          "props": {
            "oldPassword": {
              "defaultValue": null,
              "description": "",
              "name": "oldPassword",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "newPassword": {
              "defaultValue": null,
              "description": "",
              "name": "newPassword",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "confirmPassword": {
              "defaultValue": null,
              "description": "",
              "name": "confirmPassword",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/webhook.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "saveConfig",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "url": {
              "defaultValue": null,
              "description": "",
              "name": "url",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "apiKey": {
              "defaultValue": null,
              "description": "",
              "name": "apiKey",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "description": {
              "defaultValue": null,
              "description": "",
              "name": "description",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "events": {
              "defaultValue": null,
              "description": "",
              "name": "events",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string[]"
              }
            },
            "externalId": {
              "defaultValue": null,
              "description": "",
              "name": "externalId",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "lastDelivery": {
              "defaultValue": null,
              "description": "",
              "name": "lastDelivery",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Delivery"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getConfig",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "delConfig",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/workspace.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "findAll",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "saveWorkspaceName",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findById",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "updateName",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "testGitConnection",
          "methods": [],
          "props": {
            "credentials": {
              "defaultValue": null,
              "description": "",
              "name": "credentials",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ address: string; accessToken: string; serviceProvider: string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/state/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "combineReducer",
          "methods": [],
          "props": {
            "circles": {
              "defaultValue": null,
              "description": "",
              "name": "circles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: CircleState, action: CirclesActionTypes) => CircleState"
              }
            },
            "workspaces": {
              "defaultValue": null,
              "description": "",
              "name": "workspaces",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: WorkspaceState, action: WorkspacesActionTypes) => WorkspaceState"
              }
            },
            "users": {
              "defaultValue": null,
              "description": "",
              "name": "users",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: UserState, action: UsersActionTypes) => UserState"
              }
            },
            "notification": {
              "defaultValue": null,
              "description": "",
              "name": "notification",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: NotificationState, action: NotificationActionTypes) => NotificationState"
              }
            },
            "userGroups": {
              "defaultValue": null,
              "description": "",
              "name": "userGroups",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: UserGroupState, action: UserGroupsActionTypes) => UserGroupState"
              }
            },
            "modules": {
              "defaultValue": null,
              "description": "",
              "name": "modules",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: ModuleState, action: ModulesActionTypes) => ModuleState"
              }
            },
            "tokens": {
              "defaultValue": null,
              "description": "",
              "name": "tokens",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: TokensState, action: TokensActionTypes) => TokensState"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/state/hooks.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "useGlobalState",
          "methods": [],
          "props": {
            "apply": {
              "defaultValue": null,
              "description": "Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n@param thisArg The object to be used as the this object.\n@param args An array of argument values to be passed to the function.",
              "name": "apply",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <T, R>(this: (this: T) => R, thisArg: T): R; <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R; }"
              }
            },
            "call": {
              "defaultValue": null,
              "description": "Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\n@param thisArg The object to be used as the this object.\n@param args Argument values to be passed to the function.",
              "name": "call",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R"
              }
            },
            "bind": {
              "defaultValue": null,
              "description": "For a given function, creates a bound function that has the same body as the original function.\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.\n@param thisArg The object to be used as the this object.\n@param args Arguments to bind to the parameters of the function.",
              "name": "bind",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A0, A extends any[], R>(this: (this: T, arg0: A0, ...args: A) => R, thisArg: T, arg0: A0): (...args: A) => R; <T, A0, A1, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1): (...args: A) =>..."
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a function.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "prototype": {
              "defaultValue": null,
              "description": "",
              "name": "prototype",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "arguments": {
              "defaultValue": null,
              "description": "",
              "name": "arguments",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "caller": {
              "defaultValue": null,
              "description": "",
              "name": "caller",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "Returns the name of the function. Function names are read-only and can not be changed.",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "__@hasInstance": {
              "defaultValue": null,
              "description": "Determines whether the given value inherits from this function if this function was used\nas a constructor function.\n\nA constructor function can control which objects are recognized as its instances by\n'instanceof' by overriding this method.",
              "name": "__@hasInstance",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: any) => boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/state/index.ts",
      "value": []
    },
    {
      "key": "src/core/state/store.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Provider",
          "methods": [],
          "props": {
            "value": {
              "defaultValue": null,
              "description": "",
              "name": "value",
              "declarations": [],
              "required": true,
              "type": {
                "name": "[State, Dispatch<RootActionTypes>]"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "Consumer",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/core/utils/abilities.ts",
      "value": []
    },
    {
      "key": "src/core/utils/auth.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "setAccessToken",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "setRefreshToken",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "isRootRoute",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "hasPermission",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "checkStatus",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(radix?: number) => string"
              }
            },
            "toFixed": {
              "defaultValue": null,
              "description": "Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toFixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toExponential": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toExponential",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toPrecision": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",
              "name": "toPrecision",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(precision?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => number"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(locales?: string | string[], options?: NumberFormatOptions) => string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/circle.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "saveCircleId",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/clipboard.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "copyToClipboard",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/config.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "getConfigByKey",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/counter.ts",
      "value": []
    },
    {
      "key": "src/core/utils/date.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "dateFrom",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "humanizeDurationFromSeconds",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(radix?: number) => string"
              }
            },
            "toFixed": {
              "defaultValue": null,
              "description": "Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toFixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toExponential": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toExponential",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toPrecision": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",
              "name": "toPrecision",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(precision?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => number"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(locales?: string | string[], options?: NumberFormatOptions) => string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "dateTimeFormatter",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.\nReturns a string representation of a date. The format of the string depends on the locale.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(() => string) | (() => string)"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.\nReturns the stored time value in milliseconds since midnight, January 1, 1970 UTC.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(() => string) | (() => number)"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "toDateString": {
              "defaultValue": null,
              "description": "Returns a date as a string value.",
              "name": "toDateString",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toTimeString": {
              "defaultValue": null,
              "description": "Returns a time as a string value.",
              "name": "toTimeString",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a date converted to a string using the current locale.\nReturns a value as a string value appropriate to the host environment's current locale.\nConverts a date and time to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(() => string) | { (): string; (locales?: string | string[], options?: DateTimeFormatOptions): string; }"
              }
            },
            "toLocaleDateString": {
              "defaultValue": null,
              "description": "Returns a date as a string value appropriate to the host environment's current locale.\nConverts a date to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleDateString",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (locales?: string | string[], options?: DateTimeFormatOptions): string; }"
              }
            },
            "toLocaleTimeString": {
              "defaultValue": null,
              "description": "Returns a time as a string value appropriate to the host environment's current locale.\nConverts a time to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleTimeString",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (locales?: string | string[], options?: DateTimeFormatOptions): string; }"
              }
            },
            "getTime": {
              "defaultValue": null,
              "description": "Gets the time value in milliseconds.",
              "name": "getTime",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getFullYear": {
              "defaultValue": null,
              "description": "Gets the year, using local time.",
              "name": "getFullYear",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCFullYear": {
              "defaultValue": null,
              "description": "Gets the year using Universal Coordinated Time (UTC).",
              "name": "getUTCFullYear",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getMonth": {
              "defaultValue": null,
              "description": "Gets the month, using local time.",
              "name": "getMonth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCMonth": {
              "defaultValue": null,
              "description": "Gets the month of a Date object using Universal Coordinated Time (UTC).",
              "name": "getUTCMonth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getDate": {
              "defaultValue": null,
              "description": "Gets the day-of-the-month, using local time.",
              "name": "getDate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCDate": {
              "defaultValue": null,
              "description": "Gets the day-of-the-month, using Universal Coordinated Time (UTC).",
              "name": "getUTCDate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getDay": {
              "defaultValue": null,
              "description": "Gets the day of the week, using local time.",
              "name": "getDay",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCDay": {
              "defaultValue": null,
              "description": "Gets the day of the week using Universal Coordinated Time (UTC).",
              "name": "getUTCDay",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getHours": {
              "defaultValue": null,
              "description": "Gets the hours in a date, using local time.",
              "name": "getHours",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCHours": {
              "defaultValue": null,
              "description": "Gets the hours value in a Date object using Universal Coordinated Time (UTC).",
              "name": "getUTCHours",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getMinutes": {
              "defaultValue": null,
              "description": "Gets the minutes of a Date object, using local time.",
              "name": "getMinutes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCMinutes": {
              "defaultValue": null,
              "description": "Gets the minutes of a Date object using Universal Coordinated Time (UTC).",
              "name": "getUTCMinutes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getSeconds": {
              "defaultValue": null,
              "description": "Gets the seconds of a Date object, using local time.",
              "name": "getSeconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCSeconds": {
              "defaultValue": null,
              "description": "Gets the seconds of a Date object using Universal Coordinated Time (UTC).",
              "name": "getUTCSeconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getMilliseconds": {
              "defaultValue": null,
              "description": "Gets the milliseconds of a Date, using local time.",
              "name": "getMilliseconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCMilliseconds": {
              "defaultValue": null,
              "description": "Gets the milliseconds of a Date object using Universal Coordinated Time (UTC).",
              "name": "getUTCMilliseconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getTimezoneOffset": {
              "defaultValue": null,
              "description": "Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC).",
              "name": "getTimezoneOffset",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "setTime": {
              "defaultValue": null,
              "description": "Sets the date and time value in the Date object.\n@param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.",
              "name": "setTime",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(time: number) => number"
              }
            },
            "setMilliseconds": {
              "defaultValue": null,
              "description": "Sets the milliseconds value in the Date object using local time.\n@param ms A numeric value equal to the millisecond value.",
              "name": "setMilliseconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(ms: number) => number"
              }
            },
            "setUTCMilliseconds": {
              "defaultValue": null,
              "description": "Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\n@param ms A numeric value equal to the millisecond value.",
              "name": "setUTCMilliseconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(ms: number) => number"
              }
            },
            "setSeconds": {
              "defaultValue": null,
              "description": "Sets the seconds value in the Date object using local time.\n@param sec A numeric value equal to the seconds value.\n@param ms A numeric value equal to the milliseconds value.",
              "name": "setSeconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(sec: number, ms?: number) => number"
              }
            },
            "setUTCSeconds": {
              "defaultValue": null,
              "description": "Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\n@param sec A numeric value equal to the seconds value.\n@param ms A numeric value equal to the milliseconds value.",
              "name": "setUTCSeconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(sec: number, ms?: number) => number"
              }
            },
            "setMinutes": {
              "defaultValue": null,
              "description": "Sets the minutes value in the Date object using local time.\n@param min A numeric value equal to the minutes value.\n@param sec A numeric value equal to the seconds value.\n@param ms A numeric value equal to the milliseconds value.",
              "name": "setMinutes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(min: number, sec?: number, ms?: number) => number"
              }
            },
            "setUTCMinutes": {
              "defaultValue": null,
              "description": "Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\n@param min A numeric value equal to the minutes value.\n@param sec A numeric value equal to the seconds value.\n@param ms A numeric value equal to the milliseconds value.",
              "name": "setUTCMinutes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(min: number, sec?: number, ms?: number) => number"
              }
            },
            "setHours": {
              "defaultValue": null,
              "description": "Sets the hour value in the Date object using local time.\n@param hours A numeric value equal to the hours value.\n@param min A numeric value equal to the minutes value.\n@param sec A numeric value equal to the seconds value.\n@param ms A numeric value equal to the milliseconds value.",
              "name": "setHours",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(hours: number, min?: number, sec?: number, ms?: number) => number"
              }
            },
            "setUTCHours": {
              "defaultValue": null,
              "description": "Sets the hours value in the Date object using Universal Coordinated Time (UTC).\n@param hours A numeric value equal to the hours value.\n@param min A numeric value equal to the minutes value.\n@param sec A numeric value equal to the seconds value.\n@param ms A numeric value equal to the milliseconds value.",
              "name": "setUTCHours",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(hours: number, min?: number, sec?: number, ms?: number) => number"
              }
            },
            "setDate": {
              "defaultValue": null,
              "description": "Sets the numeric day-of-the-month value of the Date object using local time.\n@param date A numeric value equal to the day of the month.",
              "name": "setDate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(date: number) => number"
              }
            },
            "setUTCDate": {
              "defaultValue": null,
              "description": "Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\n@param date A numeric value equal to the day of the month.",
              "name": "setUTCDate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(date: number) => number"
              }
            },
            "setMonth": {
              "defaultValue": null,
              "description": "Sets the month value in the Date object using local time.\n@param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n@param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.",
              "name": "setMonth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(month: number, date?: number) => number"
              }
            },
            "setUTCMonth": {
              "defaultValue": null,
              "description": "Sets the month value in the Date object using Universal Coordinated Time (UTC).\n@param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n@param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.",
              "name": "setUTCMonth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(month: number, date?: number) => number"
              }
            },
            "setFullYear": {
              "defaultValue": null,
              "description": "Sets the year of the Date object using local time.\n@param year A numeric value for the year.\n@param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\n@param date A numeric value equal for the day of the month.",
              "name": "setFullYear",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(year: number, month?: number, date?: number) => number"
              }
            },
            "setUTCFullYear": {
              "defaultValue": null,
              "description": "Sets the year value in the Date object using Universal Coordinated Time (UTC).\n@param year A numeric value equal to the year.\n@param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\n@param date A numeric value equal to the day of the month.",
              "name": "setUTCFullYear",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(year: number, month?: number, date?: number) => number"
              }
            },
            "toUTCString": {
              "defaultValue": null,
              "description": "Returns a date converted to a string using Universal Coordinated Time (UTC).",
              "name": "toUTCString",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toISOString": {
              "defaultValue": null,
              "description": "Returns a date as a string value in ISO format.",
              "name": "toISOString",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toJSON": {
              "defaultValue": null,
              "description": "Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization.",
              "name": "toJSON",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(key?: any) => string"
              }
            },
            "__@toPrimitive": {
              "defaultValue": null,
              "description": "Converts a Date object to a string.\nConverts a Date object to a string.\nConverts a Date object to a number.\nConverts a Date object to a string or number.\n@param hint The strings \"number\", \"string\", or \"default\" to specify what primitive to return.\n@throws {TypeError} If 'hint' was given something other than \"number\", \"string\", or \"default\".\n@returns A number if 'hint' was \"number\", a string if 'hint' was \"string\" or \"default\".",
              "name": "__@toPrimitive",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (hint: \"default\"): string; (hint: \"string\"): string; (hint: \"number\"): number; (hint: string): ReactText; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "newDateTimeFormatter",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.\nReturns a string representation of a date. The format of the string depends on the locale.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(() => string) | (() => string)"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.\nReturns the stored time value in milliseconds since midnight, January 1, 1970 UTC.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(() => string) | (() => number)"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "toDateString": {
              "defaultValue": null,
              "description": "Returns a date as a string value.",
              "name": "toDateString",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toTimeString": {
              "defaultValue": null,
              "description": "Returns a time as a string value.",
              "name": "toTimeString",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a date converted to a string using the current locale.\nReturns a value as a string value appropriate to the host environment's current locale.\nConverts a date and time to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(() => string) | { (): string; (locales?: string | string[], options?: DateTimeFormatOptions): string; }"
              }
            },
            "toLocaleDateString": {
              "defaultValue": null,
              "description": "Returns a date as a string value appropriate to the host environment's current locale.\nConverts a date to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleDateString",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (locales?: string | string[], options?: DateTimeFormatOptions): string; }"
              }
            },
            "toLocaleTimeString": {
              "defaultValue": null,
              "description": "Returns a time as a string value appropriate to the host environment's current locale.\nConverts a time to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleTimeString",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (locales?: string | string[], options?: DateTimeFormatOptions): string; }"
              }
            },
            "getTime": {
              "defaultValue": null,
              "description": "Gets the time value in milliseconds.",
              "name": "getTime",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getFullYear": {
              "defaultValue": null,
              "description": "Gets the year, using local time.",
              "name": "getFullYear",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCFullYear": {
              "defaultValue": null,
              "description": "Gets the year using Universal Coordinated Time (UTC).",
              "name": "getUTCFullYear",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getMonth": {
              "defaultValue": null,
              "description": "Gets the month, using local time.",
              "name": "getMonth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCMonth": {
              "defaultValue": null,
              "description": "Gets the month of a Date object using Universal Coordinated Time (UTC).",
              "name": "getUTCMonth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getDate": {
              "defaultValue": null,
              "description": "Gets the day-of-the-month, using local time.",
              "name": "getDate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCDate": {
              "defaultValue": null,
              "description": "Gets the day-of-the-month, using Universal Coordinated Time (UTC).",
              "name": "getUTCDate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getDay": {
              "defaultValue": null,
              "description": "Gets the day of the week, using local time.",
              "name": "getDay",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCDay": {
              "defaultValue": null,
              "description": "Gets the day of the week using Universal Coordinated Time (UTC).",
              "name": "getUTCDay",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getHours": {
              "defaultValue": null,
              "description": "Gets the hours in a date, using local time.",
              "name": "getHours",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCHours": {
              "defaultValue": null,
              "description": "Gets the hours value in a Date object using Universal Coordinated Time (UTC).",
              "name": "getUTCHours",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getMinutes": {
              "defaultValue": null,
              "description": "Gets the minutes of a Date object, using local time.",
              "name": "getMinutes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCMinutes": {
              "defaultValue": null,
              "description": "Gets the minutes of a Date object using Universal Coordinated Time (UTC).",
              "name": "getUTCMinutes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getSeconds": {
              "defaultValue": null,
              "description": "Gets the seconds of a Date object, using local time.",
              "name": "getSeconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCSeconds": {
              "defaultValue": null,
              "description": "Gets the seconds of a Date object using Universal Coordinated Time (UTC).",
              "name": "getUTCSeconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getMilliseconds": {
              "defaultValue": null,
              "description": "Gets the milliseconds of a Date, using local time.",
              "name": "getMilliseconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getUTCMilliseconds": {
              "defaultValue": null,
              "description": "Gets the milliseconds of a Date object using Universal Coordinated Time (UTC).",
              "name": "getUTCMilliseconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "getTimezoneOffset": {
              "defaultValue": null,
              "description": "Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC).",
              "name": "getTimezoneOffset",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => number"
              }
            },
            "setTime": {
              "defaultValue": null,
              "description": "Sets the date and time value in the Date object.\n@param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.",
              "name": "setTime",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(time: number) => number"
              }
            },
            "setMilliseconds": {
              "defaultValue": null,
              "description": "Sets the milliseconds value in the Date object using local time.\n@param ms A numeric value equal to the millisecond value.",
              "name": "setMilliseconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(ms: number) => number"
              }
            },
            "setUTCMilliseconds": {
              "defaultValue": null,
              "description": "Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\n@param ms A numeric value equal to the millisecond value.",
              "name": "setUTCMilliseconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(ms: number) => number"
              }
            },
            "setSeconds": {
              "defaultValue": null,
              "description": "Sets the seconds value in the Date object using local time.\n@param sec A numeric value equal to the seconds value.\n@param ms A numeric value equal to the milliseconds value.",
              "name": "setSeconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(sec: number, ms?: number) => number"
              }
            },
            "setUTCSeconds": {
              "defaultValue": null,
              "description": "Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\n@param sec A numeric value equal to the seconds value.\n@param ms A numeric value equal to the milliseconds value.",
              "name": "setUTCSeconds",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(sec: number, ms?: number) => number"
              }
            },
            "setMinutes": {
              "defaultValue": null,
              "description": "Sets the minutes value in the Date object using local time.\n@param min A numeric value equal to the minutes value.\n@param sec A numeric value equal to the seconds value.\n@param ms A numeric value equal to the milliseconds value.",
              "name": "setMinutes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(min: number, sec?: number, ms?: number) => number"
              }
            },
            "setUTCMinutes": {
              "defaultValue": null,
              "description": "Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\n@param min A numeric value equal to the minutes value.\n@param sec A numeric value equal to the seconds value.\n@param ms A numeric value equal to the milliseconds value.",
              "name": "setUTCMinutes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(min: number, sec?: number, ms?: number) => number"
              }
            },
            "setHours": {
              "defaultValue": null,
              "description": "Sets the hour value in the Date object using local time.\n@param hours A numeric value equal to the hours value.\n@param min A numeric value equal to the minutes value.\n@param sec A numeric value equal to the seconds value.\n@param ms A numeric value equal to the milliseconds value.",
              "name": "setHours",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(hours: number, min?: number, sec?: number, ms?: number) => number"
              }
            },
            "setUTCHours": {
              "defaultValue": null,
              "description": "Sets the hours value in the Date object using Universal Coordinated Time (UTC).\n@param hours A numeric value equal to the hours value.\n@param min A numeric value equal to the minutes value.\n@param sec A numeric value equal to the seconds value.\n@param ms A numeric value equal to the milliseconds value.",
              "name": "setUTCHours",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(hours: number, min?: number, sec?: number, ms?: number) => number"
              }
            },
            "setDate": {
              "defaultValue": null,
              "description": "Sets the numeric day-of-the-month value of the Date object using local time.\n@param date A numeric value equal to the day of the month.",
              "name": "setDate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(date: number) => number"
              }
            },
            "setUTCDate": {
              "defaultValue": null,
              "description": "Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\n@param date A numeric value equal to the day of the month.",
              "name": "setUTCDate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(date: number) => number"
              }
            },
            "setMonth": {
              "defaultValue": null,
              "description": "Sets the month value in the Date object using local time.\n@param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n@param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.",
              "name": "setMonth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(month: number, date?: number) => number"
              }
            },
            "setUTCMonth": {
              "defaultValue": null,
              "description": "Sets the month value in the Date object using Universal Coordinated Time (UTC).\n@param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n@param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.",
              "name": "setUTCMonth",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(month: number, date?: number) => number"
              }
            },
            "setFullYear": {
              "defaultValue": null,
              "description": "Sets the year of the Date object using local time.\n@param year A numeric value for the year.\n@param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\n@param date A numeric value equal for the day of the month.",
              "name": "setFullYear",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(year: number, month?: number, date?: number) => number"
              }
            },
            "setUTCFullYear": {
              "defaultValue": null,
              "description": "Sets the year value in the Date object using Universal Coordinated Time (UTC).\n@param year A numeric value equal to the year.\n@param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\n@param date A numeric value equal to the day of the month.",
              "name": "setUTCFullYear",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(year: number, month?: number, date?: number) => number"
              }
            },
            "toUTCString": {
              "defaultValue": null,
              "description": "Returns a date converted to a string using Universal Coordinated Time (UTC).",
              "name": "toUTCString",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toISOString": {
              "defaultValue": null,
              "description": "Returns a date as a string value in ISO format.",
              "name": "toISOString",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toJSON": {
              "defaultValue": null,
              "description": "Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization.",
              "name": "toJSON",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(key?: any) => string"
              }
            },
            "__@toPrimitive": {
              "defaultValue": null,
              "description": "Converts a Date object to a string.\nConverts a Date object to a string.\nConverts a Date object to a number.\nConverts a Date object to a string or number.\n@param hint The strings \"number\", \"string\", or \"default\" to specify what primitive to return.\n@throws {TypeError} If 'hint' was given something other than \"number\", \"string\", or \"default\".\n@returns A number if 'hint' was \"number\", a string if 'hint' was \"string\" or \"default\".",
              "name": "__@toPrimitive",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (hint: \"default\"): string; (hint: \"string\"): string; (hint: \"number\"): number; (hint: string): ReactText; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/development.ts",
      "value": []
    },
    {
      "key": "src/core/utils/domain.ts",
      "value": []
    },
    {
      "key": "src/core/utils/http.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "isErrorCode",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(radix?: number) => string"
              }
            },
            "toFixed": {
              "defaultValue": null,
              "description": "Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toFixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toExponential": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toExponential",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toPrecision": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",
              "name": "toPrecision",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(precision?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => number"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(locales?: string | string[], options?: NumberFormatOptions) => string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "themeByHttpCode",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(radix?: number) => string"
              }
            },
            "toFixed": {
              "defaultValue": null,
              "description": "Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toFixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toExponential": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toExponential",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toPrecision": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",
              "name": "toPrecision",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(precision?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => number"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(locales?: string | string[], options?: NumberFormatOptions) => string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/menu.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "genMenuId",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/mutation-observer.d.ts",
      "value": []
    },
    {
      "key": "src/core/utils/path.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "pushTo",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getAllParams",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/profile.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "getProfileByKey",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "saveProfile",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "workspaces": {
              "defaultValue": null,
              "description": "",
              "name": "workspaces",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Workspace[]"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "root": {
              "defaultValue": null,
              "description": "",
              "name": "root",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "photoUrl": {
              "defaultValue": null,
              "description": "",
              "name": "photoUrl",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "email": {
              "defaultValue": null,
              "description": "",
              "name": "email",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/query.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "buildParams",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/core/utils/routes.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "useRouteMatch",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.\nReturns a string representation of an array.\nReturns a string representation of an object.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(() => string) | (() => string) | (() => string)"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\nCombines two or more arrays.\nCombines two or more arrays.\n@param strings The strings to append to the end of the string.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "((...strings: string[]) => string) | { (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; }"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\nReturns the index of the first occurrence of a value in an array.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "((searchString: string, position?: number) => number) | ((searchElement: string, fromIndex?: number) => number)"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\nReturns the index of the last occurrence of a specified value in an array.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "((searchString: string, position?: number) => number) | ((searchElement: string, fromIndex?: number) => number)"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\nReturns a section of an array.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "((start?: number, end?: number) => string) | ((start?: number, end?: number) => string[])"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.\nGets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.\nReturns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(() => string) | (() => Object)"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\nDetermines whether an array includes a certain element, returning true or false as appropriate.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "((searchString: string, position?: number) => boolean) | ((searchElement: string, fromIndex?: number) => boolean)"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator\nIterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(() => IterableIterator<string>) | (() => IterableIterator<string>)"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a date converted to a string using the current locale.\nReturns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(() => string) | (() => string)"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: string[]) => number"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: string, b: string) => number) => string[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: string[]) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends string>(predicate: (this: void, value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: string, start?: number, end?: number) => string[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => string[]"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, string]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            },
            "location": {
              "defaultValue": null,
              "description": "",
              "name": "location",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Location<unknown>"
              }
            },
            "component": {
              "defaultValue": null,
              "description": "",
              "name": "component",
              "declarations": [],
              "required": false,
              "type": {
                "name": "FunctionComponent<any> | ComponentClass<RouteComponentProps<any, StaticContext, unknown>, any> | FunctionComponent<RouteComponentProps<any, StaticContext, unknown>> | ComponentClass<any, any>"
              }
            },
            "render": {
              "defaultValue": null,
              "description": "",
              "name": "render",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(props: RouteComponentProps<any, StaticContext, unknown>) => ReactNode"
              }
            },
            "path": {
              "defaultValue": null,
              "description": "",
              "name": "path",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string | string[]"
              }
            },
            "exact": {
              "defaultValue": null,
              "description": "",
              "name": "exact",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "sensitive": {
              "defaultValue": null,
              "description": "",
              "name": "sensitive",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "strict": {
              "defaultValue": null,
              "description": "",
              "name": "strict",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "goTo",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "redirectTo",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getParam",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getParamByHash",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/select.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "normalizeSelectOptions",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ContentItem<T>"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: ContentItem<T>[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<ContentItem<T>>[]): ContentItem<T>[]; (...items: (ContentItem<T> | ConcatArray<ContentItem<T>>)[]): ContentItem<T>[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ContentItem<T>[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ContentItem<T>"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => ContentItem<T>[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: ContentItem<T>, b: ContentItem<T>) => number) => ContentItem<T>[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): ContentItem<T>[]; (start: number, deleteCount: number, ...items: ContentItem<T>[]): ContentItem<T>[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: ContentItem<T>[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: ContentItem<T>, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: ContentItem<T>, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: ContentItem<T>, index: number, array: ContentItem<T>[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: ContentItem<T>, index: number, array: ContentItem<T>[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: ContentItem<T>, index: number, array: ContentItem<T>[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: ContentItem<T>, index: number, array: ContentItem<T>[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends ContentItem<T>>(callbackfn: (value: ContentItem<T>, index: number, array: ContentItem<T>[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: ContentItem<T>, index: number, array: ContentItem<T>[]) => unknown, thisArg?: any): ContentItem<...>[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: ContentItem<T>, currentValue: ContentItem<T>, currentIndex: number, array: ContentItem<T>[]) => ContentItem<T>): ContentItem<T>; (callbackfn: (previousValue: ContentItem<T>, currentValue: ContentItem<...>, currentIndex: number, array: ContentItem<...>[]) => ContentItem<...>, initialVal..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: ContentItem<T>, currentValue: ContentItem<T>, currentIndex: number, array: ContentItem<T>[]) => ContentItem<T>): ContentItem<T>; (callbackfn: (previousValue: ContentItem<T>, currentValue: ContentItem<...>, currentIndex: number, array: ContentItem<...>[]) => ContentItem<...>, initialVal..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends ContentItem<T>>(predicate: (this: void, value: ContentItem<T>, index: number, obj: ContentItem<T>[]) => value is S, thisArg?: any): S; (predicate: (value: ContentItem<T>, index: number, obj: ContentItem<T>[]) => unknown, thisArg?: any): ContentItem<...>; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: ContentItem<T>, index: number, obj: ContentItem<T>[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: ContentItem<T>, start?: number, end?: number) => ContentItem<T>[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => ContentItem<T>[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<ContentItem<T>>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, ContentItem<T>]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<ContentItem<T>>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: ContentItem<T>, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: ContentItem<T>, index: number, array: ContentItem<T>[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "normalizeSelectOptionsNickname",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ContentItem<T>"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: ContentItem<T>[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<ContentItem<T>>[]): ContentItem<T>[]; (...items: (ContentItem<T> | ConcatArray<ContentItem<T>>)[]): ContentItem<T>[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ContentItem<T>[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ContentItem<T>"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => ContentItem<T>[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: ContentItem<T>, b: ContentItem<T>) => number) => ContentItem<T>[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): ContentItem<T>[]; (start: number, deleteCount: number, ...items: ContentItem<T>[]): ContentItem<T>[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: ContentItem<T>[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: ContentItem<T>, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: ContentItem<T>, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: ContentItem<T>, index: number, array: ContentItem<T>[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: ContentItem<T>, index: number, array: ContentItem<T>[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: ContentItem<T>, index: number, array: ContentItem<T>[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: ContentItem<T>, index: number, array: ContentItem<T>[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends ContentItem<T>>(callbackfn: (value: ContentItem<T>, index: number, array: ContentItem<T>[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: ContentItem<T>, index: number, array: ContentItem<T>[]) => unknown, thisArg?: any): ContentItem<...>[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: ContentItem<T>, currentValue: ContentItem<T>, currentIndex: number, array: ContentItem<T>[]) => ContentItem<T>): ContentItem<T>; (callbackfn: (previousValue: ContentItem<T>, currentValue: ContentItem<...>, currentIndex: number, array: ContentItem<...>[]) => ContentItem<...>, initialVal..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: ContentItem<T>, currentValue: ContentItem<T>, currentIndex: number, array: ContentItem<T>[]) => ContentItem<T>): ContentItem<T>; (callbackfn: (previousValue: ContentItem<T>, currentValue: ContentItem<...>, currentIndex: number, array: ContentItem<...>[]) => ContentItem<...>, initialVal..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends ContentItem<T>>(predicate: (this: void, value: ContentItem<T>, index: number, obj: ContentItem<T>[]) => value is S, thisArg?: any): S; (predicate: (value: ContentItem<T>, index: number, obj: ContentItem<T>[]) => unknown, thisArg?: any): ContentItem<...>; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: ContentItem<T>, index: number, obj: ContentItem<T>[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: ContentItem<T>, start?: number, end?: number) => ContentItem<T>[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => ContentItem<T>[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<ContentItem<T>>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, ContentItem<T>]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<ContentItem<T>>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: ContentItem<T>, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: ContentItem<T>, index: number, array: ContentItem<T>[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/sidebar.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "setExpandMode",
          "methods": [],
          "props": {
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getExpandMode",
          "methods": [],
          "props": {
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/themes.ts",
      "value": []
    },
    {
      "key": "src/core/utils/validations.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "validFields",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "isNotBlank",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "trimValue",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "atLeastOne",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: string[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: string, b: string) => number) => string[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: string[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends string>(predicate: (this: void, value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: string, start?: number, end?: number) => string[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => string[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, string]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/utils/workspace.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "saveWorkspace",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "status": {
              "defaultValue": null,
              "description": "",
              "name": "status",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "circleMatcherUrl": {
              "defaultValue": null,
              "description": "",
              "name": "circleMatcherUrl",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "gitConfiguration": {
              "defaultValue": null,
              "description": "",
              "name": "gitConfiguration",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Configuration"
              }
            },
            "userGroups": {
              "defaultValue": null,
              "description": "",
              "name": "userGroups",
              "declarations": [],
              "required": false,
              "type": {
                "name": "UserGroup[]"
              }
            },
            "deploymentConfiguration": {
              "defaultValue": null,
              "description": "",
              "name": "deploymentConfiguration",
              "declarations": [],
              "required": false,
              "type": {
                "name": "DeploymentConfiguration"
              }
            },
            "metricConfiguration": {
              "defaultValue": null,
              "description": "",
              "name": "metricConfiguration",
              "declarations": [],
              "required": false,
              "type": {
                "name": "MetricConfiguration"
              }
            },
            "registryConfiguration": {
              "defaultValue": null,
              "description": "",
              "name": "registryConfiguration",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Configuration"
              }
            },
            "permissions": {
              "defaultValue": null,
              "description": "",
              "name": "permissions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string[]"
              }
            },
            "webhookConfiguration": {
              "defaultValue": null,
              "description": "",
              "name": "webhookConfiguration",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Webhook[]"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Account/ChangePassword.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ChangePassword",
          "methods": [],
          "props": {
            "onSubmit": {
              "defaultValue": null,
              "description": "",
              "name": "onSubmit",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Account/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Account/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Account/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Auth/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Auth/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Auth/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "buildFormData",
          "methods": [],
          "props": {
            "file": {
              "defaultValue": null,
              "description": "",
              "name": "file",
              "declarations": [],
              "required": true,
              "type": {
                "name": "File"
              }
            },
            "keyName": {
              "defaultValue": null,
              "description": "",
              "name": "keyName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/hooks.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "useCircles",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "useSaveCirclePercentage",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "useSaveCircleManually",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "useSaveCircleWithFile",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "hooks",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Error/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Error/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "isActiveById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Groups/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Groups/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Main/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Main/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Workspaces",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "Users",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "Tokens",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "Groups",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "Account",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "Circles",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "Modules",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "Settings",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "Metrics",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Main/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "normalizeCircleParams",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Option"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Option[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<Option>[]): Option[]; (...items: (Option | ConcatArray<Option>)[]): Option[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Option[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Option"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => Option[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: Option, b: Option) => number) => Option[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): Option[]; (start: number, deleteCount: number, ...items: Option[]): Option[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Option[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Option, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Option, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Option, index: number, array: Option[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Option, index: number, array: Option[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Option, index: number, array: Option[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: Option, index: number, array: Option[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Option>(callbackfn: (value: Option, index: number, array: Option[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Option, index: number, array: Option[]) => unknown, thisArg?: any): Option[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Option, currentValue: Option, currentIndex: number, array: Option[]) => Option): Option; (callbackfn: (previousValue: Option, currentValue: Option, currentIndex: number, array: Option[]) => Option, initialValue: Option): Option; <U>(callbackfn: (previousValue: U, currentValue: Option, ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Option, currentValue: Option, currentIndex: number, array: Option[]) => Option): Option; (callbackfn: (previousValue: Option, currentValue: Option, currentIndex: number, array: Option[]) => Option, initialValue: Option): Option; <U>(callbackfn: (previousValue: U, currentValue: Option, ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Option>(predicate: (this: void, value: Option, index: number, obj: Option[]) => value is S, thisArg?: any): S; (predicate: (value: Option, index: number, obj: Option[]) => unknown, thisArg?: any): Option; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: Option, index: number, obj: Option[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: Option, start?: number, end?: number) => Option[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => Option[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Option>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, Option]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Option>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Option, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: Option, index: number, array: Option[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getStatus",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "setWizard",
          "methods": [],
          "props": {
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Users/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/enums.ts",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/styled.ts",
      "value": []
    },
    {
      "key": "src/containers/Can/__tests__/Can.spec.tsx",
      "value": []
    },
    {
      "key": "src/containers/PrivateRoute/__tests__/PrivateRoute.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/assets/style/animate.ts",
      "value": []
    },
    {
      "key": "src/core/assets/style/global.ts",
      "value": []
    },
    {
      "key": "src/core/components/AceEditor/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "AceEditor",
          "methods": [],
          "props": {
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(value: string) => void"
              }
            },
            "theme": {
              "defaultValue": null,
              "description": "",
              "name": "theme",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "mode": {
              "defaultValue": null,
              "description": "",
              "name": "mode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "value": {
              "defaultValue": null,
              "description": "",
              "name": "value",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "readOnly": {
              "defaultValue": null,
              "description": "",
              "name": "readOnly",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "height": {
              "defaultValue": null,
              "description": "",
              "name": "height",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "width": {
              "defaultValue": null,
              "description": "",
              "name": "width",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "placeholder": {
              "defaultValue": null,
              "description": "",
              "name": "placeholder",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/AceEditor/styled.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/avatar.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/badge.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/checkbox.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/circleDeploymentHistory.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/circleGroupMetrics.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/circleMatcher.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/circleSegmentation.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/dropdown.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/footer.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/icon.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/index.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/input.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/labeledIcon.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/log.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/main.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/menu.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/menuPage.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/metrics.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/moove.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/navTabs.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/notification.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/panel.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/popover.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/profile.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/radio.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/registry.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/scroll.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/segments.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/select.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/sidebar.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/slider.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/summary.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/switch.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/tabPanel.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/text.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/token.ts",
      "value": []
    },
    {
      "key": "src/core/components/Avatar/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Avatar",
          "methods": [],
          "props": {
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "profile": {
              "defaultValue": null,
              "description": "",
              "name": "profile",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Profile"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Avatar/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/AvatarName/helper.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "getNameInitials",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/AvatarName/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "AvatarName",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "initials": {
              "defaultValue": null,
              "description": "",
              "name": "initials",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/AvatarName/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Badge/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Badge",
          "methods": [],
          "props": {
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Badge/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Button/index.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Card/index.ts",
      "value": []
    },
    {
      "key": "src/core/components/Charts/index.ts",
      "value": []
    },
    {
      "key": "src/core/components/CheckPassword/CheckPassword.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "CheckPassword",
          "methods": [],
          "props": {
            "password": {
              "defaultValue": null,
              "description": "",
              "name": "password",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "confirmPass": {
              "defaultValue": null,
              "description": "",
              "name": "confirmPass",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/CheckPassword/helpers.ts",
      "value": []
    },
    {
      "key": "src/core/components/CheckPassword/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "validationResolver",
          "methods": [],
          "props": {
            "oldPassword": {
              "defaultValue": null,
              "description": "",
              "name": "oldPassword",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "newPassword": {
              "defaultValue": null,
              "description": "",
              "name": "newPassword",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "confirmPassword": {
              "defaultValue": null,
              "description": "",
              "name": "confirmPassword",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/CheckPassword/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/CheckPassword/validationResolver.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "validationResolver",
          "methods": [],
          "props": {
            "oldPassword": {
              "defaultValue": null,
              "description": "",
              "name": "oldPassword",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "newPassword": {
              "defaultValue": null,
              "description": "",
              "name": "newPassword",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "confirmPassword": {
              "defaultValue": null,
              "description": "",
              "name": "confirmPassword",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/ConnectionStatus/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ConnectionStatus",
          "methods": [],
          "props": {
            "status": {
              "defaultValue": null,
              "description": "",
              "name": "status",
              "declarations": [],
              "required": true,
              "type": {
                "name": "\"error\" | \"idle\" | \"success\""
              }
            },
            "successMessage": {
              "defaultValue": null,
              "description": "",
              "name": "successMessage",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "errorMessage": {
              "defaultValue": null,
              "description": "",
              "name": "errorMessage",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/ConnectionStatus/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/ContentIcon/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ContentIcon",
          "methods": [],
          "props": {
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/ContentIcon/styled.tsx",
      "value": []
    },
    {
      "key": "src/core/components/DocumentationLink/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "DocumentationLink",
          "methods": [],
          "props": {
            "text": {
              "defaultValue": null,
              "description": "",
              "name": "text",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "documentationLink": {
              "defaultValue": null,
              "description": "",
              "name": "documentationLink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/DocumentationLink/interface.ts",
      "value": []
    },
    {
      "key": "src/core/components/DocumentationLink/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Dropdown/NewDropDown.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "NewDropDown",
          "methods": [],
          "props": {
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "color": {
              "defaultValue": null,
              "description": "",
              "name": "color",
              "declarations": [],
              "required": false,
              "type": {
                "name": "\"error\" | \"dark\" | \"light\" | \"success\" | \"primary\" | \"medium\""
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Dropdown/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Dropdown",
          "methods": [],
          "props": {
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "color": {
              "defaultValue": null,
              "description": "",
              "name": "color",
              "declarations": [],
              "required": false,
              "type": {
                "name": "\"error\" | \"dark\" | \"light\" | \"success\" | \"primary\" | \"medium\""
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Dropdown/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/index.ts",
      "value": []
    },
    {
      "key": "src/core/components/InfiniteScroll/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "InfiniteScroll",
          "methods": [],
          "props": {
            "loader": {
              "defaultValue": null,
              "description": "",
              "name": "loader",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReactNode"
              }
            },
            "hasMore": {
              "defaultValue": null,
              "description": "",
              "name": "hasMore",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "loadMore": {
              "defaultValue": null,
              "description": "",
              "name": "loadMore",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(page: number) => void"
              }
            },
            "rootMargin": {
              "defaultValue": null,
              "description": "",
              "name": "rootMargin",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/InfiniteScroll/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/LabeledIcon/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "LabeledIcon",
          "methods": [],
          "props": {
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "marginContent": {
              "defaultValue": null,
              "description": "",
              "name": "marginContent",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "isActive": {
              "defaultValue": null,
              "description": "",
              "name": "isActive",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onClick": {
              "defaultValue": null,
              "description": "",
              "name": "onClick",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/LabeledIcon/styled.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Link/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Link",
          "methods": [],
          "props": {
            "href": {
              "defaultValue": null,
              "description": "",
              "name": "href",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "target": {
              "defaultValue": null,
              "description": "",
              "name": "target",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Link/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Layer/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Layer",
          "methods": [],
          "props": {
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Layer/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Icon/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Icon",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "color": {
              "defaultValue": null,
              "description": "",
              "name": "color",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "isActive": {
              "defaultValue": null,
              "description": "",
              "name": "isActive",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onClick": {
              "defaultValue": null,
              "description": "",
              "name": "onClick",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: MouseEvent<Element, MouseEvent>) => void"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLDivElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Icon/styled.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Icon/useDynamicImport.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "useDynamicImport",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Menu/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Menu",
          "methods": [],
          "props": {
            "actions": {
              "defaultValue": null,
              "description": "",
              "name": "actions",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Action[]"
              }
            },
            "active": {
              "defaultValue": null,
              "description": "",
              "name": "active",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "onSelect": {
              "defaultValue": null,
              "description": "",
              "name": "onSelect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => void"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Menu/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Modal/index.tsx",
      "value": []
    },
    {
      "key": "src/core/components/NavTabs/Placeholder.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Placeholder",
          "methods": [],
          "props": {
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "subTitle": {
              "defaultValue": null,
              "description": "",
              "name": "subTitle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/NavTabs/Tab.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Tab",
          "methods": [],
          "props": {
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/NavTabs/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "NavTabs",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/core/components/NavTabs/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Notification/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Notification",
          "methods": [],
          "props": {
            "notification": {
              "defaultValue": null,
              "description": "",
              "name": "notification",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Notification"
              }
            },
            "onDismiss": {
              "defaultValue": null,
              "description": "",
              "name": "onDismiss",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Notification/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Page/constants.ts",
      "value": []
    },
    {
      "key": "src/core/components/Page/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Page",
          "methods": [],
          "props": {
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "subtitle": {
              "defaultValue": null,
              "description": "",
              "name": "subtitle",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "hasCards": {
              "defaultValue": null,
              "description": "",
              "name": "hasCards",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "currentPage": {
              "defaultValue": null,
              "description": "",
              "name": "currentPage",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Page/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Panel/index.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Placeholder/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Placeholder",
          "methods": [],
          "props": {
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "subtitle": {
              "defaultValue": null,
              "description": "",
              "name": "subtitle",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "description": {
              "defaultValue": null,
              "description": "",
              "name": "description",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Placeholder/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Popover/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Popover",
          "methods": [],
          "props": {
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "description": {
              "defaultValue": null,
              "description": "",
              "name": "description",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "",
              "name": "link",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "linkLabel": {
              "defaultValue": null,
              "description": "",
              "name": "linkLabel",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Popover/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Radio/index.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Summary/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Summary",
          "methods": [],
          "props": {
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Summary/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Switch/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Switch",
          "methods": [],
          "props": {
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "active": {
              "defaultValue": null,
              "description": "",
              "name": "active",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(value: boolean) => void"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Switch/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/TabPanel/constants.ts",
      "value": []
    },
    {
      "key": "src/core/components/TabPanel/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "TabPanel",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/core/components/TabPanel/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Text/enums.ts",
      "value": []
    },
    {
      "key": "src/core/components/Text/index.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Text/styled.ts",
      "value": []
    },
    {
      "key": "src/core/hooks/__tests__/useInfiniteScroll.spec.ts",
      "value": []
    },
    {
      "key": "src/core/hooks/__tests__/usePrevious.spec.ts",
      "value": []
    },
    {
      "key": "src/core/providers/__tests__/actions.spec.ts",
      "value": []
    },
    {
      "key": "src/core/providers/__tests__/auth.spec.ts",
      "value": []
    },
    {
      "key": "src/core/providers/__tests__/circle.spec.ts",
      "value": []
    },
    {
      "key": "src/core/providers/__tests__/users.spec.ts",
      "value": []
    },
    {
      "key": "src/core/providers/__tests__/workspace.spec.ts",
      "value": []
    },
    {
      "key": "src/core/providers/base/hooks.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "useFetchData",
          "methods": [],
          "props": {
            "apply": {
              "defaultValue": null,
              "description": "Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n@param thisArg The object to be used as the this object.\n@param args An array of argument values to be passed to the function.",
              "name": "apply",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <T, R>(this: (this: T) => R, thisArg: T): R; <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R; }"
              }
            },
            "call": {
              "defaultValue": null,
              "description": "Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\n@param thisArg The object to be used as the this object.\n@param args Argument values to be passed to the function.",
              "name": "call",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R"
              }
            },
            "bind": {
              "defaultValue": null,
              "description": "For a given function, creates a bound function that has the same body as the original function.\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.\n@param thisArg The object to be used as the this object.\n@param args Arguments to bind to the parameters of the function.",
              "name": "bind",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A0, A extends any[], R>(this: (this: T, arg0: A0, ...args: A) => R, thisArg: T, arg0: A0): (...args: A) => R; <T, A0, A1, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1): (...args: A) =>..."
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a function.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "prototype": {
              "defaultValue": null,
              "description": "",
              "name": "prototype",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "arguments": {
              "defaultValue": null,
              "description": "",
              "name": "arguments",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "caller": {
              "defaultValue": null,
              "description": "",
              "name": "caller",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "Returns the name of the function. Function names are read-only and can not be changed.",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "__@hasInstance": {
              "defaultValue": null,
              "description": "Determines whether the given value inherits from this function if this function was used\nas a constructor function.\n\nA constructor function can control which objects are recognized as its instances by\n'instanceof' by overriding this method.",
              "name": "__@hasInstance",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: any) => boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "useFetch",
          "methods": [],
          "props": {
            "apply": {
              "defaultValue": null,
              "description": "Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n@param thisArg The object to be used as the this object.\n@param args An array of argument values to be passed to the function.",
              "name": "apply",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <T, R>(this: (this: T) => R, thisArg: T): R; <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R; }"
              }
            },
            "call": {
              "defaultValue": null,
              "description": "Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\n@param thisArg The object to be used as the this object.\n@param args Argument values to be passed to the function.",
              "name": "call",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R"
              }
            },
            "bind": {
              "defaultValue": null,
              "description": "For a given function, creates a bound function that has the same body as the original function.\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.\n@param thisArg The object to be used as the this object.\n@param args Arguments to bind to the parameters of the function.",
              "name": "bind",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A0, A extends any[], R>(this: (this: T, arg0: A0, ...args: A) => R, thisArg: T, arg0: A0): (...args: A) => R; <T, A0, A1, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1): (...args: A) =>..."
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a function.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "prototype": {
              "defaultValue": null,
              "description": "",
              "name": "prototype",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "arguments": {
              "defaultValue": null,
              "description": "",
              "name": "arguments",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "caller": {
              "defaultValue": null,
              "description": "",
              "name": "caller",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "Returns the name of the function. Function names are read-only and can not be changed.",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "__@hasInstance": {
              "defaultValue": null,
              "description": "Determines whether the given value inherits from this function if this function was used\nas a constructor function.\n\nA constructor function can control which objects are recognized as its instances by\n'instanceof' by overriding this method.",
              "name": "__@hasInstance",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: any) => boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/providers/base/index.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "deleteRequest",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/state/__tests__/helpers.spec.ts",
      "value": []
    },
    {
      "key": "src/core/state/__tests__/hooks.spec.ts",
      "value": []
    },
    {
      "key": "src/core/state/interfaces/Reducer.ts",
      "value": []
    },
    {
      "key": "src/core/state/interfaces/State.ts",
      "value": []
    },
    {
      "key": "src/core/utils/__tests__/abilities.spec.ts",
      "value": []
    },
    {
      "key": "src/core/utils/__tests__/auth.spec.ts",
      "value": []
    },
    {
      "key": "src/core/utils/__tests__/counter.spec.ts",
      "value": []
    },
    {
      "key": "src/core/utils/__tests__/date.spec.ts",
      "value": []
    },
    {
      "key": "src/core/utils/__tests__/development.spec.ts",
      "value": []
    },
    {
      "key": "src/core/utils/__tests__/domain.spec.ts",
      "value": []
    },
    {
      "key": "src/core/utils/__tests__/query.spec.ts",
      "value": []
    },
    {
      "key": "src/core/utils/__tests__/routes.spec.ts",
      "value": []
    },
    {
      "key": "src/core/utils/__tests__/themes.spec.ts",
      "value": []
    },
    {
      "key": "src/core/utils/__tests__/validation.spec.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/auth/index.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/auth/responses.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/circleMatcher/index.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/circleMatcher/responses.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/circles/index.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/circles/responses.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/gate/index.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/gate/responses.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/modules/index.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/modules/responses.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/users/index.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/users/responses.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/workspaces/index.ts",
      "value": []
    },
    {
      "key": "src/mocks/handlers/workspaces/responses.ts",
      "value": []
    },
    {
      "key": "src/modules/Account/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Account/Loaders/tab.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Account/Menu/MenuItem.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MenuItem",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "path": {
              "defaultValue": null,
              "description": "",
              "name": "path",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Account/Menu/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Menu",
          "methods": [],
          "props": {
            "items": {
              "defaultValue": null,
              "description": "",
              "name": "items",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any[]"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Account/Menu/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Account/__tests__/Account.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Account/__tests__/ChangePassword.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Account/hooks/useChangePassword.ts",
      "value": []
    },
    {
      "key": "src/modules/Account/interfaces/ChangePassword.ts",
      "value": []
    },
    {
      "key": "src/modules/Auth/Login/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Auth/Login/hook.ts",
      "value": []
    },
    {
      "key": "src/modules/Auth/Login/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Auth/__tests__/Auth.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Comparation",
          "methods": [],
          "props": {
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(delCircleStatus: string) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Matcher/ParametersForm.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ParametersForm",
          "methods": [],
          "props": {
            "onSubmit": {
              "defaultValue": null,
              "description": "",
              "name": "onSubmit",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(data: Record<string, any>) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Matcher/ResultList.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ResultList",
          "methods": [],
          "props": {
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "circles": {
              "defaultValue": null,
              "description": "",
              "name": "circles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "CircleMatcherResult[]"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Matcher/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Matcher/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "buildParameters",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ParameterForm"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: ParameterForm[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<ParameterForm>[]): ParameterForm[]; (...items: (ParameterForm | ConcatArray<ParameterForm>)[]): ParameterForm[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ParameterForm[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ParameterForm"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => ParameterForm[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: ParameterForm, b: ParameterForm) => number) => ParameterForm[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): ParameterForm[]; (start: number, deleteCount: number, ...items: ParameterForm[]): ParameterForm[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: ParameterForm[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: ParameterForm, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: ParameterForm, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: ParameterForm, index: number, array: ParameterForm[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: ParameterForm, index: number, array: ParameterForm[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: ParameterForm, index: number, array: ParameterForm[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: ParameterForm, index: number, array: ParameterForm[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends ParameterForm>(callbackfn: (value: ParameterForm, index: number, array: ParameterForm[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: ParameterForm, index: number, array: ParameterForm[]) => unknown, thisArg?: any): ParameterForm[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: ParameterForm, currentValue: ParameterForm, currentIndex: number, array: ParameterForm[]) => ParameterForm): ParameterForm; (callbackfn: (previousValue: ParameterForm, currentValue: ParameterForm, currentIndex: number, array: ParameterForm[]) => ParameterForm, initialValue: ParameterFo..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: ParameterForm, currentValue: ParameterForm, currentIndex: number, array: ParameterForm[]) => ParameterForm): ParameterForm; (callbackfn: (previousValue: ParameterForm, currentValue: ParameterForm, currentIndex: number, array: ParameterForm[]) => ParameterForm, initialValue: ParameterFo..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends ParameterForm>(predicate: (this: void, value: ParameterForm, index: number, obj: ParameterForm[]) => value is S, thisArg?: any): S; (predicate: (value: ParameterForm, index: number, obj: ParameterForm[]) => unknown, thisArg?: any): ParameterForm; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: ParameterForm, index: number, obj: ParameterForm[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: ParameterForm, start?: number, end?: number) => ParameterForm[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => ParameterForm[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<ParameterForm>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, ParameterForm]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<ParameterForm>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: ParameterForm, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: ParameterForm, index: number, array: ParameterForm[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "parseParameters",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Matcher/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Matcher/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Matcher/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Matcher/useCircleMatcher.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Menu/MenuItem.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MenuItem",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Menu/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Menu",
          "methods": [],
          "props": {
            "status": {
              "defaultValue": null,
              "description": "",
              "name": "status",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onSearch": {
              "defaultValue": null,
              "description": "",
              "name": "onSearch",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => void"
              }
            },
            "onSelect": {
              "defaultValue": null,
              "description": "",
              "name": "onSelect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(selected: string) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Menu/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Release/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Release/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Release/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Release",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onGoBack": {
              "defaultValue": null,
              "description": "",
              "name": "onGoBack",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "onCreateRelease": {
              "defaultValue": null,
              "description": "",
              "name": "onCreateRelease",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(deploy: Deployment) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Release/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Segments/Clause.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Clause",
          "methods": [],
          "props": {
            "prefixName": {
              "defaultValue": null,
              "description": "",
              "name": "prefixName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "viewMode": {
              "defaultValue": null,
              "description": "",
              "name": "viewMode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "clauses": {
              "defaultValue": null,
              "description": "",
              "name": "clauses",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Partial<ArrayField<Record<string, object>, \"id\">>"
              }
            },
            "onRemoveRule": {
              "defaultValue": null,
              "description": "",
              "name": "onRemoveRule",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(clauseIndex: number) => void"
              }
            },
            "hasGroup": {
              "defaultValue": null,
              "description": "",
              "name": "hasGroup",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Segments/Rule.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Rule",
          "methods": [],
          "props": {
            "prefixName": {
              "defaultValue": null,
              "description": "",
              "name": "prefixName",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "viewMode": {
              "defaultValue": null,
              "description": "",
              "name": "viewMode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "rule": {
              "defaultValue": null,
              "description": "",
              "name": "rule",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Partial<ArrayField<Record<string, { condition: string; key: string; value: string; }>, \"id\">>"
              }
            },
            "isGroup": {
              "defaultValue": null,
              "description": "",
              "name": "isGroup",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onRemoveRule": {
              "defaultValue": null,
              "description": "",
              "name": "onRemoveRule",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Function"
              }
            },
            "hasGroup": {
              "defaultValue": null,
              "description": "",
              "name": "hasGroup",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Segments/conditional.options.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Segments/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Segments/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "getCondition",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getClauseOperatorPosition",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(radix?: number) => string"
              }
            },
            "toFixed": {
              "defaultValue": null,
              "description": "Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toFixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toExponential": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toExponential",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toPrecision": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",
              "name": "toPrecision",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(precision?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => number"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(locales?: string | string[], options?: NumberFormatOptions) => string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getClauseVerticalLine",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(radix?: number) => string"
              }
            },
            "toFixed": {
              "defaultValue": null,
              "description": "Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toFixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toExponential": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toExponential",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toPrecision": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",
              "name": "toPrecision",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(precision?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => number"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(locales?: string | string[], options?: NumberFormatOptions) => string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getClauseHorizontalLine",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(radix?: number) => string"
              }
            },
            "toFixed": {
              "defaultValue": null,
              "description": "Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toFixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toExponential": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "name": "toExponential",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(fractionDigits?: number) => string"
              }
            },
            "toPrecision": {
              "defaultValue": null,
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",
              "name": "toPrecision",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(precision?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => number"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(locales?: string | string[], options?: NumberFormatOptions) => string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getGroupVerticalLine",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Partial<ArrayField<Record<string, string>, \"id\">>"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Partial<ArrayField<Record<string, string>, \"id\">>[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<Partial<ArrayField<Record<string, string>, \"id\">>>[]): Partial<ArrayField<Record<string, string>, \"id\">>[]; (...items: (Partial<ArrayField<Record<string, string>, \"id\">> | ConcatArray<...>)[]): Partial<...>[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Partial<ArrayField<Record<string, string>, \"id\">>[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Partial<ArrayField<Record<string, string>, \"id\">>"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => Partial<ArrayField<Record<string, string>, \"id\">>[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: Partial<ArrayField<Record<string, string>, \"id\">>, b: Partial<ArrayField<Record<string, string>, \"id\">>) => number) => Partial<ArrayField<Record<string, string>, \"id\">>[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): Partial<ArrayField<Record<string, string>, \"id\">>[]; (start: number, deleteCount: number, ...items: Partial<ArrayField<Record<string, string>, \"id\">>[]): Partial<...>[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Partial<ArrayField<Record<string, string>, \"id\">>[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Partial<ArrayField<Record<string, string>, \"id\">>, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Partial<ArrayField<Record<string, string>, \"id\">>, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Partial<ArrayField<Record<string, string>, \"id\">>, index: number, array: Partial<ArrayField<Record<string, string>, \"id\">>[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Partial<ArrayField<Record<string, string>, \"id\">>, index: number, array: Partial<ArrayField<Record<string, string>, \"id\">>[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Partial<ArrayField<Record<string, string>, \"id\">>, index: number, array: Partial<ArrayField<Record<string, string>, \"id\">>[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: Partial<ArrayField<Record<string, string>, \"id\">>, index: number, array: Partial<ArrayField<Record<string, string>, \"id\">>[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Partial<ArrayField<Record<string, string>, \"id\">>>(callbackfn: (value: Partial<ArrayField<Record<string, string>, \"id\">>, index: number, array: Partial<ArrayField<Record<string, string>, \"id\">>[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Partial<...>, index: number, array: Partial<...>[]..."
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Partial<ArrayField<Record<string, string>, \"id\">>, currentValue: Partial<ArrayField<Record<string, string>, \"id\">>, currentIndex: number, array: Partial<ArrayField<Record<string, string>, \"id\">>[]) => Partial<...>): Partial<...>; (callbackfn: (previousValue: Partial<...>, currentValue:..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Partial<ArrayField<Record<string, string>, \"id\">>, currentValue: Partial<ArrayField<Record<string, string>, \"id\">>, currentIndex: number, array: Partial<ArrayField<Record<string, string>, \"id\">>[]) => Partial<...>): Partial<...>; (callbackfn: (previousValue: Partial<...>, currentValue:..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Partial<ArrayField<Record<string, string>, \"id\">>>(predicate: (this: void, value: Partial<ArrayField<Record<string, string>, \"id\">>, index: number, obj: Partial<ArrayField<Record<string, string>, \"id\">>[]) => value is S, thisArg?: any): S; (predicate: (value: Partial<...>, index: number, obj: Partial<....."
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: Partial<ArrayField<Record<string, string>, \"id\">>, index: number, obj: Partial<ArrayField<Record<string, string>, \"id\">>[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: Partial<ArrayField<Record<string, string>, \"id\">>, start?: number, end?: number) => Partial<ArrayField<Record<string, string>, \"id\">>[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => Partial<ArrayField<Record<string, string>, \"id\">>[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Partial<ArrayField<Record<string, string>, \"id\">>>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, Partial<ArrayField<Record<string, string>, \"id\">>]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Partial<ArrayField<Record<string, string>, \"id\">>>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Partial<ArrayField<Record<string, string>, \"id\">>, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: Partial<ArrayField<Record<string, string>, \"id\">>, index: number, array: Partial<ArrayField<Record<string, string>, \"id\">>[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Segments/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Segments/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Segments",
          "methods": [],
          "props": {
            "viewMode": {
              "defaultValue": null,
              "description": "",
              "name": "viewMode",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "rules": {
              "defaultValue": null,
              "description": "",
              "name": "rules",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Rules"
              }
            },
            "onSubmit": {
              "defaultValue": null,
              "description": "",
              "name": "onSubmit",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(data: Rules) => void"
              }
            },
            "isSaving": {
              "defaultValue": null,
              "description": "",
              "name": "isSaving",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Segments/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/__tests__/Circles.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/interfaces/Circle.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/interfaces/CircleState.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/interfaces/CirclesPagination.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/state/actions.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "loadedCirclesAction",
          "methods": [],
          "props": {
            "content": {
              "defaultValue": null,
              "description": "",
              "name": "content",
              "declarations": [],
              "required": true,
              "type": {
                "name": "CirclePaginationItem[]"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "totalPages": {
              "defaultValue": null,
              "description": "",
              "name": "totalPages",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "last": {
              "defaultValue": null,
              "description": "",
              "name": "last",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "loadedCircleAction",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "author": {
              "defaultValue": null,
              "description": "",
              "name": "author",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Author"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "deployment": {
              "defaultValue": null,
              "description": "",
              "name": "deployment",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Deployment"
              }
            },
            "rules": {
              "defaultValue": null,
              "description": "",
              "name": "rules",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "matcherType": {
              "defaultValue": null,
              "description": "",
              "name": "matcherType",
              "declarations": [],
              "required": false,
              "type": {
                "name": "MatcherType"
              }
            },
            "percentage": {
              "defaultValue": null,
              "description": "",
              "name": "percentage",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "default": {
              "defaultValue": null,
              "description": "",
              "name": "default",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "loadedCirclesMetricsAction",
          "methods": [],
          "props": {
            "content": {
              "defaultValue": null,
              "description": "",
              "name": "content",
              "declarations": [],
              "required": true,
              "type": {
                "name": "CirclePaginationItem[]"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "totalPages": {
              "defaultValue": null,
              "description": "",
              "name": "totalPages",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "last": {
              "defaultValue": null,
              "description": "",
              "name": "last",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "updateCirclesAction",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Circle"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Circle[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<Circle>[]): Circle[]; (...items: (Circle | ConcatArray<Circle>)[]): Circle[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Circle[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Circle"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => Circle[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: Circle, b: Circle) => number) => Circle[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): Circle[]; (start: number, deleteCount: number, ...items: Circle[]): Circle[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Circle[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Circle, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Circle, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Circle, index: number, array: Circle[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Circle, index: number, array: Circle[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Circle, index: number, array: Circle[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: Circle, index: number, array: Circle[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Circle>(callbackfn: (value: Circle, index: number, array: Circle[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Circle, index: number, array: Circle[]) => unknown, thisArg?: any): Circle[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Circle, currentValue: Circle, currentIndex: number, array: Circle[]) => Circle): Circle; (callbackfn: (previousValue: Circle, currentValue: Circle, currentIndex: number, array: Circle[]) => Circle, initialValue: Circle): Circle; <U>(callbackfn: (previousValue: U, currentValue: Circle, ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Circle, currentValue: Circle, currentIndex: number, array: Circle[]) => Circle): Circle; (callbackfn: (previousValue: Circle, currentValue: Circle, currentIndex: number, array: Circle[]) => Circle, initialValue: Circle): Circle; <U>(callbackfn: (previousValue: U, currentValue: Circle, ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Circle>(predicate: (this: void, value: Circle, index: number, obj: Circle[]) => value is S, thisArg?: any): S; (predicate: (value: Circle, index: number, obj: Circle[]) => unknown, thisArg?: any): Circle; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: Circle, index: number, obj: Circle[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: Circle, start?: number, end?: number) => Circle[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => Circle[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Circle>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, Circle]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Circle>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Circle, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: Circle, index: number, array: Circle[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/state/reducer.ts",
      "value": []
    },
    {
      "key": "src/modules/Error/403/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Error/404/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Groups/Menu/MenuItem.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MenuItem",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "isActive": {
              "defaultValue": null,
              "description": "",
              "name": "isActive",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "onSelect": {
              "defaultValue": null,
              "description": "",
              "name": "onSelect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(id: string) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Groups/Menu/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Menu",
          "methods": [],
          "props": {
            "onCreate": {
              "defaultValue": null,
              "description": "",
              "name": "onCreate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "onSelect": {
              "defaultValue": null,
              "description": "",
              "name": "onSelect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(id: string) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Groups/Menu/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/Placeholder/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Groups/Placeholder/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/Tabs/Tab.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Tab",
          "methods": [],
          "props": {
            "param": {
              "defaultValue": null,
              "description": "",
              "name": "param",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Groups/Tabs/helpers.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/Tabs/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Groups/Tabs/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/__tests__/GroupsComponents.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Groups/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/__tests__/hooks.spec.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/__tests__/reducer.spec.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/interfaces/UserChecked.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/interfaces/UserGroupState.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/interfaces/UserGroups.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/interfaces/UserGroupsPagination.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/state/actions.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "loadUserGroupsAction",
          "methods": [],
          "props": {
            "content": {
              "defaultValue": null,
              "description": "",
              "name": "content",
              "declarations": [],
              "required": true,
              "type": {
                "name": "UserGroup[]"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "totalPages": {
              "defaultValue": null,
              "description": "",
              "name": "totalPages",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "last": {
              "defaultValue": null,
              "description": "",
              "name": "last",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "loadUserGroupAction",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "author": {
              "defaultValue": null,
              "description": "",
              "name": "author",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Author"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "users": {
              "defaultValue": null,
              "description": "",
              "name": "users",
              "declarations": [],
              "required": true,
              "type": {
                "name": "User[]"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "updateUserGroupAction",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "author": {
              "defaultValue": null,
              "description": "",
              "name": "author",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Author"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "users": {
              "defaultValue": null,
              "description": "",
              "name": "users",
              "declarations": [],
              "required": true,
              "type": {
                "name": "User[]"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Groups/state/reducer.ts",
      "value": []
    },
    {
      "key": "src/modules/Main/Footer/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Main/Footer/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Main/Sidebar/Types.ts",
      "value": []
    },
    {
      "key": "src/modules/Main/Sidebar/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "getExpandIcon",
          "methods": [],
          "props": {
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Main/Sidebar/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Sidebar",
          "methods": [],
          "props": {
            "isExpanded": {
              "defaultValue": null,
              "description": "",
              "name": "isExpanded",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "onClickExpand": {
              "defaultValue": null,
              "description": "",
              "name": "onClickExpand",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: ExpandClick) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Main/Sidebar/styled.tsx",
      "value": []
    },
    {
      "key": "src/modules/Main/__tests__/Main.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/ChartMenu.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ChartMenu",
          "methods": [],
          "props": {
            "onReset": {
              "defaultValue": null,
              "description": "",
              "name": "onReset",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Deploys/CircleFilter.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "CircleFilter",
          "methods": [],
          "props": {
            "control": {
              "defaultValue": null,
              "description": "",
              "name": "control",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Control<unknown>"
              }
            },
            "setValue": {
              "defaultValue": null,
              "description": "",
              "name": "setValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Deploys/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/deploy.options.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "getDeploySeries",
          "methods": [],
          "props": {
            "successfulDeployments": {
              "defaultValue": null,
              "description": "",
              "name": "successfulDeployments",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "failedDeployments": {
              "defaultValue": null,
              "description": "",
              "name": "failedDeployments",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "successfulDeploymentsAverageTime": {
              "defaultValue": null,
              "description": "",
              "name": "successfulDeploymentsAverageTime",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "successfulDeploymentsInPeriod": {
              "defaultValue": null,
              "description": "",
              "name": "successfulDeploymentsInPeriod",
              "declarations": [],
              "required": true,
              "type": {
                "name": "MetricDataInPeriod[]"
              }
            },
            "failedDeploymentsInPeriod": {
              "defaultValue": null,
              "description": "",
              "name": "failedDeploymentsInPeriod",
              "declarations": [],
              "required": true,
              "type": {
                "name": "MetricDataInPeriod[]"
              }
            },
            "deploymentsAverageTimeInPeriod": {
              "defaultValue": null,
              "description": "",
              "name": "deploymentsAverageTimeInPeriod",
              "declarations": [],
              "required": true,
              "type": {
                "name": "MetricDataInPeriod[]"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "chartDateFormatter",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getPlotOption",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => any"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: any[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<any>[]): any[]; (...items: any[]): any[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => any[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => any"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => any[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: any, b: any) => number) => any[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): any[]; (start: number, deleteCount: number, ...items: any[]): any[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: any[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: any, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: any, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: any, index: number, array: any[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: any, index: number, array: any[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: any, index: number, array: any[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends any>(callbackfn: (value: any, index: number, array: any[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: any, index: number, array: any[]) => unknown, thisArg?: any): any[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any; (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any; <U>(callbackfn: (previousValue: U, currentValue: any, currentIndex: number, array: any[]) ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any; (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any; <U>(callbackfn: (previousValue: U, currentValue: any, currentIndex: number, array: any[]) ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends any>(predicate: (this: void, value: any, index: number, obj: any[]) => value is S, thisArg?: any): S; (predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): any; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: any, start?: number, end?: number) => any[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => any[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<any>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, any]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<any>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: any, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: any, index: number, array: any[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Deploys/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Loaders/card.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Loaders/circleAverageTime.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Loaders/circlesCard.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Loaders/history.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Loaders/legend.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Loaders/releases.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Menu/MenuItem.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MenuItem",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "route": {
              "defaultValue": null,
              "description": "",
              "name": "route",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Menu/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Menu/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Menu/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/__tests__/Helpers.spec.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/__tests__/Metrics.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/Tab.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Tab",
          "methods": [],
          "props": {
            "param": {
              "defaultValue": null,
              "description": "",
              "name": "param",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Modules/Comparation/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "resolveParams",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "pathModuleById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Modules/Comparation/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/Menu/MenuItem.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MenuItem",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Modules/Menu/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "moduleFormatterName",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "validName",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Modules/Menu/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/Menu/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/Placeholder/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/hooks/component.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/hooks/module.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "useDeleteModule",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "author": {
              "defaultValue": null,
              "description": "",
              "name": "author",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Author"
              }
            },
            "components": {
              "defaultValue": null,
              "description": "",
              "name": "components",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Component[]"
              }
            },
            "gitRepositoryAddress": {
              "defaultValue": null,
              "description": "",
              "name": "gitRepositoryAddress",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "helmRepository": {
              "defaultValue": null,
              "description": "",
              "name": "helmRepository",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Modules/state/actions.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "loadModulesAction",
          "methods": [],
          "props": {
            "content": {
              "defaultValue": null,
              "description": "",
              "name": "content",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Module[]"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "totalPages": {
              "defaultValue": null,
              "description": "",
              "name": "totalPages",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "last": {
              "defaultValue": null,
              "description": "",
              "name": "last",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "loadModuleAction",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "author": {
              "defaultValue": null,
              "description": "",
              "name": "author",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Author"
              }
            },
            "components": {
              "defaultValue": null,
              "description": "",
              "name": "components",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Component[]"
              }
            },
            "gitRepositoryAddress": {
              "defaultValue": null,
              "description": "",
              "name": "gitRepositoryAddress",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "helmRepository": {
              "defaultValue": null,
              "description": "",
              "name": "helmRepository",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "loadComponentAction",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "latencyThreshold": {
              "defaultValue": null,
              "description": "",
              "name": "latencyThreshold",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "errorThreshold": {
              "defaultValue": null,
              "description": "",
              "name": "errorThreshold",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "hostValue": {
              "defaultValue": null,
              "description": "",
              "name": "hostValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "gatewayName": {
              "defaultValue": null,
              "description": "",
              "name": "gatewayName",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Modules/state/reducer.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/interfaces/Component.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/interfaces/Helm.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/interfaces/Module.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/interfaces/ModulePagination.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/interfaces/ModuleState.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Credentials",
          "methods": [],
          "props": {
            "onClickHelp": {
              "defaultValue": null,
              "description": "",
              "name": "onClickHelp",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(status: boolean) => void"
              }
            },
            "onChangeWorkspace": {
              "defaultValue": null,
              "description": "",
              "name": "onChangeWorkspace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Menu/MenuItem.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MenuItem",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "path": {
              "defaultValue": null,
              "description": "",
              "name": "path",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Menu/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Menu",
          "methods": [],
          "props": {
            "items": {
              "defaultValue": null,
              "description": "",
              "name": "items",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any[]"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Menu/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Workspaces/helpers.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/__tests__/Settings.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Tab.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Tab",
          "methods": [],
          "props": {
            "param": {
              "defaultValue": null,
              "description": "",
              "name": "param",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "resolveParams",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "pathModuleById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Menu/MenuItem.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MenuItem",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Menu/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Menu/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Placeholder/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/__tests__/Tokens.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/interfaces/TokenPagination.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/Comparation/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Comparation",
          "methods": [],
          "props": {
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(userStatus: string) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Users/Comparation/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/Create/Form.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Form",
          "methods": [],
          "props": {
            "onFinish": {
              "defaultValue": null,
              "description": "",
              "name": "onFinish",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(createUserStatus: string) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Users/Create/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Create",
          "methods": [],
          "props": {
            "onFinish": {
              "defaultValue": null,
              "description": "",
              "name": "onFinish",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(createUserStatus: string) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Users/Create/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/state/actions.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "loadedTokens",
          "methods": [],
          "props": {
            "content": {
              "defaultValue": null,
              "description": "",
              "name": "content",
              "declarations": [],
              "required": true,
              "type": {
                "name": "TokenPaginationItem[]"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "totalPages": {
              "defaultValue": null,
              "description": "",
              "name": "totalPages",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "last": {
              "defaultValue": null,
              "description": "",
              "name": "last",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "updateTokens",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "permissions": {
              "defaultValue": null,
              "description": "",
              "name": "permissions",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string[]"
              }
            },
            "workspaces": {
              "defaultValue": null,
              "description": "",
              "name": "workspaces",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string[]"
              }
            },
            "allWorkspaces": {
              "defaultValue": null,
              "description": "",
              "name": "allWorkspaces",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "token": {
              "defaultValue": null,
              "description": "",
              "name": "token",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "author": {
              "defaultValue": null,
              "description": "",
              "name": "author",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "revoked": {
              "defaultValue": null,
              "description": "",
              "name": "revoked",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "created_at": {
              "defaultValue": null,
              "description": "",
              "name": "created_at",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "revoked_at": {
              "defaultValue": null,
              "description": "",
              "name": "revoked_at",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "last_used_at": {
              "defaultValue": null,
              "description": "",
              "name": "last_used_at",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/state/reducer.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/Menu/MenuItem.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MenuItem",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "email": {
              "defaultValue": null,
              "description": "",
              "name": "email",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Users/Menu/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Menu",
          "methods": [],
          "props": {
            "onSearch": {
              "defaultValue": null,
              "description": "",
              "name": "onSearch",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Users/Menu/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/__tests__/Users.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Users/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/__tests__/hooks.spec.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/interfaces/User.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/interfaces/UserPagination.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/interfaces/UserState.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/state/actions.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "LoadedUsersAction",
          "methods": [],
          "props": {
            "content": {
              "defaultValue": null,
              "description": "",
              "name": "content",
              "declarations": [],
              "required": true,
              "type": {
                "name": "UserPaginationItem[]"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "totalPages": {
              "defaultValue": null,
              "description": "",
              "name": "totalPages",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "last": {
              "defaultValue": null,
              "description": "",
              "name": "last",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "LoadedUserAction",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "workspaces": {
              "defaultValue": null,
              "description": "",
              "name": "workspaces",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Workspace[]"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "root": {
              "defaultValue": null,
              "description": "",
              "name": "root",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "photoUrl": {
              "defaultValue": null,
              "description": "",
              "name": "photoUrl",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "email": {
              "defaultValue": null,
              "description": "",
              "name": "email",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Users/state/reducer.ts",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/Menu/MenuItem.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MenuItem",
          "methods": [],
          "props": {
            "workspace": {
              "defaultValue": null,
              "description": "",
              "name": "workspace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Workspace"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Workspaces/Menu/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Menu",
          "methods": [],
          "props": {
            "onCreate": {
              "defaultValue": null,
              "description": "",
              "name": "onCreate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Workspaces/Menu/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/__tests__/Workspaces.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/interfaces/Workspace.ts",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/interfaces/WorkspacePagination.ts",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/interfaces/WorkspaceState.ts",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/state/actions.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "loadedWorkspacesAction",
          "methods": [],
          "props": {
            "content": {
              "defaultValue": null,
              "description": "",
              "name": "content",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Workspace[]"
              }
            },
            "page": {
              "defaultValue": null,
              "description": "",
              "name": "page",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "totalPages": {
              "defaultValue": null,
              "description": "",
              "name": "totalPages",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "last": {
              "defaultValue": null,
              "description": "",
              "name": "last",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "loadedWorkspaceAction",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "status": {
              "defaultValue": null,
              "description": "",
              "name": "status",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "circleMatcherUrl": {
              "defaultValue": null,
              "description": "",
              "name": "circleMatcherUrl",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "gitConfiguration": {
              "defaultValue": null,
              "description": "",
              "name": "gitConfiguration",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Configuration"
              }
            },
            "userGroups": {
              "defaultValue": null,
              "description": "",
              "name": "userGroups",
              "declarations": [],
              "required": false,
              "type": {
                "name": "UserGroup[]"
              }
            },
            "deploymentConfiguration": {
              "defaultValue": null,
              "description": "",
              "name": "deploymentConfiguration",
              "declarations": [],
              "required": false,
              "type": {
                "name": "DeploymentConfiguration"
              }
            },
            "metricConfiguration": {
              "defaultValue": null,
              "description": "",
              "name": "metricConfiguration",
              "declarations": [],
              "required": false,
              "type": {
                "name": "MetricConfiguration"
              }
            },
            "registryConfiguration": {
              "defaultValue": null,
              "description": "",
              "name": "registryConfiguration",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Configuration"
              }
            },
            "permissions": {
              "defaultValue": null,
              "description": "",
              "name": "permissions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string[]"
              }
            },
            "webhookConfiguration": {
              "defaultValue": null,
              "description": "",
              "name": "webhookConfiguration",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Webhook[]"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "loadedWorkspacePermissionsAction",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: string[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: string, b: string) => number) => string[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: string[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends string>(predicate: (this: void, value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: string, start?: number, end?: number) => string[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => string[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, string]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "statusWorkspaceAction",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Workspaces/state/reducer.ts",
      "value": []
    },
    {
      "key": "src/core/assets/style/__tests__/global.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/assets/themes/button/default.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/button/index.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/button/rounded.ts",
      "value": []
    },
    {
      "key": "src/core/components/AceEditor/__tests__/AceEditor.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/assets/themes/card/board.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/card/circle.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/card/config.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/card/expand.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/card/index.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/card/main.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/card/message.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/card/release.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/card/role.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/modal/default.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/modal/index.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/modal/trigger.ts",
      "value": []
    },
    {
      "key": "src/core/assets/themes/modal/wizard.ts",
      "value": []
    },
    {
      "key": "src/core/components/Avatar/__tests__/Avatar.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/AvatarName/__tests__/AvatarName.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Badge/__tests__/Badge.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Button/Default/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Default",
          "methods": [],
          "props": {
            "onClick": {
              "defaultValue": null,
              "description": "",
              "name": "onClick",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": false,
              "type": {
                "name": "\"EXTRA_SMALL\" | \"SMALL\" | \"LARGE\" | \"EXTRA_LARGE\""
              }
            },
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "type": {
              "defaultValue": null,
              "description": "",
              "name": "type",
              "declarations": [],
              "required": false,
              "type": {
                "name": "\"button\" | \"reset\" | \"submit\""
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Button/Default/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Button/Rounded/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Rounded",
          "methods": [],
          "props": {
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onClick": {
              "defaultValue": null,
              "description": "",
              "name": "onClick",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "color": {
              "defaultValue": null,
              "description": "",
              "name": "color",
              "declarations": [],
              "required": false,
              "type": {
                "name": "\"error\" | \"dark\" | \"light\" | \"success\" | \"primary\" | \"medium\""
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "backgroundColor": {
              "defaultValue": null,
              "description": "",
              "name": "backgroundColor",
              "declarations": [],
              "required": false,
              "type": {
                "name": "\"default\" | \"primary\""
              }
            },
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": false,
              "type": {
                "name": "\"default\" | \"small\" | \"medium\""
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Button/Rounded/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Card/Base/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Base",
          "methods": [],
          "props": {
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "onClick": {
              "defaultValue": null,
              "description": "",
              "name": "onClick",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLDivElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Card/Base/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Card/Body/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Body",
          "methods": [],
          "props": {
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "onClick": {
              "defaultValue": null,
              "description": "",
              "name": "onClick",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Card/Body/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Card/Circle/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Circle",
          "methods": [],
          "props": {
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "iconColor": {
              "defaultValue": null,
              "description": "",
              "name": "iconColor",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "description": {
              "defaultValue": null,
              "description": "",
              "name": "description",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "action": {
              "defaultValue": null,
              "description": "",
              "name": "action",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "footer": {
              "defaultValue": null,
              "description": "",
              "name": "footer",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "onClick": {
              "defaultValue": null,
              "description": "",
              "name": "onClick",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Function"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLDivElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Card/Circle/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Card/Config/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Config",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "description": {
              "defaultValue": null,
              "description": "",
              "name": "description",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "actions": {
              "defaultValue": null,
              "description": "",
              "name": "actions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "onClick": {
              "defaultValue": null,
              "description": "",
              "name": "onClick",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void"
              }
            },
            "onClose": {
              "defaultValue": null,
              "description": "",
              "name": "onClose",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: MouseEvent<unknown, MouseEvent>) => void"
              }
            },
            "canClose": {
              "defaultValue": null,
              "description": "",
              "name": "canClose",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Card/Config/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Card/Expand/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Expand",
          "methods": [],
          "props": {
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "onClick": {
              "defaultValue": null,
              "description": "",
              "name": "onClick",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Card/Expand/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Card/Header/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Header",
          "methods": [],
          "props": {
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "action": {
              "defaultValue": null,
              "description": "",
              "name": "action",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Card/Header/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Card/Main/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Main",
          "methods": [],
          "props": {
            "color": {
              "defaultValue": null,
              "description": "",
              "name": "color",
              "declarations": [],
              "required": false,
              "type": {
                "name": "\"error\" | \"dark\" | \"success\" | \"primary\""
              }
            },
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "description": {
              "defaultValue": null,
              "description": "",
              "name": "description",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "width": {
              "defaultValue": null,
              "description": "",
              "name": "width",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "header": {
              "defaultValue": null,
              "description": "",
              "name": "header",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "action": {
              "defaultValue": null,
              "description": "",
              "name": "action",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Card/Main/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Card/Release/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Release",
          "methods": [],
          "props": {
            "status": {
              "defaultValue": null,
              "description": "",
              "name": "status",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "description": {
              "defaultValue": null,
              "description": "",
              "name": "description",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "action": {
              "defaultValue": null,
              "description": "",
              "name": "action",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "expandItems": {
              "defaultValue": null,
              "description": "",
              "name": "expandItems",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Artifact[]"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLDivElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Card/Release/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Card/Role/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Role",
          "methods": [],
          "props": {
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Card/Role/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Card/__tests__/Card.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Charts/Area/config.ts",
      "value": []
    },
    {
      "key": "src/core/components/Charts/Area/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Area",
          "methods": [],
          "props": {
            "series": {
              "defaultValue": null,
              "description": "",
              "name": "series",
              "declarations": [],
              "required": true,
              "type": {
                "name": "object[]"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": false,
              "type": {
                "name": "object"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "width": {
              "defaultValue": null,
              "description": "",
              "name": "width",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            },
            "height": {
              "defaultValue": null,
              "description": "",
              "name": "height",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Charts/Area/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Charts/Column/config.ts",
      "value": []
    },
    {
      "key": "src/core/components/Charts/Column/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Column",
          "methods": [],
          "props": {
            "series": {
              "defaultValue": null,
              "description": "",
              "name": "series",
              "declarations": [],
              "required": true,
              "type": {
                "name": "object[]"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": false,
              "type": {
                "name": "object"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "width": {
              "defaultValue": null,
              "description": "",
              "name": "width",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            },
            "height": {
              "defaultValue": null,
              "description": "",
              "name": "height",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Charts/Column/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Charts/Mixed/config.ts",
      "value": []
    },
    {
      "key": "src/core/components/Charts/Mixed/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Mixed",
          "methods": [],
          "props": {
            "series": {
              "defaultValue": null,
              "description": "",
              "name": "series",
              "declarations": [],
              "required": true,
              "type": {
                "name": "object[]"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": false,
              "type": {
                "name": "object"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "width": {
              "defaultValue": null,
              "description": "",
              "name": "width",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            },
            "height": {
              "defaultValue": null,
              "description": "",
              "name": "height",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Charts/Mixed/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/ConnectionStatus/__tests__/ConnectionStatus.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/ContentIcon/__tests__/ContentIcon.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/DocumentationLink/__tests__/DocumentationLink.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Dropdown/Item/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Item",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onClick": {
              "defaultValue": null,
              "description": "",
              "name": "onClick",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: MouseEvent<Element, MouseEvent>) => void"
              }
            },
            "onSelect": {
              "defaultValue": null,
              "description": "",
              "name": "onSelect",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(name: string) => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "isInactive": {
              "defaultValue": null,
              "description": "",
              "name": "isInactive",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "tooltip": {
              "defaultValue": null,
              "description": "",
              "name": "tooltip",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Dropdown/Item/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Dropdown/__tests__/Dropdown.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/AceEditor/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "AceEditor",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "control": {
              "defaultValue": null,
              "description": "",
              "name": "control",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Control<any>"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "mode": {
              "defaultValue": null,
              "description": "",
              "name": "mode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "rules": {
              "defaultValue": null,
              "description": "",
              "name": "rules",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Partial<{ required: string | boolean; }>"
              }
            },
            "placeholder": {
              "defaultValue": null,
              "description": "",
              "name": "placeholder",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Checkbox/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Checkbox",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "value": {
              "defaultValue": null,
              "description": "",
              "name": "value",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "description": {
              "defaultValue": null,
              "description": "",
              "name": "description",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "disabled": {
              "defaultValue": null,
              "description": "",
              "name": "disabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "defaultChecked": {
              "defaultValue": null,
              "description": "",
              "name": "defaultChecked",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(value: boolean) => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLInputElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Checkbox/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Input/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Input",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "resume": {
              "defaultValue": null,
              "description": "",
              "name": "resume",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "readOnly": {
              "defaultValue": null,
              "description": "",
              "name": "readOnly",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "type": {
              "defaultValue": null,
              "description": "",
              "name": "type",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "tipTitle": {
              "defaultValue": null,
              "description": "",
              "name": "tipTitle",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "tipDescription": {
              "defaultValue": null,
              "description": "",
              "name": "tipDescription",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "maxLength": {
              "defaultValue": null,
              "description": "",
              "name": "maxLength",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "autoComplete": {
              "defaultValue": null,
              "description": "",
              "name": "autoComplete",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: ChangeEvent<HTMLInputElement>) => void"
              }
            },
            "onKeyPress": {
              "defaultValue": null,
              "description": "",
              "name": "onKeyPress",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: KeyboardEvent<HTMLInputElement>) => void"
              }
            },
            "onClick": {
              "defaultValue": null,
              "description": "",
              "name": "onClick",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: MouseEvent<HTMLInputElement, MouseEvent>) => void"
              }
            },
            "placeholder": {
              "defaultValue": null,
              "description": "",
              "name": "placeholder",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "disabled": {
              "defaultValue": null,
              "description": "",
              "name": "disabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "hasError": {
              "defaultValue": null,
              "description": "",
              "name": "hasError",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "error": {
              "defaultValue": null,
              "description": "",
              "name": "error",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "onFocus": {
              "defaultValue": null,
              "description": "",
              "name": "onFocus",
              "declarations": [],
              "required": false,
              "type": {
                "name": "((event: FocusEvent<HTMLInputElement>) => void) & Function"
              }
            },
            "onBlur": {
              "defaultValue": null,
              "description": "",
              "name": "onBlur",
              "declarations": [],
              "required": false,
              "type": {
                "name": "((event: FocusEvent<HTMLInputElement>) => void) & Function"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLInputElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Input/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/InputAction/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "InputAction",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "iconColor": {
              "defaultValue": null,
              "description": "",
              "name": "iconColor",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onClick": {
              "defaultValue": null,
              "description": "",
              "name": "onClick",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/InputAction/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/InputFile/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "InputFile",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLInputElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/InputFile/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/InputGroup/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "InputGroup",
          "methods": [],
          "props": {
            "maxLength": {
              "defaultValue": null,
              "description": "",
              "name": "maxLength",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "prepend": {
              "defaultValue": null,
              "description": "",
              "name": "prepend",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "append": {
              "defaultValue": null,
              "description": "",
              "name": "append",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLInputElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/InputGroup/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/InputPhoto/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "InputPhoto",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "resume": {
              "defaultValue": null,
              "description": "",
              "name": "resume",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "disabled": {
              "defaultValue": null,
              "description": "",
              "name": "disabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onFocus": {
              "defaultValue": null,
              "description": "",
              "name": "onFocus",
              "declarations": [],
              "required": false,
              "type": {
                "name": "((event: FocusEvent<HTMLInputElement>) => void) & Function"
              }
            },
            "onBlur": {
              "defaultValue": null,
              "description": "",
              "name": "onBlur",
              "declarations": [],
              "required": false,
              "type": {
                "name": "((event: FocusEvent<HTMLInputElement>) => void) & Function"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: ChangeEvent<HTMLInputElement>) => void"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLInputElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/InputPhoto/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/InputTitle/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "InputTitle",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "placeholder": {
              "defaultValue": null,
              "description": "",
              "name": "placeholder",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "resume": {
              "defaultValue": null,
              "description": "",
              "name": "resume",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "readOnly": {
              "defaultValue": null,
              "description": "",
              "name": "readOnly",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onClickSave": {
              "defaultValue": null,
              "description": "",
              "name": "onClickSave",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => void"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "error": {
              "defaultValue": null,
              "description": "",
              "name": "error",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "buttonText": {
              "defaultValue": null,
              "description": "",
              "name": "buttonText",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLInputElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/InputTitle/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Link/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Link",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Link/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Number/helper.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "isNumber",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Number/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Number",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "max": {
              "defaultValue": null,
              "description": "",
              "name": "max",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "placeholder": {
              "defaultValue": null,
              "description": "",
              "name": "placeholder",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "maxLength": {
              "defaultValue": null,
              "description": "",
              "name": "maxLength",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "error": {
              "defaultValue": null,
              "description": "",
              "name": "error",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "disabled": {
              "defaultValue": null,
              "description": "",
              "name": "disabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLInputElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Number/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Password/constants.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Password/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Password",
          "methods": [],
          "props": {
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLInputElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Password/styled.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Radio/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Radio",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "value": {
              "defaultValue": null,
              "description": "",
              "name": "value",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "defaultChecked": {
              "defaultValue": null,
              "description": "",
              "name": "defaultChecked",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLInputElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Radio/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/SearchInput/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "SearchInput",
          "methods": [],
          "props": {
            "onSearch": {
              "defaultValue": null,
              "description": "",
              "name": "onSearch",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: string) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/SearchInput/styled.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/FloatingLabel.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "FloatingLabel",
          "methods": [],
          "props": {
            "clearValue": {
              "defaultValue": null,
              "description": "",
              "name": "clearValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "cx": {
              "defaultValue": null,
              "description": "",
              "name": "cx",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: { [key: string]: boolean; }, className: string) => string"
              }
            },
            "getStyles": {
              "defaultValue": null,
              "description": "",
              "name": "getStyles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, props: any) => {}"
              }
            },
            "getValue": {
              "defaultValue": null,
              "description": "",
              "name": "getValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => readonly OptionTypeBase[]"
              }
            },
            "hasValue": {
              "defaultValue": null,
              "description": "Whether the value container currently holds a value.",
              "name": "hasValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isMulti": {
              "defaultValue": null,
              "description": "Set when the value container should hold multiple values",
              "name": "isMulti",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": true,
              "type": {
                "name": "readonly OptionTypeBase[]"
              }
            },
            "selectOption": {
              "defaultValue": null,
              "description": "",
              "name": "selectOption",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(option: OptionTypeBase) => void"
              }
            },
            "selectProps": {
              "defaultValue": null,
              "description": "",
              "name": "selectProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Props<OptionTypeBase, false>"
              }
            },
            "setValue": {
              "defaultValue": null,
              "description": "",
              "name": "setValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: OptionTypeBase, action: ActionTypes) => void"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "The children to be rendered.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReactNode"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/customStyle.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/index.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/interfaces.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/TextArea/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "TextArea",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "resume": {
              "defaultValue": null,
              "description": "",
              "name": "resume",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "autoComplete": {
              "defaultValue": null,
              "description": "",
              "name": "autoComplete",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: ChangeEvent<HTMLTextAreaElement>) => void"
              }
            },
            "disabled": {
              "defaultValue": null,
              "description": "",
              "name": "disabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onFocus": {
              "defaultValue": null,
              "description": "",
              "name": "onFocus",
              "declarations": [],
              "required": false,
              "type": {
                "name": "((event: FocusEvent<HTMLTextAreaElement>) => void) & Function"
              }
            },
            "onBlur": {
              "defaultValue": null,
              "description": "",
              "name": "onBlur",
              "declarations": [],
              "required": false,
              "type": {
                "name": "((event: FocusEvent<HTMLTextAreaElement>) => void) & Function"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLTextAreaElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/TextArea/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/InfiniteScroll/__tests__/InfiniteScroll.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/LabeledIcon/__tests__/LabeledIcon.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Layer/__tests__/Layer.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Icon/__tests__/Icon.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Menu/__tests__/Menu.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Modal/Default/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Default",
          "methods": [],
          "props": {
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "isOpen": {
              "defaultValue": null,
              "description": "",
              "name": "isOpen",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onClose": {
              "defaultValue": null,
              "description": "",
              "name": "onClose",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "isOutsideClick": {
              "defaultValue": null,
              "description": "",
              "name": "isOutsideClick",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Modal/Default/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Modal/FullScreen/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "FullScreen",
          "methods": [],
          "props": {
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "isOpen": {
              "defaultValue": null,
              "description": "",
              "name": "isOpen",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onClose": {
              "defaultValue": null,
              "description": "",
              "name": "onClose",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(event?: MouseEvent<unknown, MouseEvent>) => void"
              }
            },
            "onCopy": {
              "defaultValue": null,
              "description": "",
              "name": "onCopy",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(event?: MouseEvent<unknown, MouseEvent>) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Modal/FullScreen/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Modal/Trigger/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Trigger",
          "methods": [],
          "props": {
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "dismissLabel": {
              "defaultValue": null,
              "description": "",
              "name": "dismissLabel",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "continueLabel": {
              "defaultValue": null,
              "description": "",
              "name": "continueLabel",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "onContinue": {
              "defaultValue": null,
              "description": "",
              "name": "onContinue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Function"
              }
            },
            "onDismiss": {
              "defaultValue": null,
              "description": "",
              "name": "onDismiss",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "ref": {
              "defaultValue": null,
              "description": "",
              "name": "ref",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Ref<HTMLDivElement>"
              }
            },
            "key": {
              "defaultValue": null,
              "description": "",
              "name": "key",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactText"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Modal/Trigger/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/NavTabs/__tests__/NavTabs.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Modal/Wizard/constants.ts",
      "value": []
    },
    {
      "key": "src/core/components/Modal/Wizard/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Wizard",
          "methods": [],
          "props": {
            "onClose": {
              "defaultValue": null,
              "description": "",
              "name": "onClose",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(enabled: boolean) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Modal/Wizard/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Notification/Log/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Log",
          "methods": [],
          "props": {
            "type": {
              "defaultValue": null,
              "description": "",
              "name": "type",
              "declarations": [],
              "required": true,
              "type": {
                "name": "\"error\" | \"warning\""
              }
            },
            "content": {
              "defaultValue": null,
              "description": "",
              "name": "content",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Notification/Log/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Notification/__tests__/Notification.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Notification/interfaces/Notification.ts",
      "value": []
    },
    {
      "key": "src/core/components/Notification/interfaces/NotificationState.ts",
      "value": []
    },
    {
      "key": "src/core/components/Notification/state/actions.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "toogleNotification",
          "methods": [],
          "props": {
            "isVisible": {
              "defaultValue": null,
              "description": "",
              "name": "isVisible",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "text": {
              "defaultValue": null,
              "description": "",
              "name": "text",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "status": {
              "defaultValue": null,
              "description": "",
              "name": "status",
              "declarations": [],
              "required": true,
              "type": {
                "name": "\"error\" | \"success\" | \"warning\""
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Notification/state/reducer.ts",
      "value": []
    },
    {
      "key": "src/core/components/Page/__tests__/Page.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Panel/Content/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Content",
          "methods": [],
          "props": {
            "size": {
              "defaultValue": null,
              "description": "",
              "name": "size",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Panel/Content/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Panel/Section/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Section",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/core/components/Panel/Section/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Placeholder/__tests__/Placeholder.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Popover/__tests__/Popover.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Radio/Buttons/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Buttons",
          "methods": [],
          "props": {
            "items": {
              "defaultValue": null,
              "description": "",
              "name": "items",
              "declarations": [],
              "required": true,
              "type": {
                "name": "RadioButtonProps[]"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: ChangeEvent<HTMLInputElement>) => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Radio/Buttons/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Radio/Cards/Item.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Item",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "RadioCard"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: ChangeEvent<HTMLInputElement>) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Radio/Cards/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Cards",
          "methods": [],
          "props": {
            "items": {
              "defaultValue": null,
              "description": "",
              "name": "items",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any[]"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: ChangeEvent<HTMLInputElement>) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Radio/Cards/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Summary/Item/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Item",
          "methods": [],
          "props": {
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "color": {
              "defaultValue": null,
              "description": "",
              "name": "color",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Summary/Item/styled.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Summary/__tests__/Summary.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/TabPanel/__tests__/TabPanel.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Text/__tests__/Text.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/providers/base/__tests__/base.spec.ts",
      "value": []
    },
    {
      "key": "src/core/providers/base/__tests__/hooks.spec.ts",
      "value": []
    },
    {
      "key": "src/modules/Account/Menu/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Account/Menu/Loaders/list.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Auth/Login/__tests__/Login.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Auth/Login/__tests__/hook.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/enums.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "pathCircleEditById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "pathCircleById",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "isDefaultCircle",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "isDeploying",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "isUndeploying",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "isBusy",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "hasDeploy",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "author": {
              "defaultValue": null,
              "description": "",
              "name": "author",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Author"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "deployment": {
              "defaultValue": null,
              "description": "",
              "name": "deployment",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Deployment"
              }
            },
            "rules": {
              "defaultValue": null,
              "description": "",
              "name": "rules",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "matcherType": {
              "defaultValue": null,
              "description": "",
              "name": "matcherType",
              "declarations": [],
              "required": false,
              "type": {
                "name": "MatcherType"
              }
            },
            "percentage": {
              "defaultValue": null,
              "description": "",
              "name": "percentage",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "default": {
              "defaultValue": null,
              "description": "",
              "name": "default",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "isUndeployable",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "author": {
              "defaultValue": null,
              "description": "",
              "name": "author",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Author"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "deployment": {
              "defaultValue": null,
              "description": "",
              "name": "deployment",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Deployment"
              }
            },
            "rules": {
              "defaultValue": null,
              "description": "",
              "name": "rules",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "matcherType": {
              "defaultValue": null,
              "description": "",
              "name": "matcherType",
              "declarations": [],
              "required": false,
              "type": {
                "name": "MatcherType"
              }
            },
            "percentage": {
              "defaultValue": null,
              "description": "",
              "name": "percentage",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "default": {
              "defaultValue": null,
              "description": "",
              "name": "default",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getTooltipMessage",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "author": {
              "defaultValue": null,
              "description": "",
              "name": "author",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Author"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "deployment": {
              "defaultValue": null,
              "description": "",
              "name": "deployment",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Deployment"
              }
            },
            "rules": {
              "defaultValue": null,
              "description": "",
              "name": "rules",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "matcherType": {
              "defaultValue": null,
              "description": "",
              "name": "matcherType",
              "declarations": [],
              "required": false,
              "type": {
                "name": "MatcherType"
              }
            },
            "percentage": {
              "defaultValue": null,
              "description": "",
              "name": "percentage",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "default": {
              "defaultValue": null,
              "description": "",
              "name": "default",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "circleCannotBeDeleted",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "author": {
              "defaultValue": null,
              "description": "",
              "name": "author",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Author"
              }
            },
            "createdAt": {
              "defaultValue": null,
              "description": "",
              "name": "createdAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "deployment": {
              "defaultValue": null,
              "description": "",
              "name": "deployment",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Deployment"
              }
            },
            "rules": {
              "defaultValue": null,
              "description": "",
              "name": "rules",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "matcherType": {
              "defaultValue": null,
              "description": "",
              "name": "matcherType",
              "declarations": [],
              "required": false,
              "type": {
                "name": "MatcherType"
              }
            },
            "percentage": {
              "defaultValue": null,
              "description": "",
              "name": "percentage",
              "declarations": [],
              "required": false,
              "type": {
                "name": "number"
              }
            },
            "default": {
              "defaultValue": null,
              "description": "",
              "name": "default",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Item",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(delCircleStatus: string) => void"
              }
            },
            "updateCircle": {
              "defaultValue": null,
              "description": "",
              "name": "updateCircle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "circlesListResponse": {
              "defaultValue": null,
              "description": "",
              "name": "circlesListResponse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "CirclePercentagePagination"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/__tests__/CirclesComparation.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Matcher/__tests__/Matcher.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Matcher/__tests__/ParametersForm.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Matcher/__tests__/ResultList.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Matcher/__tests__/helpers.spec.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Menu/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Menu/Loaders/list.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Menu/__tests__/MenuItem.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Release/Create/Module.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Module",
          "methods": [],
          "props": {
            "index": {
              "defaultValue": null,
              "description": "",
              "name": "index",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "onClose": {
              "defaultValue": null,
              "description": "",
              "name": "onClose",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "onError": {
              "defaultValue": null,
              "description": "",
              "name": "onError",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(hasError: boolean) => void"
              }
            },
            "isNotUnique": {
              "defaultValue": null,
              "description": "",
              "name": "isNotUnique",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "module": {
              "defaultValue": null,
              "description": "",
              "name": "module",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Partial<ArrayField<Record<string, string>, \"id\">>"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Release/Create/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "formatModuleOptions",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Module"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Module[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<Module>[]): Module[]; (...items: (Module | ConcatArray<Module>)[]): Module[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Module[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Module"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => Module[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: Module, b: Module) => number) => Module[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): Module[]; (start: number, deleteCount: number, ...items: Module[]): Module[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Module[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Module, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Module, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Module, index: number, array: Module[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Module, index: number, array: Module[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Module, index: number, array: Module[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: Module, index: number, array: Module[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Module>(callbackfn: (value: Module, index: number, array: Module[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Module, index: number, array: Module[]) => unknown, thisArg?: any): Module[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Module, currentValue: Module, currentIndex: number, array: Module[]) => Module): Module; (callbackfn: (previousValue: Module, currentValue: Module, currentIndex: number, array: Module[]) => Module, initialValue: Module): Module; <U>(callbackfn: (previousValue: U, currentValue: Module, ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Module, currentValue: Module, currentIndex: number, array: Module[]) => Module): Module; (callbackfn: (previousValue: Module, currentValue: Module, currentIndex: number, array: Module[]) => Module, initialValue: Module): Module; <U>(callbackfn: (previousValue: U, currentValue: Module, ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Module>(predicate: (this: void, value: Module, index: number, obj: Module[]) => value is S, thisArg?: any): S; (predicate: (value: Module, index: number, obj: Module[]) => unknown, thisArg?: any): Module; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: Module, index: number, obj: Module[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: Module, start?: number, end?: number) => Module[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => Module[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Module>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, Module]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Module>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Module, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: Module, index: number, array: Module[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "formatTagOptions",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Tag"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Tag[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<Tag>[]): Tag[]; (...items: (Tag | ConcatArray<Tag>)[]): Tag[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Tag[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Tag"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => Tag[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: Tag, b: Tag) => number) => Tag[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): Tag[]; (start: number, deleteCount: number, ...items: Tag[]): Tag[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Tag[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Tag, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Tag, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Tag, index: number, array: Tag[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Tag, index: number, array: Tag[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Tag, index: number, array: Tag[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: Tag, index: number, array: Tag[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Tag>(callbackfn: (value: Tag, index: number, array: Tag[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Tag, index: number, array: Tag[]) => unknown, thisArg?: any): Tag[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Tag, currentValue: Tag, currentIndex: number, array: Tag[]) => Tag): Tag; (callbackfn: (previousValue: Tag, currentValue: Tag, currentIndex: number, array: Tag[]) => Tag, initialValue: Tag): Tag; <U>(callbackfn: (previousValue: U, currentValue: Tag, currentIndex: number, array: Tag[]) ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Tag, currentValue: Tag, currentIndex: number, array: Tag[]) => Tag): Tag; (callbackfn: (previousValue: Tag, currentValue: Tag, currentIndex: number, array: Tag[]) => Tag, initialValue: Tag): Tag; <U>(callbackfn: (previousValue: U, currentValue: Tag, currentIndex: number, array: Tag[]) ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Tag>(predicate: (this: void, value: Tag, index: number, obj: Tag[]) => value is S, thisArg?: any): S; (predicate: (value: Tag, index: number, obj: Tag[]) => unknown, thisArg?: any): Tag; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: Tag, index: number, obj: Tag[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: Tag, start?: number, end?: number) => Tag[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => Tag[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Tag>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, Tag]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Tag>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Tag, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: Tag, index: number, array: Tag[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "checkIfComponentConflict",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Module"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Module[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<Module>[]): Module[]; (...items: (Module | ConcatArray<Module>)[]): Module[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Module[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Module"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => Module[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: Module, b: Module) => number) => Module[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): Module[]; (start: number, deleteCount: number, ...items: Module[]): Module[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Module[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Module, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Module, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Module, index: number, array: Module[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Module, index: number, array: Module[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Module, index: number, array: Module[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: Module, index: number, array: Module[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Module>(callbackfn: (value: Module, index: number, array: Module[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Module, index: number, array: Module[]) => unknown, thisArg?: any): Module[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Module, currentValue: Module, currentIndex: number, array: Module[]) => Module): Module; (callbackfn: (previousValue: Module, currentValue: Module, currentIndex: number, array: Module[]) => Module, initialValue: Module): Module; <U>(callbackfn: (previousValue: U, currentValue: Module, ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Module, currentValue: Module, currentIndex: number, array: Module[]) => Module): Module; (callbackfn: (previousValue: Module, currentValue: Module, currentIndex: number, array: Module[]) => Module, initialValue: Module): Module; <U>(callbackfn: (previousValue: U, currentValue: Module, ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Module>(predicate: (this: void, value: Module, index: number, obj: Module[]) => value is S, thisArg?: any): S; (predicate: (value: Module, index: number, obj: Module[]) => unknown, thisArg?: any): Module; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: Module, index: number, obj: Module[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: Module, start?: number, end?: number) => Module[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => Module[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Module>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, Module]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Module>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Module, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: Module, index: number, array: Module[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "validationResolver",
          "methods": [],
          "props": {
            "modules": {
              "defaultValue": null,
              "description": "",
              "name": "modules",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Module[]"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "formatDataModules",
          "methods": [],
          "props": {
            "modules": {
              "defaultValue": null,
              "description": "",
              "name": "modules",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Module[]"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "validFields",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "checkComponentAndVersionMaxLength",
          "methods": [],
          "props": {
            "tag": {
              "defaultValue": null,
              "description": "",
              "name": "tag",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Tag"
              }
            },
            "onError": {
              "defaultValue": null,
              "description": "",
              "name": "onError",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(error: boolean) => void"
              }
            },
            "setIsError": {
              "defaultValue": null,
              "description": "",
              "name": "setIsError",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(error: boolean) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Release/Create/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Create",
          "methods": [],
          "props": {
            "circleId": {
              "defaultValue": null,
              "description": "",
              "name": "circleId",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onDeployed": {
              "defaultValue": null,
              "description": "",
              "name": "onDeployed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(deploy: Deployment) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Release/Search/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "getBuildOptions",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Build"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Build[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<Build>[]): Build[]; (...items: (Build | ConcatArray<Build>)[]): Build[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Build[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Build"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => Build[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: Build, b: Build) => number) => Build[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): Build[]; (start: number, deleteCount: number, ...items: Build[]): Build[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Build[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Build, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Build, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Build, index: number, array: Build[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Build, index: number, array: Build[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Build, index: number, array: Build[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: Build, index: number, array: Build[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Build>(callbackfn: (value: Build, index: number, array: Build[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Build, index: number, array: Build[]) => unknown, thisArg?: any): Build[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Build, currentValue: Build, currentIndex: number, array: Build[]) => Build): Build; (callbackfn: (previousValue: Build, currentValue: Build, currentIndex: number, array: Build[]) => Build, initialValue: Build): Build; <U>(callbackfn: (previousValue: U, currentValue: Build, currentIndex..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Build, currentValue: Build, currentIndex: number, array: Build[]) => Build): Build; (callbackfn: (previousValue: Build, currentValue: Build, currentIndex: number, array: Build[]) => Build, initialValue: Build): Build; <U>(callbackfn: (previousValue: U, currentValue: Build, currentIndex..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Build>(predicate: (this: void, value: Build, index: number, obj: Build[]) => value is S, thisArg?: any): S; (predicate: (value: Build, index: number, obj: Build[]) => unknown, thisArg?: any): Build; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: Build, index: number, obj: Build[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: Build, start?: number, end?: number) => Build[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => Build[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Build>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, Build]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Build>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Build, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: Build, index: number, array: Build[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Release/Search/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Search",
          "methods": [],
          "props": {
            "circleId": {
              "defaultValue": null,
              "description": "",
              "name": "circleId",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onDeployed": {
              "defaultValue": null,
              "description": "",
              "name": "onDeployed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(deploy: Deployment) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Release/__tests__/Release.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Release/interfaces/Build.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Release/interfaces/Deployment.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Release/interfaces/Module.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Release/interfaces/Tag.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Segments/__tests__/Rule.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Segments/__tests__/Segments.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Error/403/__tests__/403.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Segments/interfaces/Clause.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Segments/interfaces/Rule.ts",
      "value": []
    },
    {
      "key": "src/modules/Error/404/__tests__/404.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Groups/Menu/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Groups/Menu/Loaders/list.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Groups/Menu/__tests__/Menu.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Groups/Menu/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/Tabs/Form/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Form",
          "methods": [],
          "props": {
            "userGroup": {
              "defaultValue": null,
              "description": "",
              "name": "userGroup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "UserGroup"
              }
            },
            "onEdit": {
              "defaultValue": null,
              "description": "",
              "name": "onEdit",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => void"
              }
            },
            "onAddUser": {
              "defaultValue": null,
              "description": "",
              "name": "onAddUser",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Groups/Tabs/Form/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/Tabs/Modal/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Modal",
          "methods": [],
          "props": {
            "users": {
              "defaultValue": null,
              "description": "",
              "name": "users",
              "declarations": [],
              "required": true,
              "type": {
                "name": "UserChecked[]"
              }
            },
            "isOpen": {
              "defaultValue": null,
              "description": "",
              "name": "isOpen",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "onClose": {
              "defaultValue": null,
              "description": "",
              "name": "onClose",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => void"
              }
            },
            "onSearch": {
              "defaultValue": null,
              "description": "",
              "name": "onSearch",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => void"
              }
            },
            "onSelected": {
              "defaultValue": null,
              "description": "",
              "name": "onSelected",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(changedUsers: ChangedUser[]) => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "isOutsideClick": {
              "defaultValue": null,
              "description": "",
              "name": "isOutsideClick",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Groups/Tabs/Modal/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Main/Footer/__tests__/Footer.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Main/Sidebar/MenuItems/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MenuItems",
          "methods": [],
          "props": {
            "isExpanded": {
              "defaultValue": null,
              "description": "",
              "name": "isExpanded",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "expandMenu": {
              "defaultValue": null,
              "description": "",
              "name": "expandMenu",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: ExpandClick) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Main/Sidebar/__tests__/Sidebar.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Main/Sidebar/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/History/CircleReleasesTable.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "CircleReleasesTable",
          "methods": [],
          "props": {
            "circleId": {
              "defaultValue": null,
              "description": "",
              "name": "circleId",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Circles/History/CircleRow.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "CircleRow",
          "methods": [],
          "props": {
            "circle": {
              "defaultValue": null,
              "description": "",
              "name": "circle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "CircleHistory"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Circles/History/ReleaseComponentsTable.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ReleaseComponentsTable",
          "methods": [],
          "props": {
            "components": {
              "defaultValue": null,
              "description": "",
              "name": "components",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReleaseComponent[]"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Circles/History/ReleaseRow.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ReleaseRow",
          "methods": [],
          "props": {
            "release": {
              "defaultValue": null,
              "description": "",
              "name": "release",
              "declarations": [],
              "required": true,
              "type": {
                "name": "CircleRelease"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Circles/History/Summary.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Summary",
          "methods": [],
          "props": {
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "onSearch": {
              "defaultValue": null,
              "description": "",
              "name": "onSearch",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Circles/History/SummaryRelease.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "SummaryRelease",
          "methods": [],
          "props": {
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Circles/History/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "getReleaseStatus",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Circles/History/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/History/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/Release/ReleaseComponentsTable.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ReleaseComponentsTable",
          "methods": [],
          "props": {
            "components": {
              "defaultValue": null,
              "description": "",
              "name": "components",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReleaseHistoryComponents[]"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Deploys/Release/ReleaseRow.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ReleaseRow",
          "methods": [],
          "props": {
            "release": {
              "defaultValue": null,
              "description": "",
              "name": "release",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReleaseHistory"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Deploys/Release/Summary.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Summary",
          "methods": [],
          "props": {
            "legend": {
              "defaultValue": null,
              "description": "",
              "name": "legend",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReleaseHistorySummary"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Deploys/Release/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/Release/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Release",
          "methods": [],
          "props": {
            "filter": {
              "defaultValue": null,
              "description": "",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReleaseHistoryRequest"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Metrics/Deploys/Release/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/__tests__/ChartMenu.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/__tests__/Deploys.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/__tests__/helpers.spec.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/Form/Component.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Component",
          "methods": [],
          "props": {
            "component": {
              "defaultValue": null,
              "description": "",
              "name": "component",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Component"
              }
            },
            "module": {
              "defaultValue": null,
              "description": "",
              "name": "module",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Module"
              }
            },
            "onClose": {
              "defaultValue": null,
              "description": "",
              "name": "onClose",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "onUpdate": {
              "defaultValue": null,
              "description": "",
              "name": "onUpdate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Modules/Comparation/Form/ComponentForm.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ComponentForm",
          "methods": [],
          "props": {
            "remove": {
              "defaultValue": null,
              "description": "",
              "name": "remove",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index?: number | number[]) => void"
              }
            },
            "field": {
              "defaultValue": null,
              "description": "",
              "name": "field",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Component"
              }
            },
            "fields": {
              "defaultValue": null,
              "description": "",
              "name": "fields",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Partial<ArrayField<Record<string, any>, \"id\">>"
              }
            },
            "index": {
              "defaultValue": null,
              "description": "",
              "name": "index",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Modules/Comparation/Form/Components.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Components",
          "methods": [],
          "props": {
            "fieldArray": {
              "defaultValue": null,
              "description": "",
              "name": "fieldArray",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ append: (value: Partial<ArrayField<Record<string, any>, \"id\">> | Partial<ArrayField<Record<string, any>, \"id\">>[]) => void; remove: (index?: number | number[]) => void; fields: Partial<...>; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Modules/Comparation/Form/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/Form/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "validFields",
          "methods": [],
          "props": {}
        },
        {
          "tags": {},
          "description": "",
          "displayName": "createGithubApi",
          "methods": [],
          "props": {
            "helmOrganization": {
              "defaultValue": null,
              "description": "",
              "name": "helmOrganization",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "helmRepository": {
              "defaultValue": null,
              "description": "",
              "name": "helmRepository",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "helmProjectId": {
              "defaultValue": null,
              "description": "",
              "name": "helmProjectId",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "helmPath": {
              "defaultValue": null,
              "description": "",
              "name": "helmPath",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "helmUrl": {
              "defaultValue": null,
              "description": "",
              "name": "helmUrl",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "helmBranch": {
              "defaultValue": null,
              "description": "",
              "name": "helmBranch",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "findGitProvider",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Modules/Comparation/Form/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Form",
          "methods": [],
          "props": {
            "module": {
              "defaultValue": null,
              "description": "",
              "name": "module",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Module"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Modules/Comparation/Form/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/Loaders/tab.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Modules/Comparation/View/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/View/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "View",
          "methods": [],
          "props": {
            "module": {
              "defaultValue": null,
              "description": "",
              "name": "module",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Module"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "onSelectComponent": {
              "defaultValue": null,
              "description": "",
              "name": "onSelectComponent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(component: Component) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Modules/Comparation/View/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/__tests__/Modules.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/__tests__/Tab.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/Menu/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/Menu/Loaders/list.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Modules/Menu/__tests__/Menu.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Loaders/tab.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Section/Layer.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Layer",
          "methods": [],
          "props": {
            "action": {
              "defaultValue": null,
              "description": "",
              "name": "action",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Section/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Section",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "action": {
              "defaultValue": null,
              "description": "",
              "name": "action",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"
              }
            },
            "showAction": {
              "defaultValue": null,
              "description": "",
              "name": "showAction",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "type": {
              "defaultValue": null,
              "description": "",
              "name": "type",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Section/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/__tests__/Credentials.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Menu/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Menu/Loaders/list.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Settings/Menu/__tests__/Menu.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Workspaces/interfaces/Workspace.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Workspaces/interfaces/WorkspacePagination.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Workspaces/interfaces/WorkspaceState.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Form",
          "methods": [],
          "props": {
            "mode": {
              "defaultValue": null,
              "description": "",
              "name": "mode",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Mode"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Token"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Loaders/tab.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/Modal/Regenerate.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Regenerate",
          "methods": [],
          "props": {
            "onClose": {
              "defaultValue": null,
              "description": "",
              "name": "onClose",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "onContinue": {
              "defaultValue": null,
              "description": "",
              "name": "onContinue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/Modal/Revoke.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Revoke",
          "methods": [],
          "props": {
            "onClose": {
              "defaultValue": null,
              "description": "",
              "name": "onClose",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Function"
              }
            },
            "onContinue": {
              "defaultValue": null,
              "description": "",
              "name": "onContinue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Function"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/View/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/View/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "View",
          "methods": [],
          "props": {
            "module": {
              "defaultValue": null,
              "description": "",
              "name": "module",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Module"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "onSelectComponent": {
              "defaultValue": null,
              "description": "",
              "name": "onSelectComponent",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(component: Component) => void"
              }
            },
            "mode": {
              "defaultValue": null,
              "description": "",
              "name": "mode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/View/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/__tests__/Comparation.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/__tests__/Tab.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Menu/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Menu/Loaders/list.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Users/Comparation/Item/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/Comparation/Item/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "getUserPathByEmail",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Users/Comparation/Item/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Item",
          "methods": [],
          "props": {
            "email": {
              "defaultValue": null,
              "description": "",
              "name": "email",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(delUserStatus: string) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Users/Comparation/Item/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/Comparation/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Users/Comparation/Loaders/list.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Users/Comparation/__tests__/UsersComparation.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Users/Create/__tests__/CreateUser.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Users/Create/__tests__/FormUser.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Users/Menu/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Users/Menu/Loaders/list.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Users/Menu/__tests__/Menu.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Users/Menu/__tests__/MenuItem.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/Menu/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/Menu/Loaders/list.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Workspaces/Menu/__tests__/MenuItem.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/Menu/__tests__/MenuWorkspace.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Workspaces/Menu/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/core/components/Button/Default/__tests__/Button.Default.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Button/Rounded/__tests__/ButtonIconRounded.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Card/Base/__tests__/Base.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Card/Body/__tests__/Body.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Card/Circle/__tests__/Circle.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Card/Config/__tests__/Config.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Card/Expand/Artifact/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Artifact",
          "methods": [],
          "props": {
            "artifact": {
              "defaultValue": null,
              "description": "",
              "name": "artifact",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Artifact"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Card/Expand/Item/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Item",
          "methods": [],
          "props": {
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Card/Expand/Item/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Card/Expand/Module/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Module",
          "methods": [],
          "props": {
            "module": {
              "defaultValue": null,
              "description": "",
              "name": "module",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Module"
              }
            },
            "branch": {
              "defaultValue": null,
              "description": "",
              "name": "branch",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Card/Expand/__tests__/Expand.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Card/Header/__tests__/Header.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Card/Main/__tests__/CardMain.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Card/Release/__tests__/Release.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Dropdown/Item/__tests__/DropdownItem.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/AceEditor/__tests__/AceEditor.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Checkbox/__tests__/Checkbox.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Input/__tests__/Input.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/InputAction/__tests__/InputAction.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/InputFile/__tests__/InputFile.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/InputGroup/__tests__/InputGroup.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/InputPhoto/__tests__/InputPhoto.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/InputTitle/__tests__/InputTitle.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Link/__tests__/Input.Link.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Password/__tests__/Password.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Radio/__tests__/Radio.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/SearchInput/__tests__/SearchInput.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/Async/Select.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Select",
          "methods": [],
          "props": {
            "placeholder": {
              "defaultValue": null,
              "description": "",
              "name": "placeholder",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option[]"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option | Option[]"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "loadOptions": {
              "defaultValue": null,
              "description": "",
              "name": "loadOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(inputValue: string, callback: (options: readonly any[]) => void) => void | Promise<any>"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: Option) => void"
              }
            },
            "onInputChange": {
              "defaultValue": null,
              "description": "",
              "name": "onInputChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(value: string) => void"
              }
            },
            "customOption": {
              "defaultValue": null,
              "description": "",
              "name": "customOption",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "customMultiValue": {
              "defaultValue": null,
              "description": "",
              "name": "customMultiValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "closeMenuOnSelect": {
              "defaultValue": null,
              "description": "",
              "name": "closeMenuOnSelect",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "hideSelectedOptions": {
              "defaultValue": null,
              "description": "",
              "name": "hideSelectedOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "components": {
              "defaultValue": null,
              "description": "",
              "name": "components",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Partial<SelectComponents<OptionTypeBase, false>>"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "hasError": {
              "defaultValue": null,
              "description": "",
              "name": "hasError",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "defaultOptions": {
              "defaultValue": null,
              "description": "",
              "name": "defaultOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option[]"
              }
            },
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "value": {
              "defaultValue": null,
              "description": "",
              "name": "value",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/Async/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Async",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "control": {
              "defaultValue": null,
              "description": "",
              "name": "control",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Control<any>"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option[]"
              }
            },
            "rules": {
              "defaultValue": null,
              "description": "",
              "name": "rules",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Partial<{ required: string | boolean; }>"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(value: Option) => void"
              }
            },
            "onInputChange": {
              "defaultValue": null,
              "description": "",
              "name": "onInputChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(value: string) => void"
              }
            },
            "customOption": {
              "defaultValue": null,
              "description": "",
              "name": "customOption",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "closeMenuOnSelect": {
              "defaultValue": null,
              "description": "",
              "name": "closeMenuOnSelect",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "hideSelectedOptions": {
              "defaultValue": null,
              "description": "",
              "name": "hideSelectedOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "defaultOptions": {
              "defaultValue": null,
              "description": "",
              "name": "defaultOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option[]"
              }
            },
            "hasError": {
              "defaultValue": null,
              "description": "",
              "name": "hasError",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "loadOptions": {
              "defaultValue": null,
              "description": "",
              "name": "loadOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(inputValue: string, callback: (options: readonly any[]) => void) => void | Promise<any>"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/CustomOption/index.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/CustomOption/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/CustomOptions/index.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/CustomOptions/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/MultiCheck/MultiValue.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MultiValue",
          "methods": [],
          "props": {
            "clearValue": {
              "defaultValue": null,
              "description": "",
              "name": "clearValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "cx": {
              "defaultValue": null,
              "description": "",
              "name": "cx",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: { [key: string]: boolean; }, className: string) => string"
              }
            },
            "getStyles": {
              "defaultValue": null,
              "description": "",
              "name": "getStyles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, props: any) => {}"
              }
            },
            "getValue": {
              "defaultValue": null,
              "description": "",
              "name": "getValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => readonly OptionTypeBase[]"
              }
            },
            "hasValue": {
              "defaultValue": null,
              "description": "",
              "name": "hasValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isMulti": {
              "defaultValue": null,
              "description": "",
              "name": "isMulti",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": true,
              "type": {
                "name": "readonly OptionTypeBase[]"
              }
            },
            "selectOption": {
              "defaultValue": null,
              "description": "",
              "name": "selectOption",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(option: OptionTypeBase) => void"
              }
            },
            "selectProps": {
              "defaultValue": null,
              "description": "",
              "name": "selectProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Props<OptionTypeBase, false>"
              }
            },
            "setValue": {
              "defaultValue": null,
              "description": "",
              "name": "setValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: readonly OptionTypeBase[], action: ActionTypes) => void"
              }
            },
            "components": {
              "defaultValue": null,
              "description": "",
              "name": "components",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "cropWithEllipsis": {
              "defaultValue": null,
              "description": "",
              "name": "cropWithEllipsis",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "OptionTypeBase"
              }
            },
            "innerProps": {
              "defaultValue": null,
              "description": "",
              "name": "innerProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "isFocused": {
              "defaultValue": null,
              "description": "",
              "name": "isFocused",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "removeProps": {
              "defaultValue": null,
              "description": "",
              "name": "removeProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ onTouchEnd: (event: any) => void; onClick: (event: any) => void; onMouseDown: (event: any) => void; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/MultiCheck/Select.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Select",
          "methods": [],
          "props": {
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "((event: Option[]) => void) & ((event: Option) => void)"
              }
            },
            "placeholder": {
              "defaultValue": null,
              "description": "",
              "name": "placeholder",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option[]"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option | Option[]"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "loadOptions": {
              "defaultValue": null,
              "description": "",
              "name": "loadOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(inputValue: string, callback: (options: readonly any[]) => void) => void | Promise<any>"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "onInputChange": {
              "defaultValue": null,
              "description": "",
              "name": "onInputChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(value: string) => void"
              }
            },
            "customOption": {
              "defaultValue": null,
              "description": "",
              "name": "customOption",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "customMultiValue": {
              "defaultValue": null,
              "description": "",
              "name": "customMultiValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "closeMenuOnSelect": {
              "defaultValue": null,
              "description": "",
              "name": "closeMenuOnSelect",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "hideSelectedOptions": {
              "defaultValue": null,
              "description": "",
              "name": "hideSelectedOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "components": {
              "defaultValue": null,
              "description": "",
              "name": "components",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Partial<SelectComponents<OptionTypeBase, false>>"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "hasError": {
              "defaultValue": null,
              "description": "",
              "name": "hasError",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "defaultOptions": {
              "defaultValue": null,
              "description": "",
              "name": "defaultOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option[]"
              }
            },
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "value": {
              "defaultValue": null,
              "description": "",
              "name": "value",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/MultiCheck/ValueContainer.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ValueContainer",
          "methods": [],
          "props": {
            "children": {
              "defaultValue": null,
              "description": "The children to be rendered.\nThe children to be rendered.",
              "name": "children",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode[][] | (ReactNode[][] & string) | (ReactNode[][] & number) | (ReactNode[][] & false) | (ReactNode[][] & true) | (ReactNode[][] & ReactElement<any, string | ((props: any) => ReactElement<any, any>) | (new (props: any) => Component<...>)>) | (ReactNode[][] & ReactNodeArray) | (ReactNode[][] & ReactPortal)"
              }
            },
            "clearValue": {
              "defaultValue": null,
              "description": "",
              "name": "clearValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "cx": {
              "defaultValue": null,
              "description": "",
              "name": "cx",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: { [key: string]: boolean; }, className: string) => string"
              }
            },
            "getStyles": {
              "defaultValue": null,
              "description": "",
              "name": "getStyles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, props: any) => {}"
              }
            },
            "getValue": {
              "defaultValue": null,
              "description": "",
              "name": "getValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => readonly OptionTypeBase[]"
              }
            },
            "hasValue": {
              "defaultValue": null,
              "description": "Whether the value container currently holds a value.",
              "name": "hasValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isMulti": {
              "defaultValue": null,
              "description": "Set when the value container should hold multiple values",
              "name": "isMulti",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": true,
              "type": {
                "name": "readonly OptionTypeBase[]"
              }
            },
            "selectOption": {
              "defaultValue": null,
              "description": "",
              "name": "selectOption",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(option: OptionTypeBase) => void"
              }
            },
            "selectProps": {
              "defaultValue": null,
              "description": "",
              "name": "selectProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Props<OptionTypeBase, false>"
              }
            },
            "setValue": {
              "defaultValue": null,
              "description": "",
              "name": "setValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: OptionTypeBase, action: ActionTypes) => void"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "OptionTypeBase"
              }
            },
            "innerProps": {
              "defaultValue": null,
              "description": "Props passed to the wrapping element for the group.",
              "name": "innerProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "Whether this is disabled",
              "name": "isDisabled",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/MultiCheck/constants.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/MultiCheck/helpers.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/MultiCheck/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MultiCheck",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "control": {
              "defaultValue": null,
              "description": "",
              "name": "control",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Control<any>"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": false,
              "type": {
                "name": "OptionTypeBase[]"
              }
            },
            "rules": {
              "defaultValue": null,
              "description": "",
              "name": "rules",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Partial<{ required: string | boolean; }>"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option[]"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(value: Option[]) => void"
              }
            },
            "onInputChange": {
              "defaultValue": null,
              "description": "",
              "name": "onInputChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(value: string) => void"
              }
            },
            "customOption": {
              "defaultValue": null,
              "description": "",
              "name": "customOption",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "closeMenuOnSelect": {
              "defaultValue": null,
              "description": "",
              "name": "closeMenuOnSelect",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "hideSelectedOptions": {
              "defaultValue": null,
              "description": "",
              "name": "hideSelectedOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/Single/FloatingLabel.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "FloatingLabel",
          "methods": [],
          "props": {
            "clearValue": {
              "defaultValue": null,
              "description": "",
              "name": "clearValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "cx": {
              "defaultValue": null,
              "description": "",
              "name": "cx",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: { [key: string]: boolean; }, className: string) => string"
              }
            },
            "getStyles": {
              "defaultValue": null,
              "description": "",
              "name": "getStyles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, props: any) => {}"
              }
            },
            "getValue": {
              "defaultValue": null,
              "description": "",
              "name": "getValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => readonly OptionTypeBase[]"
              }
            },
            "hasValue": {
              "defaultValue": null,
              "description": "Whether the value container currently holds a value.",
              "name": "hasValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isMulti": {
              "defaultValue": null,
              "description": "Set when the value container should hold multiple values",
              "name": "isMulti",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": true,
              "type": {
                "name": "readonly OptionTypeBase[]"
              }
            },
            "selectOption": {
              "defaultValue": null,
              "description": "",
              "name": "selectOption",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(option: OptionTypeBase) => void"
              }
            },
            "selectProps": {
              "defaultValue": null,
              "description": "",
              "name": "selectProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Props<OptionTypeBase, false>"
              }
            },
            "setValue": {
              "defaultValue": null,
              "description": "",
              "name": "setValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: OptionTypeBase, action: ActionTypes) => void"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "The children to be rendered.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReactNode"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/Single/Select.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Select",
          "methods": [],
          "props": {
            "placeholder": {
              "defaultValue": null,
              "description": "",
              "name": "placeholder",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option[]"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option | Option[]"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "loadOptions": {
              "defaultValue": null,
              "description": "",
              "name": "loadOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(inputValue: string, callback: (options: readonly any[]) => void) => void | Promise<any>"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: Option) => void"
              }
            },
            "onInputChange": {
              "defaultValue": null,
              "description": "",
              "name": "onInputChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(value: string) => void"
              }
            },
            "customOption": {
              "defaultValue": null,
              "description": "",
              "name": "customOption",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "customMultiValue": {
              "defaultValue": null,
              "description": "",
              "name": "customMultiValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "closeMenuOnSelect": {
              "defaultValue": null,
              "description": "",
              "name": "closeMenuOnSelect",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "hideSelectedOptions": {
              "defaultValue": null,
              "description": "",
              "name": "hideSelectedOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "components": {
              "defaultValue": null,
              "description": "",
              "name": "components",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Partial<SelectComponents<OptionTypeBase, false>>"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "hasError": {
              "defaultValue": null,
              "description": "",
              "name": "hasError",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "defaultOptions": {
              "defaultValue": null,
              "description": "",
              "name": "defaultOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option[]"
              }
            },
            "icon": {
              "defaultValue": null,
              "description": "",
              "name": "icon",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "value": {
              "defaultValue": null,
              "description": "",
              "name": "value",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/Single/SingleValue.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "SingleValue",
          "methods": [],
          "props": {
            "clearValue": {
              "defaultValue": null,
              "description": "",
              "name": "clearValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "cx": {
              "defaultValue": null,
              "description": "",
              "name": "cx",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: { [key: string]: boolean; }, className: string) => string"
              }
            },
            "getStyles": {
              "defaultValue": null,
              "description": "",
              "name": "getStyles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string, props: any) => {}"
              }
            },
            "getValue": {
              "defaultValue": null,
              "description": "",
              "name": "getValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => readonly OptionTypeBase[]"
              }
            },
            "hasValue": {
              "defaultValue": null,
              "description": "",
              "name": "hasValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isMulti": {
              "defaultValue": null,
              "description": "",
              "name": "isMulti",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": true,
              "type": {
                "name": "readonly OptionTypeBase[]"
              }
            },
            "selectOption": {
              "defaultValue": null,
              "description": "",
              "name": "selectOption",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(option: OptionTypeBase) => void"
              }
            },
            "selectProps": {
              "defaultValue": null,
              "description": "",
              "name": "selectProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Props<OptionTypeBase, false>"
              }
            },
            "setValue": {
              "defaultValue": null,
              "description": "",
              "name": "setValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: OptionTypeBase, action: ActionTypes) => void"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "The children to be rendered.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReactNode"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "OptionTypeBase"
              }
            },
            "innerProps": {
              "defaultValue": null,
              "description": "Props passed to the wrapping element for the group.",
              "name": "innerProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "Whether this is disabled",
              "name": "isDisabled",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/Single/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Single",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "control": {
              "defaultValue": null,
              "description": "",
              "name": "control",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Control<any>"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Option[]"
              }
            },
            "rules": {
              "defaultValue": null,
              "description": "",
              "name": "rules",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Partial<{ required: string | boolean; }>"
              }
            },
            "defaultValue": {
              "defaultValue": null,
              "description": "",
              "name": "defaultValue",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Option"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "isLoading": {
              "defaultValue": null,
              "description": "",
              "name": "isLoading",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(value: Option) => void"
              }
            },
            "onInputChange": {
              "defaultValue": null,
              "description": "",
              "name": "onInputChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(value: string) => void"
              }
            },
            "customOption": {
              "defaultValue": null,
              "description": "",
              "name": "customOption",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ReactNode"
              }
            },
            "closeMenuOnSelect": {
              "defaultValue": null,
              "description": "",
              "name": "closeMenuOnSelect",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "hideSelectedOptions": {
              "defaultValue": null,
              "description": "",
              "name": "hideSelectedOptions",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "hasError": {
              "defaultValue": null,
              "description": "",
              "name": "hasError",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/Single/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/__tests__/AsyncSelect.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/__tests__/FormSelect.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/__tests__/Select.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/TextArea/__tests__/TextArea.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Modal/Trigger/__tests__/Trigger.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Modal/Wizard/__tests__/Wizard.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Modal/Wizard/interfaces/ModalWizard.ts",
      "value": []
    },
    {
      "key": "src/core/components/Modal/Wizard/interfaces/ModalWizardState.ts",
      "value": []
    },
    {
      "key": "src/core/components/Notification/Log/__tests__/Log.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Panel/Content/__tests__/PanelContent.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Panel/Section/__tests__/PanelSection.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Radio/Buttons/__tests__/RadioButtons.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/CreateSegments/ImportCSV.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ImportCSV",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onSaveCircle": {
              "defaultValue": null,
              "description": "",
              "name": "onSaveCircle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/CreateSegments/Loader.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/CreateSegments/Percentage.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Percentage",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "circle": {
              "defaultValue": null,
              "description": "",
              "name": "circle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Circle"
              }
            },
            "onSaveCircle": {
              "defaultValue": null,
              "description": "",
              "name": "onSaveCircle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "isEditing": {
              "defaultValue": null,
              "description": "",
              "name": "isEditing",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/CreateSegments/Slider.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Slider",
          "methods": [],
          "props": {
            "limitValue": {
              "defaultValue": null,
              "description": "",
              "name": "limitValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "",
              "name": "isDisabled",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/CreateSegments/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "getWarningText",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/CreateSegments/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "CreateSegments",
          "methods": [],
          "props": {
            "onGoBack": {
              "defaultValue": null,
              "description": "",
              "name": "onGoBack",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "circle": {
              "defaultValue": null,
              "description": "",
              "name": "circle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Circle"
              }
            },
            "onSaveCircle": {
              "defaultValue": null,
              "description": "",
              "name": "onSaveCircle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/CreateSegments/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/History/Logs.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Logs",
          "methods": [],
          "props": {
            "deploymentId": {
              "defaultValue": null,
              "description": "",
              "name": "deploymentId",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onGoBack": {
              "defaultValue": null,
              "description": "",
              "name": "onGoBack",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/History/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "getReleaseStatus",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/History/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/History/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "History",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onGoBack": {
              "defaultValue": null,
              "description": "",
              "name": "onGoBack",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/History/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/History/types.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Layer/Components.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Components",
          "methods": [],
          "props": {
            "components": {
              "defaultValue": null,
              "description": "",
              "name": "components",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Component[]"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Layer/MetricsGroups.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MetricsGroups",
          "methods": [],
          "props": {
            "onClickCreate": {
              "defaultValue": null,
              "description": "",
              "name": "onClickCreate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "circleId": {
              "defaultValue": null,
              "description": "",
              "name": "circleId",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "circle": {
              "defaultValue": null,
              "description": "",
              "name": "circle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Circle"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Layer/Name.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Name",
          "methods": [],
          "props": {
            "name": {
              "defaultValue": null,
              "description": "",
              "name": "name",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "isDefault": {
              "defaultValue": null,
              "description": "",
              "name": "isDefault",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "onSave": {
              "defaultValue": null,
              "description": "",
              "name": "onSave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Layer/Release.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Release",
          "methods": [],
          "props": {
            "onClickCreate": {
              "defaultValue": null,
              "description": "",
              "name": "onClickCreate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"
              }
            },
            "circle": {
              "defaultValue": null,
              "description": "",
              "name": "circle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Circle"
              }
            },
            "releaseEnabled": {
              "defaultValue": null,
              "description": "",
              "name": "releaseEnabled",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Layer/Segments.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Segments",
          "methods": [],
          "props": {
            "isEditing": {
              "defaultValue": null,
              "description": "",
              "name": "isEditing",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "onClickCreate": {
              "defaultValue": null,
              "description": "",
              "name": "onClickCreate",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"
              }
            },
            "circle": {
              "defaultValue": null,
              "description": "",
              "name": "circle",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Circle"
              }
            },
            "setActiveSection": {
              "defaultValue": null,
              "description": "",
              "name": "setActiveSection",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "percentageCircles": {
              "defaultValue": null,
              "description": "",
              "name": "percentageCircles",
              "declarations": [],
              "required": false,
              "type": {
                "name": "CirclePercentagePagination"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Loaders/metricsGroupsChart.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Loaders/metricsGroupsLayer.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Loaders/tab.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/AddAction.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "AddAction",
          "methods": [],
          "props": {
            "onGoBack": {
              "defaultValue": null,
              "description": "",
              "name": "onGoBack",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "metricsGroup": {
              "defaultValue": null,
              "description": "",
              "name": "metricsGroup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "MetricsGroup"
              }
            },
            "circleId": {
              "defaultValue": null,
              "description": "",
              "name": "circleId",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "action": {
              "defaultValue": null,
              "description": "",
              "name": "action",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Action"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/AddMetric.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "AddMetric",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onGoBack": {
              "defaultValue": null,
              "description": "",
              "name": "onGoBack",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "metric": {
              "defaultValue": null,
              "description": "",
              "name": "metric",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Metric"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/AddMetricsGroup.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "AddMetricsGroup",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onCloseModal": {
              "defaultValue": null,
              "description": "",
              "name": "onCloseModal",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "onSaveGroup": {
              "defaultValue": null,
              "description": "",
              "name": "onSaveGroup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "metricGroup": {
              "defaultValue": null,
              "description": "",
              "name": "metricGroup",
              "declarations": [],
              "required": false,
              "type": {
                "name": "MetricsGroup"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/BasicQueryForm.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/enums.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "normalizeMetricOptions",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: string[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: string, b: string) => number) => string[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: string[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends string>(predicate: (this: void, value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: string, start?: number, end?: number) => string[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => string[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, string]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getCondition",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getOperator",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getThresholdStatus",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getMetricSeries",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { id: string; metric: string; result: Data[]; }"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: { id: string; metric: string; result: Data[]; }[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<{ id: string; metric: string; result: Data[]; }>[]): { id: string; metric: string; result: Data[]; }[]; (...items: ({ id: string; metric: string; result: Data[]; } | ConcatArray<{ id: string; metric: string; result: Data[]; }>)[]): { ...; }[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { id: string; metric: string; result: Data[]; }[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { id: string; metric: string; result: Data[]; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => { id: string; metric: string; result: Data[]; }[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: { id: string; metric: string; result: Data[]; }, b: { id: string; metric: string; result: Data[]; }) => number) => { id: string; metric: string; result: Data[]; }[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): { id: string; metric: string; result: Data[]; }[]; (start: number, deleteCount: number, ...items: { id: string; metric: string; result: Data[]; }[]): { id: string; metric: string; result: Data[]; }[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: { id: string; metric: string; result: Data[]; }[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: { id: string; metric: string; result: Data[]; }, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: { id: string; metric: string; result: Data[]; }, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: { id: string; metric: string; result: Data[]; }, index: number, array: { id: string; metric: string; result: Data[]; }[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: { id: string; metric: string; result: Data[]; }, index: number, array: { id: string; metric: string; result: Data[]; }[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: { id: string; metric: string; result: Data[]; }, index: number, array: { id: string; metric: string; result: Data[]; }[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: { id: string; metric: string; result: Data[]; }, index: number, array: { id: string; metric: string; result: Data[]; }[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends { id: string; metric: string; result: Data[]; }>(callbackfn: (value: { id: string; metric: string; result: Data[]; }, index: number, array: { id: string; metric: string; result: Data[]; }[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: { ...; }, index: number, array: { ...; }[]) => unknown, ..."
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: { id: string; metric: string; result: Data[]; }, currentValue: { id: string; metric: string; result: Data[]; }, currentIndex: number, array: { id: string; metric: string; result: Data[]; }[]) => { ...; }): { ...; }; (callbackfn: (previousValue: { ...; }, currentValue: { ...; }, current..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: { id: string; metric: string; result: Data[]; }, currentValue: { id: string; metric: string; result: Data[]; }, currentIndex: number, array: { id: string; metric: string; result: Data[]; }[]) => { ...; }): { ...; }; (callbackfn: (previousValue: { ...; }, currentValue: { ...; }, current..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends { id: string; metric: string; result: Data[]; }>(predicate: (this: void, value: { id: string; metric: string; result: Data[]; }, index: number, obj: { id: string; metric: string; result: Data[]; }[]) => value is S, thisArg?: any): S; (predicate: (value: { ...; }, index: number, obj: { ...; }[]) => unkno..."
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: { id: string; metric: string; result: Data[]; }, index: number, obj: { id: string; metric: string; result: Data[]; }[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: { id: string; metric: string; result: Data[]; }, start?: number, end?: number) => { id: string; metric: string; result: Data[]; }[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => { id: string; metric: string; result: Data[]; }[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<{ id: string; metric: string; result: Data[]; }>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, { id: string; metric: string; result: Data[]; }]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<{ id: string; metric: string; result: Data[]; }>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: { id: string; metric: string; result: Data[]; }, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: { id: string; metric: string; result: Data[]; }, index: number, array: { id: string; metric: string; result: Data[]; }[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "normalizeActionsOptions",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ActionType"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: ActionType[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<ActionType>[]): ActionType[]; (...items: (ActionType | ConcatArray<ActionType>)[]): ActionType[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ActionType[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => ActionType"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => ActionType[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: ActionType, b: ActionType) => number) => ActionType[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): ActionType[]; (start: number, deleteCount: number, ...items: ActionType[]): ActionType[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: ActionType[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: ActionType, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: ActionType, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: ActionType, index: number, array: ActionType[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: ActionType, index: number, array: ActionType[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: ActionType, index: number, array: ActionType[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: ActionType, index: number, array: ActionType[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends ActionType>(callbackfn: (value: ActionType, index: number, array: ActionType[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: ActionType, index: number, array: ActionType[]) => unknown, thisArg?: any): ActionType[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: ActionType, currentValue: ActionType, currentIndex: number, array: ActionType[]) => ActionType): ActionType; (callbackfn: (previousValue: ActionType, currentValue: ActionType, currentIndex: number, array: ActionType[]) => ActionType, initialValue: ActionType): ActionType; <U>(callbackf..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: ActionType, currentValue: ActionType, currentIndex: number, array: ActionType[]) => ActionType): ActionType; (callbackfn: (previousValue: ActionType, currentValue: ActionType, currentIndex: number, array: ActionType[]) => ActionType, initialValue: ActionType): ActionType; <U>(callbackf..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends ActionType>(predicate: (this: void, value: ActionType, index: number, obj: ActionType[]) => value is S, thisArg?: any): S; (predicate: (value: ActionType, index: number, obj: ActionType[]) => unknown, thisArg?: any): ActionType; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: ActionType, index: number, obj: ActionType[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: ActionType, start?: number, end?: number) => ActionType[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => ActionType[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<ActionType>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, ActionType]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<ActionType>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: ActionType, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: ActionType, index: number, array: ActionType[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/hooks.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "useSaveMetric",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "useCreateMetricsGroup",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "useSaveAction",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MetricsGroups",
          "methods": [],
          "props": {
            "id": {
              "defaultValue": null,
              "description": "",
              "name": "id",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onGoBack": {
              "defaultValue": null,
              "description": "",
              "name": "onGoBack",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/types.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Percentage/AvailablePercentage.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "AvailablePercentage",
          "methods": [],
          "props": {
            "responseGetCircles": {
              "defaultValue": null,
              "description": "",
              "name": "responseGetCircles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "CirclePercentagePagination"
              }
            },
            "circle": {
              "defaultValue": null,
              "description": "",
              "name": "circle",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Circle"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Percentage/CirclePercentageList.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "CirclePercentageList",
          "methods": [],
          "props": {
            "responseGetCircles": {
              "defaultValue": null,
              "description": "",
              "name": "responseGetCircles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "CirclePercentagePagination"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Percentage/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/__tests__/CircleComparationItem.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/__tests__/helpers.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Release/Create/__tests__/CreateRelease.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Groups/Tabs/Form/__tests__/Form.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Groups/Tabs/Form/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Groups/Tabs/Modal/__tests__/Modal.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Groups/Tabs/Modal/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Main/Sidebar/MenuItems/__tests__/MenuItems.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/History/__tests__/CircleReleasesTable.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/History/__tests__/CircleRow.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/History/__tests__/ReleaseComponentsTable.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/History/__tests__/ReleaseRow.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/History/__tests__/Summary.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/History/__tests__/SummaryRelease.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Circles/History/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/Release/__tests__/ReleaseComonentTable.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/Release/__tests__/ReleaseHistory.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/Release/__tests__/ReleaseRow.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Metrics/Deploys/Release/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/Form/__tests__/Component.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/Form/__tests__/ComponentForm.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/Form/__tests__/Components.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/Form/__tests__/helpers.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/Form/__tests__/index.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Modules/Comparation/View/__tests__/View.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Section/__tests__/Section.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/CircleMatcher/Form.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Form",
          "methods": [],
          "props": {
            "onFinish": {
              "defaultValue": null,
              "description": "",
              "name": "onFinish",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": false,
              "type": {
                "name": "CircleMatcher"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/CircleMatcher/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/CircleMatcher/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/CircleMatcher/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "CircleMatcher",
          "methods": [],
          "props": {
            "form": {
              "defaultValue": null,
              "description": "",
              "name": "form",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "setForm": {
              "defaultValue": null,
              "description": "",
              "name": "setForm",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/CircleMatcher/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/CircleMatcher/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/DeploymentConfiguration/Form.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Form",
          "methods": [],
          "props": {
            "onFinish": {
              "defaultValue": null,
              "description": "",
              "name": "onFinish",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": false,
              "type": {
                "name": "DeploymentConfiguration"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/DeploymentConfiguration/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/DeploymentConfiguration/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/DeploymentConfiguration/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "DeploymentConfiguration",
          "methods": [],
          "props": {
            "form": {
              "defaultValue": null,
              "description": "",
              "name": "form",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "setForm": {
              "defaultValue": null,
              "description": "",
              "name": "setForm",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Configuration"
              }
            },
            "onSave": {
              "defaultValue": null,
              "description": "",
              "name": "onSave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/DeploymentConfiguration/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/DeploymentConfiguration/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Git/Form.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Form",
          "methods": [],
          "props": {
            "onFinish": {
              "defaultValue": null,
              "description": "",
              "name": "onFinish",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": false,
              "type": {
                "name": "GitFormData"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Git/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Git/helpers.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Git/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Git/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Git",
          "methods": [],
          "props": {
            "form": {
              "defaultValue": null,
              "description": "",
              "name": "form",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "setForm": {
              "defaultValue": null,
              "description": "",
              "name": "setForm",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Configuration"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Git/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Git/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricAction/Form.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Form",
          "methods": [],
          "props": {
            "onFinish": {
              "defaultValue": null,
              "description": "",
              "name": "onFinish",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": false,
              "type": {
                "name": "ActionForm"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricAction/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricAction/helpers.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricAction/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricAction/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MetricAction",
          "methods": [],
          "props": {
            "form": {
              "defaultValue": null,
              "description": "",
              "name": "form",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "setForm": {
              "defaultValue": null,
              "description": "",
              "name": "setForm",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "actions": {
              "defaultValue": null,
              "description": "",
              "name": "actions",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Action[]"
              }
            },
            "getNewActions": {
              "defaultValue": null,
              "description": "",
              "name": "getNewActions",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricAction/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricAction/types.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricProvider/Form.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Form",
          "methods": [],
          "props": {
            "onFinish": {
              "defaultValue": null,
              "description": "",
              "name": "onFinish",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Datasource"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricProvider/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricProvider/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "serializePlugins",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Plugin"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Plugin[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<Plugin>[]): Plugin[]; (...items: (Plugin | ConcatArray<Plugin>)[]): Plugin[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Plugin[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => Plugin"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => Plugin[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: Plugin, b: Plugin) => number) => Plugin[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): Plugin[]; (start: number, deleteCount: number, ...items: Plugin[]): Plugin[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: Plugin[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Plugin, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Plugin, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Plugin, index: number, array: Plugin[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Plugin, index: number, array: Plugin[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: Plugin, index: number, array: Plugin[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: Plugin, index: number, array: Plugin[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Plugin>(callbackfn: (value: Plugin, index: number, array: Plugin[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: Plugin, index: number, array: Plugin[]) => unknown, thisArg?: any): Plugin[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Plugin, currentValue: Plugin, currentIndex: number, array: Plugin[]) => Plugin): Plugin; (callbackfn: (previousValue: Plugin, currentValue: Plugin, currentIndex: number, array: Plugin[]) => Plugin, initialValue: Plugin): Plugin; <U>(callbackfn: (previousValue: U, currentValue: Plugin, ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: Plugin, currentValue: Plugin, currentIndex: number, array: Plugin[]) => Plugin): Plugin; (callbackfn: (previousValue: Plugin, currentValue: Plugin, currentIndex: number, array: Plugin[]) => Plugin, initialValue: Plugin): Plugin; <U>(callbackfn: (previousValue: U, currentValue: Plugin, ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends Plugin>(predicate: (this: void, value: Plugin, index: number, obj: Plugin[]) => value is S, thisArg?: any): S; (predicate: (value: Plugin, index: number, obj: Plugin[]) => unknown, thisArg?: any): Plugin; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: Plugin, index: number, obj: Plugin[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: Plugin, start?: number, end?: number) => Plugin[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => Plugin[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Plugin>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, Plugin]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<Plugin>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: Plugin, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: Plugin, index: number, array: Plugin[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricProvider/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricProvider/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MetricProvider",
          "methods": [],
          "props": {
            "form": {
              "defaultValue": null,
              "description": "",
              "name": "form",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "setForm": {
              "defaultValue": null,
              "description": "",
              "name": "setForm",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Datasource[]"
              }
            },
            "getNewDatasources": {
              "defaultValue": null,
              "description": "",
              "name": "getNewDatasources",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricProvider/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricProvider/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/Form.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Form",
          "methods": [],
          "props": {
            "onFinish": {
              "defaultValue": null,
              "description": "",
              "name": "onFinish",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": false,
              "type": {
                "name": "UserGroup"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "reduce",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => UserGroup"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: UserGroup[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<UserGroup>[]): UserGroup[]; (...items: (UserGroup | ConcatArray<UserGroup>)[]): UserGroup[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => UserGroup[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => UserGroup"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => UserGroup[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: UserGroup, b: UserGroup) => number) => UserGroup[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): UserGroup[]; (start: number, deleteCount: number, ...items: UserGroup[]): UserGroup[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: UserGroup[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: UserGroup, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: UserGroup, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: UserGroup, index: number, array: UserGroup[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: UserGroup, index: number, array: UserGroup[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: UserGroup, index: number, array: UserGroup[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: UserGroup, index: number, array: UserGroup[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends UserGroup>(callbackfn: (value: UserGroup, index: number, array: UserGroup[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: UserGroup, index: number, array: UserGroup[]) => unknown, thisArg?: any): UserGroup[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: UserGroup, currentValue: UserGroup, currentIndex: number, array: UserGroup[]) => UserGroup): UserGroup; (callbackfn: (previousValue: UserGroup, currentValue: UserGroup, currentIndex: number, array: UserGroup[]) => UserGroup, initialValue: UserGroup): UserGroup; <U>(callbackfn: (previou..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: UserGroup, currentValue: UserGroup, currentIndex: number, array: UserGroup[]) => UserGroup): UserGroup; (callbackfn: (previousValue: UserGroup, currentValue: UserGroup, currentIndex: number, array: UserGroup[]) => UserGroup, initialValue: UserGroup): UserGroup; <U>(callbackfn: (previou..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends UserGroup>(predicate: (this: void, value: UserGroup, index: number, obj: UserGroup[]) => value is S, thisArg?: any): S; (predicate: (value: UserGroup, index: number, obj: UserGroup[]) => unknown, thisArg?: any): UserGroup; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: UserGroup, index: number, obj: UserGroup[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: UserGroup, start?: number, end?: number) => UserGroup[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => UserGroup[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<UserGroup>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, UserGroup]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<UserGroup>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: UserGroup, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: UserGroup, index: number, array: UserGroup[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "UserGroup",
          "methods": [],
          "props": {
            "form": {
              "defaultValue": null,
              "description": "",
              "name": "form",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "setForm": {
              "defaultValue": null,
              "description": "",
              "name": "setForm",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "UserGroup[]"
              }
            },
            "onSave": {
              "defaultValue": null,
              "description": "",
              "name": "onSave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Webhook/Form.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Form",
          "methods": [],
          "props": {
            "onFinish": {
              "defaultValue": null,
              "description": "",
              "name": "onFinish",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Webhook"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Webhook/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Webhook/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Webhook/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Webhook",
          "methods": [],
          "props": {
            "form": {
              "defaultValue": null,
              "description": "",
              "name": "form",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "setForm": {
              "defaultValue": null,
              "description": "",
              "name": "setForm",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Webhook[]"
              }
            },
            "onSave": {
              "defaultValue": null,
              "description": "",
              "name": "onSave",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Webhook/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Webhook/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Modal/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Modal",
          "methods": [],
          "props": {
            "title": {
              "defaultValue": null,
              "description": "",
              "name": "title",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "description": {
              "defaultValue": null,
              "description": "",
              "name": "description",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "token": {
              "defaultValue": null,
              "description": "",
              "name": "token",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "onClose": {
              "defaultValue": null,
              "description": "",
              "name": "onClose",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Modal/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Registry/ConnectionStatus.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ConnectionStatus",
          "methods": [],
          "props": {
            "type": {
              "defaultValue": null,
              "description": "",
              "name": "type",
              "declarations": [],
              "required": true,
              "type": {
                "name": "\"error\" | \"success\""
              }
            },
            "message": {
              "defaultValue": null,
              "description": "",
              "name": "message",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Registry/Form.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Form",
          "methods": [],
          "props": {
            "onFinish": {
              "defaultValue": null,
              "description": "",
              "name": "onFinish",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Registry"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Registry/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Registry/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Registry/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Registry",
          "methods": [],
          "props": {
            "form": {
              "defaultValue": null,
              "description": "",
              "name": "form",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "setForm": {
              "defaultValue": null,
              "description": "",
              "name": "setForm",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Configuration"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Registry/interfaces.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Registry/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Scopes/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "subjectTemplate",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "displayAction",
          "methods": [],
          "props": {
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of a string.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "charAt": {
              "defaultValue": null,
              "description": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
              "name": "charAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => string"
              }
            },
            "charCodeAt": {
              "defaultValue": null,
              "description": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "name": "charCodeAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(index: number) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...strings: string[]) => string"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => number"
              }
            },
            "localeCompare": {
              "defaultValue": null,
              "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
              "name": "localeCompare",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"
              }
            },
            "match": {
              "defaultValue": null,
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
              "name": "match",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"
              }
            },
            "replace": {
              "defaultValue": null,
              "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
              "name": "replace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (searchValue: Mask, replaceValue: string): string; (searchValue: Mask, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: a..."
              }
            },
            "search": {
              "defaultValue": null,
              "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
              "name": "search",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (regexp: Mask): number; (searcher: { [Symbol.search](string: string): number; }): number; }"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string"
              }
            },
            "split": {
              "defaultValue": null,
              "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
              "name": "split",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (separator: Mask, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"
              }
            },
            "substring": {
              "defaultValue": null,
              "description": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
              "name": "substring",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start: number, end?: number) => string"
              }
            },
            "toLowerCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "name": "toLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleLowerCase": {
              "defaultValue": null,
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "name": "toLocaleLowerCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toUpperCase": {
              "defaultValue": null,
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "name": "toUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleUpperCase": {
              "defaultValue": null,
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "name": "toLocaleUpperCase",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "trim": {
              "defaultValue": null,
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "name": "trim",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "length": {
              "defaultValue": null,
              "description": "Returns the length of a String object.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "substr": {
              "defaultValue": null,
              "description": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
              "name": "substr",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(from: number, length?: number) => string"
              }
            },
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "codePointAt": {
              "defaultValue": null,
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "name": "codePointAt",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(pos: number) => number"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "endsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "name": "endsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, endPosition?: number) => boolean"
              }
            },
            "normalize": {
              "defaultValue": null,
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
              "name": "normalize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }"
              }
            },
            "repeat": {
              "defaultValue": null,
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
              "name": "repeat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(count: number) => string"
              }
            },
            "startsWith": {
              "defaultValue": null,
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "name": "startsWith",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchString: string, position?: number) => boolean"
              }
            },
            "anchor": {
              "defaultValue": null,
              "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
              "name": "anchor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(name: string) => string"
              }
            },
            "big": {
              "defaultValue": null,
              "description": "Returns a <big> HTML element",
              "name": "big",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "blink": {
              "defaultValue": null,
              "description": "Returns a <blink> HTML element",
              "name": "blink",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "bold": {
              "defaultValue": null,
              "description": "Returns a <b> HTML element",
              "name": "bold",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fixed": {
              "defaultValue": null,
              "description": "Returns a <tt> HTML element",
              "name": "fixed",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "fontcolor": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the color attribute value",
              "name": "fontcolor",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(color: string) => string"
              }
            },
            "fontsize": {
              "defaultValue": null,
              "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
              "name": "fontsize",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (size: number): string; (size: string): string; }"
              }
            },
            "italics": {
              "defaultValue": null,
              "description": "Returns an <i> HTML element",
              "name": "italics",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "link": {
              "defaultValue": null,
              "description": "Returns an <a> HTML element and sets the href attribute value",
              "name": "link",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(url: string) => string"
              }
            },
            "small": {
              "defaultValue": null,
              "description": "Returns a <small> HTML element",
              "name": "small",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "strike": {
              "defaultValue": null,
              "description": "Returns a <strike> HTML element",
              "name": "strike",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sub": {
              "defaultValue": null,
              "description": "Returns a <sub> HTML element",
              "name": "sub",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "sup": {
              "defaultValue": null,
              "description": "Returns a <sup> HTML element",
              "name": "sup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "padStart": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "padEnd": {
              "defaultValue": null,
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
              "name": "padEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(maxLength: number, fillString?: string) => string"
              }
            },
            "trimEnd": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nReturns a copy with trailing whitespace removed.",
              "name": "trimEnd",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimStart": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nReturns a copy with leading whitespace removed.",
              "name": "trimStart",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimLeft": {
              "defaultValue": null,
              "description": "Removes the trailing white space and line terminator characters from a string.\nRemoves whitespace from the left end of a string.",
              "name": "trimLeft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            },
            "trimRight": {
              "defaultValue": null,
              "description": "Removes the leading white space and line terminator characters from a string.\nRemoves whitespace from the right end of a string.",
              "name": "trimRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (): string; (): string; }"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "getScopes",
          "methods": [],
          "props": {
            "length": {
              "defaultValue": null,
              "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
              "name": "length",
              "declarations": [],
              "required": true,
              "type": {
                "name": "number"
              }
            },
            "toString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array.",
              "name": "toString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "toLocaleString": {
              "defaultValue": {},
              "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
              "name": "toLocaleString",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => string"
              }
            },
            "pop": {
              "defaultValue": null,
              "description": "Removes the last element from an array and returns it.",
              "name": "pop",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "push": {
              "defaultValue": null,
              "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
              "name": "push",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: string[]) => number"
              }
            },
            "concat": {
              "defaultValue": null,
              "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
              "name": "concat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; }"
              }
            },
            "join": {
              "defaultValue": null,
              "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
              "name": "join",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(separator?: string) => string"
              }
            },
            "reverse": {
              "defaultValue": null,
              "description": "Reverses the elements in an Array.",
              "name": "reverse",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string[]"
              }
            },
            "shift": {
              "defaultValue": null,
              "description": "Removes the first element from an array and returns it.",
              "name": "shift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => string"
              }
            },
            "slice": {
              "defaultValue": null,
              "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.",
              "name": "slice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(start?: number, end?: number) => string[]"
              }
            },
            "sort": {
              "defaultValue": null,
              "description": "Sorts an array.\n@param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.",
              "name": "sort",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(compareFn?: (a: string, b: string) => number) => string[]"
              }
            },
            "splice": {
              "defaultValue": null,
              "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
              "name": "splice",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]; }"
              }
            },
            "unshift": {
              "defaultValue": null,
              "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
              "name": "unshift",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(...items: string[]) => number"
              }
            },
            "indexOf": {
              "defaultValue": null,
              "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
              "name": "indexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => number"
              }
            },
            "lastIndexOf": {
              "defaultValue": null,
              "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
              "name": "lastIndexOf",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => number"
              }
            },
            "every": {
              "defaultValue": null,
              "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "every",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "some": {
              "defaultValue": null,
              "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "some",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
              }
            },
            "forEach": {
              "defaultValue": null,
              "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "forEach",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void"
              }
            },
            "map": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "map",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]"
              }
            },
            "filter": {
              "defaultValue": null,
              "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
              "name": "filter",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; }"
              }
            },
            "reduce": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduce",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
              }
            },
            "reduceRight": {
              "defaultValue": null,
              "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
              "name": "reduceRight",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
              }
            },
            "find": {
              "defaultValue": null,
              "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "find",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <S extends string>(predicate: (this: void, value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }"
              }
            },
            "findIndex": {
              "defaultValue": null,
              "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
              "name": "findIndex",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number"
              }
            },
            "fill": {
              "defaultValue": null,
              "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
              "name": "fill",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: string, start?: number, end?: number) => string[]"
              }
            },
            "copyWithin": {
              "defaultValue": null,
              "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
              "name": "copyWithin",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(target: number, start: number, end?: number) => string[]"
              }
            },
            "__@iterator": {
              "defaultValue": null,
              "description": "Iterator",
              "name": "__@iterator",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "entries": {
              "defaultValue": null,
              "description": "Returns an iterable of key, value pairs for every entry in the array",
              "name": "entries",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<[number, string]>"
              }
            },
            "keys": {
              "defaultValue": null,
              "description": "Returns an iterable of keys in the array",
              "name": "keys",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<number>"
              }
            },
            "values": {
              "defaultValue": null,
              "description": "Returns an iterable of values in the array",
              "name": "values",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => IterableIterator<string>"
              }
            },
            "__@unscopables": {
              "defaultValue": null,
              "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "name": "__@unscopables",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
              }
            },
            "includes": {
              "defaultValue": null,
              "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
              "name": "includes",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(searchElement: string, fromIndex?: number) => boolean"
              }
            },
            "flatMap": {
              "defaultValue": null,
              "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
              "name": "flatMap",
              "declarations": [],
              "required": true,
              "type": {
                "name": "<U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U | readonly U[], thisArg?: This) => U[]"
              }
            },
            "flat": {
              "defaultValue": null,
              "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\nReturns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth. If no depth is provided, flat method defaults to the depth of 1.\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth\n@param depth The maximum recursion depth",
              "name": "flat",
              "declarations": [],
              "required": true,
              "type": {
                "name": "{ <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1): U[]; <U>(this: U[], depth: 0): U[]; <U>(depth?..."
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Scopes/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Scopes",
          "methods": [],
          "props": {
            "mode": {
              "defaultValue": null,
              "description": "",
              "name": "mode",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Mode"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Scopes/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "iconByMode",
          "methods": [],
          "props": {
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => boolean"
              }
            }
          }
        },
        {
          "tags": {},
          "description": "",
          "displayName": "labelByMode",
          "methods": [],
          "props": {
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Workspaces",
          "methods": [],
          "props": {
            "mode": {
              "defaultValue": null,
              "description": "",
              "name": "mode",
              "declarations": [],
              "required": false,
              "type": {
                "name": "Mode"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/__tests__/Form.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Modal/__tests__/Regenerate.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Modal/__tests__/Revoke.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Modal/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/Comparation/Item/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Users/Comparation/Item/Loaders/tab.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Users/Comparation/Item/__tests__/Item.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/CustomOption/Description/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Description",
          "methods": [],
          "props": {
            "getStyles": {
              "defaultValue": null,
              "description": "",
              "name": "getStyles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "((name: string, props: any) => {}) & ((name: string, props: any) => {})"
              }
            },
            "theme": {
              "defaultValue": null,
              "description": "",
              "name": "theme",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Theme"
              }
            },
            "clearValue": {
              "defaultValue": null,
              "description": "",
              "name": "clearValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "cx": {
              "defaultValue": null,
              "description": "",
              "name": "cx",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: { [key: string]: boolean; }, className: string) => string"
              }
            },
            "getValue": {
              "defaultValue": null,
              "description": "",
              "name": "getValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => readonly OptionTypeBase[]"
              }
            },
            "hasValue": {
              "defaultValue": null,
              "description": "",
              "name": "hasValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isMulti": {
              "defaultValue": null,
              "description": "",
              "name": "isMulti",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": true,
              "type": {
                "name": "readonly OptionTypeBase[]"
              }
            },
            "selectOption": {
              "defaultValue": null,
              "description": "",
              "name": "selectOption",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(option: OptionTypeBase) => void"
              }
            },
            "selectProps": {
              "defaultValue": null,
              "description": "",
              "name": "selectProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Props<OptionTypeBase, false>"
              }
            },
            "setValue": {
              "defaultValue": null,
              "description": "",
              "name": "setValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: OptionTypeBase, action: ActionTypes) => void"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "Whether the option is disabled.",
              "name": "isDisabled",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isFocused": {
              "defaultValue": null,
              "description": "Whether the option is focused.",
              "name": "isFocused",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isSelected": {
              "defaultValue": null,
              "description": "Whether the option is selected.",
              "name": "isSelected",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "The children to be rendered.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReactNode"
              }
            },
            "innerRef": {
              "defaultValue": null,
              "description": "Inner ref to DOM Node",
              "name": "innerRef",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Ref<any>"
              }
            },
            "innerProps": {
              "defaultValue": null,
              "description": "props passed to the wrapping element for the group.",
              "name": "innerProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "InnerProps"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "type": {
              "defaultValue": null,
              "description": "",
              "name": "type",
              "declarations": [],
              "required": true,
              "type": {
                "name": "\"option\""
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/CustomOption/Description/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/CustomOption/Icon/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Icon",
          "methods": [],
          "props": {
            "getStyles": {
              "defaultValue": null,
              "description": "",
              "name": "getStyles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "((name: string, props: any) => {}) & ((name: string, props: any) => {})"
              }
            },
            "theme": {
              "defaultValue": null,
              "description": "",
              "name": "theme",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Theme"
              }
            },
            "clearValue": {
              "defaultValue": null,
              "description": "",
              "name": "clearValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "cx": {
              "defaultValue": null,
              "description": "",
              "name": "cx",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: { [key: string]: boolean; }, className: string) => string"
              }
            },
            "getValue": {
              "defaultValue": null,
              "description": "",
              "name": "getValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => readonly OptionTypeBase[]"
              }
            },
            "hasValue": {
              "defaultValue": null,
              "description": "",
              "name": "hasValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isMulti": {
              "defaultValue": null,
              "description": "",
              "name": "isMulti",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": true,
              "type": {
                "name": "readonly OptionTypeBase[]"
              }
            },
            "selectOption": {
              "defaultValue": null,
              "description": "",
              "name": "selectOption",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(option: OptionTypeBase) => void"
              }
            },
            "selectProps": {
              "defaultValue": null,
              "description": "",
              "name": "selectProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Props<OptionTypeBase, false>"
              }
            },
            "setValue": {
              "defaultValue": null,
              "description": "",
              "name": "setValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: OptionTypeBase, action: ActionTypes) => void"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "Whether the option is disabled.",
              "name": "isDisabled",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isFocused": {
              "defaultValue": null,
              "description": "Whether the option is focused.",
              "name": "isFocused",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isSelected": {
              "defaultValue": null,
              "description": "Whether the option is selected.",
              "name": "isSelected",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "The children to be rendered.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReactNode"
              }
            },
            "innerRef": {
              "defaultValue": null,
              "description": "Inner ref to DOM Node",
              "name": "innerRef",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Ref<any>"
              }
            },
            "innerProps": {
              "defaultValue": null,
              "description": "props passed to the wrapping element for the group.",
              "name": "innerProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "InnerProps"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "type": {
              "defaultValue": null,
              "description": "",
              "name": "type",
              "declarations": [],
              "required": true,
              "type": {
                "name": "\"option\""
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/CustomOption/Icon/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/CustomOptions/Check/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Check",
          "methods": [],
          "props": {
            "getStyles": {
              "defaultValue": null,
              "description": "",
              "name": "getStyles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "((name: string, props: any) => {}) & ((name: string, props: any) => {})"
              }
            },
            "theme": {
              "defaultValue": null,
              "description": "",
              "name": "theme",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Theme"
              }
            },
            "clearValue": {
              "defaultValue": null,
              "description": "",
              "name": "clearValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "cx": {
              "defaultValue": null,
              "description": "",
              "name": "cx",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: { [key: string]: boolean; }, className: string) => string"
              }
            },
            "getValue": {
              "defaultValue": null,
              "description": "",
              "name": "getValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => readonly OptionTypeBase[]"
              }
            },
            "hasValue": {
              "defaultValue": null,
              "description": "",
              "name": "hasValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isMulti": {
              "defaultValue": null,
              "description": "",
              "name": "isMulti",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": true,
              "type": {
                "name": "readonly OptionTypeBase[]"
              }
            },
            "selectOption": {
              "defaultValue": null,
              "description": "",
              "name": "selectOption",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(option: OptionTypeBase) => void"
              }
            },
            "selectProps": {
              "defaultValue": null,
              "description": "",
              "name": "selectProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Props<OptionTypeBase, false>"
              }
            },
            "setValue": {
              "defaultValue": null,
              "description": "",
              "name": "setValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: OptionTypeBase, action: ActionTypes) => void"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "Whether the option is disabled.",
              "name": "isDisabled",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isFocused": {
              "defaultValue": null,
              "description": "Whether the option is focused.",
              "name": "isFocused",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isSelected": {
              "defaultValue": null,
              "description": "Whether the option is selected.",
              "name": "isSelected",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "The children to be rendered.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReactNode"
              }
            },
            "innerRef": {
              "defaultValue": null,
              "description": "Inner ref to DOM Node",
              "name": "innerRef",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Ref<any>"
              }
            },
            "innerProps": {
              "defaultValue": null,
              "description": "props passed to the wrapping element for the group.",
              "name": "innerProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "InnerProps"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "type": {
              "defaultValue": null,
              "description": "",
              "name": "type",
              "declarations": [],
              "required": true,
              "type": {
                "name": "\"option\""
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/CustomOptions/Check/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/CustomOptions/Checkbox/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Checkbox",
          "methods": [],
          "props": {
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "checked": {
              "defaultValue": null,
              "description": "",
              "name": "checked",
              "declarations": [],
              "required": false,
              "type": {
                "name": "boolean"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": false,
              "type": {
                "name": "(event: ChangeEvent<HTMLInputElement>) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/CustomOptions/Checkbox/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/CustomOptions/Description/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Description",
          "methods": [],
          "props": {
            "getStyles": {
              "defaultValue": null,
              "description": "",
              "name": "getStyles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "((name: string, props: any) => {}) & ((name: string, props: any) => {})"
              }
            },
            "theme": {
              "defaultValue": null,
              "description": "",
              "name": "theme",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Theme"
              }
            },
            "clearValue": {
              "defaultValue": null,
              "description": "",
              "name": "clearValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "cx": {
              "defaultValue": null,
              "description": "",
              "name": "cx",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: { [key: string]: boolean; }, className: string) => string"
              }
            },
            "getValue": {
              "defaultValue": null,
              "description": "",
              "name": "getValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => readonly OptionTypeBase[]"
              }
            },
            "hasValue": {
              "defaultValue": null,
              "description": "",
              "name": "hasValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isMulti": {
              "defaultValue": null,
              "description": "",
              "name": "isMulti",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": true,
              "type": {
                "name": "readonly OptionTypeBase[]"
              }
            },
            "selectOption": {
              "defaultValue": null,
              "description": "",
              "name": "selectOption",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(option: OptionTypeBase) => void"
              }
            },
            "selectProps": {
              "defaultValue": null,
              "description": "",
              "name": "selectProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Props<OptionTypeBase, false>"
              }
            },
            "setValue": {
              "defaultValue": null,
              "description": "",
              "name": "setValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: OptionTypeBase, action: ActionTypes) => void"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "Whether the option is disabled.",
              "name": "isDisabled",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isFocused": {
              "defaultValue": null,
              "description": "Whether the option is focused.",
              "name": "isFocused",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isSelected": {
              "defaultValue": null,
              "description": "Whether the option is selected.",
              "name": "isSelected",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "The children to be rendered.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReactNode"
              }
            },
            "innerRef": {
              "defaultValue": null,
              "description": "Inner ref to DOM Node",
              "name": "innerRef",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Ref<any>"
              }
            },
            "innerProps": {
              "defaultValue": null,
              "description": "props passed to the wrapping element for the group.",
              "name": "innerProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "InnerProps"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "type": {
              "defaultValue": null,
              "description": "",
              "name": "type",
              "declarations": [],
              "required": true,
              "type": {
                "name": "\"option\""
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/CustomOptions/Description/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/CustomOptions/Icon/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Icon",
          "methods": [],
          "props": {
            "getStyles": {
              "defaultValue": null,
              "description": "",
              "name": "getStyles",
              "declarations": [],
              "required": true,
              "type": {
                "name": "((name: string, props: any) => {}) & ((name: string, props: any) => {})"
              }
            },
            "theme": {
              "defaultValue": null,
              "description": "",
              "name": "theme",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Theme"
              }
            },
            "clearValue": {
              "defaultValue": null,
              "description": "",
              "name": "clearValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "className": {
              "defaultValue": null,
              "description": "",
              "name": "className",
              "declarations": [],
              "required": false,
              "type": {
                "name": "string"
              }
            },
            "cx": {
              "defaultValue": null,
              "description": "",
              "name": "cx",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(state: { [key: string]: boolean; }, className: string) => string"
              }
            },
            "getValue": {
              "defaultValue": null,
              "description": "",
              "name": "getValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => readonly OptionTypeBase[]"
              }
            },
            "hasValue": {
              "defaultValue": null,
              "description": "",
              "name": "hasValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isMulti": {
              "defaultValue": null,
              "description": "",
              "name": "isMulti",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "options": {
              "defaultValue": null,
              "description": "",
              "name": "options",
              "declarations": [],
              "required": true,
              "type": {
                "name": "readonly OptionTypeBase[]"
              }
            },
            "selectOption": {
              "defaultValue": null,
              "description": "",
              "name": "selectOption",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(option: OptionTypeBase) => void"
              }
            },
            "selectProps": {
              "defaultValue": null,
              "description": "",
              "name": "selectProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Props<OptionTypeBase, false>"
              }
            },
            "setValue": {
              "defaultValue": null,
              "description": "",
              "name": "setValue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(value: OptionTypeBase, action: ActionTypes) => void"
              }
            },
            "isDisabled": {
              "defaultValue": null,
              "description": "Whether the option is disabled.",
              "name": "isDisabled",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isFocused": {
              "defaultValue": null,
              "description": "Whether the option is focused.",
              "name": "isFocused",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "isSelected": {
              "defaultValue": null,
              "description": "Whether the option is selected.",
              "name": "isSelected",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "children": {
              "defaultValue": null,
              "description": "The children to be rendered.",
              "name": "children",
              "declarations": [],
              "required": true,
              "type": {
                "name": "ReactNode"
              }
            },
            "innerRef": {
              "defaultValue": null,
              "description": "Inner ref to DOM Node",
              "name": "innerRef",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Ref<any>"
              }
            },
            "innerProps": {
              "defaultValue": null,
              "description": "props passed to the wrapping element for the group.",
              "name": "innerProps",
              "declarations": [],
              "required": true,
              "type": {
                "name": "InnerProps"
              }
            },
            "label": {
              "defaultValue": null,
              "description": "",
              "name": "label",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "type": {
              "defaultValue": null,
              "description": "",
              "name": "type",
              "declarations": [],
              "required": true,
              "type": {
                "name": "\"option\""
              }
            },
            "data": {
              "defaultValue": null,
              "description": "",
              "name": "data",
              "declarations": [],
              "required": true,
              "type": {
                "name": "any"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/core/components/Form/Select/CustomOptions/Icon/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/MultiCheck/__tests__/helpers.spec.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/CreateSegments/__tests__/CreateSegments.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/CreateSegments/__tests__/Percentage.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/CreateSegments/__tests__/Slider.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/CreateSegments/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/CreateSegments/__tests__/helpers.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/History/Loaders/history.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Loader",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/History/Loaders/index.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Layer/__tests__/Layer.Release.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Layer/__tests__/Layer.Segments.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Layer/__tests__/MetricsGroups.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Layer/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/MetricsGroupCard/ActionCard.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ActionCard",
          "methods": [],
          "props": {
            "action": {
              "defaultValue": null,
              "description": "",
              "name": "action",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Action"
              }
            },
            "metricGroup": {
              "defaultValue": null,
              "description": "",
              "name": "metricGroup",
              "declarations": [],
              "required": false,
              "type": {
                "name": "MetricsGroup"
              }
            },
            "handleDeleteAction": {
              "defaultValue": null,
              "description": "",
              "name": "handleDeleteAction",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "handleEditAction": {
              "defaultValue": null,
              "description": "",
              "name": "handleEditAction",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/MetricsGroupCard/CardHeader.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "CardHeader",
          "methods": [],
          "props": {
            "metricGroup": {
              "defaultValue": null,
              "description": "",
              "name": "metricGroup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "MetricsGroup"
              }
            },
            "handleDeleteMetricsGroup": {
              "defaultValue": null,
              "description": "",
              "name": "handleDeleteMetricsGroup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "handleEditGroup": {
              "defaultValue": null,
              "description": "",
              "name": "handleEditGroup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/MetricsGroupCard/MetricCard.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MetricCard",
          "methods": [],
          "props": {
            "metric": {
              "defaultValue": null,
              "description": "",
              "name": "metric",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Metric"
              }
            },
            "metricGroup": {
              "defaultValue": null,
              "description": "",
              "name": "metricGroup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "MetricsGroup"
              }
            },
            "handleDeleteMetric": {
              "defaultValue": null,
              "description": "",
              "name": "handleDeleteMetric",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "handleEditMetric": {
              "defaultValue": null,
              "description": "",
              "name": "handleEditMetric",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/MetricsGroupCard/MonitoringMetrics.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MonitoringMetrics",
          "methods": [],
          "props": {
            "metricsGroupId": {
              "defaultValue": null,
              "description": "",
              "name": "metricsGroupId",
              "declarations": [],
              "required": true,
              "type": {
                "name": "string"
              }
            },
            "selectFilters": {
              "defaultValue": null,
              "description": "",
              "name": "selectFilters",
              "declarations": [],
              "required": true,
              "type": {
                "name": "OptionTypeBase[]"
              }
            },
            "onChangePeriod": {
              "defaultValue": null,
              "description": "",
              "name": "onChangePeriod",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/MetricsGroupCard/areaChart.options.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/MetricsGroupCard/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "MetricsGroupCard",
          "methods": [],
          "props": {
            "metricGroup": {
              "defaultValue": null,
              "description": "",
              "name": "metricGroup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "MetricsGroup"
              }
            },
            "loadingStatus": {
              "defaultValue": null,
              "description": "",
              "name": "loadingStatus",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "handleAddMetric": {
              "defaultValue": null,
              "description": "",
              "name": "handleAddMetric",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "handleDeleteMetricsGroup": {
              "defaultValue": null,
              "description": "",
              "name": "handleDeleteMetricsGroup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "handleDeleteMetric": {
              "defaultValue": null,
              "description": "",
              "name": "handleDeleteMetric",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "handleEditMetric": {
              "defaultValue": null,
              "description": "",
              "name": "handleEditMetric",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "handleAddAction": {
              "defaultValue": null,
              "description": "",
              "name": "handleAddAction",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "handleEditGroup": {
              "defaultValue": null,
              "description": "",
              "name": "handleEditGroup",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "handleDeleteAction": {
              "defaultValue": null,
              "description": "",
              "name": "handleDeleteAction",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            },
            "handleEditAction": {
              "defaultValue": null,
              "description": "",
              "name": "handleEditAction",
              "declarations": [],
              "required": true,
              "type": {
                "name": "Function"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/MetricsGroupCard/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/__tests__/AddAction.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/__tests__/AddMetric.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/__tests__/AddMetricsGroup.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/__tests__/BasicQueryForm.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/__tests__/MetricsGroups.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/__tests__/helpers.spec.ts",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Percentage/__tests__/AvailablePercentage.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/Percentage/__tests__/CirclePercentageList.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/CircleMatcher/__tests__/Form.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/DeploymentConfiguration/__tests__/Form.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Git/__tests__/Form.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Git/__tests__/helpers.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Git/__tests__/hooks.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricAction/__tests__/Form.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricAction/__tests__/MetricActions.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricAction/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricAction/__tests__/helpers.spec.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricAction/__tests__/hooks.spec.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricProvider/__tests__/Form.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricProvider/__tests__/MetricsProvider.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/MetricProvider/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/Loader/index.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/Loader/roles.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "roles",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/__tests__/FormUserGroup.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/__tests__/SectionUserGroup.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/UserGroup/__tests__/hooks.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Webhook/Loader/index.ts",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Webhook/Loader/roles.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "roles",
          "methods": [],
          "props": {}
        }
      ]
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Webhook/__tests__/FormWebhook.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Webhook/__tests__/SectionWebhook.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Webhook/__tests__/hooks.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Registry/__tests__/FormRegistry.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Settings/Credentials/Sections/Registry/__tests__/SectionRegistry.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Scopes/__tests__/Scopes.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/hooks.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Modal",
          "methods": [],
          "props": {
            "workspaces": {
              "defaultValue": null,
              "description": "",
              "name": "workspaces",
              "declarations": [],
              "required": true,
              "type": {
                "name": "WorkspacePaginationItem[]"
              }
            },
            "onClose": {
              "defaultValue": null,
              "description": "",
              "name": "onClose",
              "declarations": [],
              "required": true,
              "type": {
                "name": "() => void"
              }
            },
            "onContinue": {
              "defaultValue": null,
              "description": "",
              "name": "onContinue",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(workspaces: WorkspacePaginationItem[], type: Option) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Users/Comparation/Item/Modals/ResetPassword/index.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "ResetPassword",
          "methods": [],
          "props": {
            "user": {
              "defaultValue": null,
              "description": "",
              "name": "user",
              "declarations": [],
              "required": true,
              "type": {
                "name": "User"
              }
            },
            "onClose": {
              "defaultValue": null,
              "description": "",
              "name": "onClose",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(arg: boolean) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Users/Comparation/Item/Modals/ResetPassword/styled.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/CustomOption/Description/__tests__/Description.spec.tsx",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/CustomOption/Description/__tests__/fixtures.ts",
      "value": []
    },
    {
      "key": "src/core/components/Form/Select/CustomOptions/Checkbox/__tests__/Checkbox.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/MetricsGroupCard/__tests__/ActionCard.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Comparation/Item/MetricsGroups/MetricsGroupCard/__tests__/MonitoringMetrics.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/Content/Empty.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/Content/Item.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "Item",
          "methods": [],
          "props": {
            "selected": {
              "defaultValue": null,
              "description": "",
              "name": "selected",
              "declarations": [],
              "required": true,
              "type": {
                "name": "boolean"
              }
            },
            "workspace": {
              "defaultValue": null,
              "description": "",
              "name": "workspace",
              "declarations": [],
              "required": true,
              "type": {
                "name": "WorkspacePaginationItem"
              }
            },
            "onChange": {
              "defaultValue": null,
              "description": "",
              "name": "onChange",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(workspace: WorkspacePaginationItem) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/Content/List.tsx",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "List",
          "methods": [],
          "props": {
            "draft": {
              "defaultValue": null,
              "description": "",
              "name": "draft",
              "declarations": [],
              "required": true,
              "type": {
                "name": "WorkspacePaginationItem[]"
              }
            },
            "onSelect": {
              "defaultValue": null,
              "description": "",
              "name": "onSelect",
              "declarations": [],
              "required": true,
              "type": {
                "name": "(workspace: WorkspacePaginationItem) => void"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/Content/constants.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/Content/helpers.ts",
      "value": [
        {
          "tags": {},
          "description": "",
          "displayName": "checkProps",
          "methods": [],
          "props": {
            "valueOf": {
              "defaultValue": {},
              "description": "Returns the primitive value of the specified object.",
              "name": "valueOf",
              "declarations": [],
              "required": false,
              "type": {
                "name": "() => boolean"
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/Content/loader.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/Content/styled.ts",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/__tests__/Modal.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Users/Comparation/Item/Modals/ResetPassword/__tests__/ModalResetPassword.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/Content/__tests__/Item.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Tokens/Comparation/Form/Workspaces/Modal/Content/__tests__/List.spec.tsx",
      "value": []
    },
    {
      "key": "src/modules/Circles/Matcher/Loader.jsx",
      "value": [
        {
          "description": "",
          "displayName": "CirclesLoader",
          "methods": [],
          "actualName": "CirclesLoader"
        }
      ]
    }
  ]
}
