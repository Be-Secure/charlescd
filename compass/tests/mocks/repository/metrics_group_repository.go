// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/ZupIT/charlescd/compass/internal/domain"
	datasource "github.com/ZupIT/charlescd/compass/pkg/datasource"
	mock "github.com/stretchr/testify/mock"
	uuid "github.com/google/uuid"
)

// MetricsGroupRepository is an autogenerated mock type for the MetricsGroupRepository type
type MetricsGroupRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *MetricsGroupRepository) FindAll() ([]domain.MetricsGroup, error) {
	ret := _m.Called()

	var r0 []domain.MetricsGroup
	if rf, ok := ret.Get(0).(func() []domain.MetricsGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MetricsGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByWorkspaceId provides a mock function with given fields: workspaceId
func (_m *MetricsGroupRepository) FindAllByWorkspaceId(workspaceId uuid.UUID) ([]domain.MetricsGroup, error) {
	ret := _m.Called(workspaceId)

	var r0 []domain.MetricsGroup
	if rf, ok := ret.Get(0).(func(uuid.UUID) []domain.MetricsGroup); ok {
		r0 = rf(workspaceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MetricsGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(workspaceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *MetricsGroupRepository) FindById(id uuid.UUID) (domain.MetricsGroup, error) {
	ret := _m.Called(id)

	var r0 domain.MetricsGroup
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.MetricsGroup); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.MetricsGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllByCircle provides a mock function with given fields: circleId
func (_m *MetricsGroupRepository) ListAllByCircle(circleId uuid.UUID) ([]domain.MetricsGroupRepresentation, error) {
	ret := _m.Called(circleId)

	var r0 []domain.MetricsGroupRepresentation
	if rf, ok := ret.Get(0).(func(uuid.UUID) []domain.MetricsGroupRepresentation); ok {
		r0 = rf(circleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MetricsGroupRepresentation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(circleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeriodValidate provides a mock function with given fields: currentPeriod
func (_m *MetricsGroupRepository) PeriodValidate(currentPeriod string) (datasource.Period, error) {
	ret := _m.Called(currentPeriod)

	var r0 datasource.Period
	if rf, ok := ret.Get(0).(func(string) datasource.Period); ok {
		r0 = rf(currentPeriod)
	} else {
		r0 = ret.Get(0).(datasource.Period)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(currentPeriod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryByGroupID provides a mock function with given fields: id, period, interval
func (_m *MetricsGroupRepository) QueryByGroupID(id uuid.UUID, period datasource.Period, interval datasource.Period) ([]domain.MetricValues, error) {
	ret := _m.Called(id, period, interval)

	var r0 []domain.MetricValues
	if rf, ok := ret.Get(0).(func(uuid.UUID, datasource.Period, datasource.Period) []domain.MetricValues); ok {
		r0 = rf(id, period, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MetricValues)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, datasource.Period, datasource.Period) error); ok {
		r1 = rf(id, period, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: id
func (_m *MetricsGroupRepository) Remove(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResultByGroup provides a mock function with given fields: group
func (_m *MetricsGroupRepository) ResultByGroup(group domain.MetricsGroup) ([]domain.MetricResult, error) {
	ret := _m.Called(group)

	var r0 []domain.MetricResult
	if rf, ok := ret.Get(0).(func(domain.MetricsGroup) []domain.MetricResult); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MetricResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.MetricsGroup) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResultByID provides a mock function with given fields: id
func (_m *MetricsGroupRepository) ResultByID(id uuid.UUID) ([]domain.MetricResult, error) {
	ret := _m.Called(id)

	var r0 []domain.MetricResult
	if rf, ok := ret.Get(0).(func(uuid.UUID) []domain.MetricResult); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MetricResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeByCircle provides a mock function with given fields: circleId
func (_m *MetricsGroupRepository) ResumeByCircle(circleId uuid.UUID) ([]domain.MetricGroupResume, error) {
	ret := _m.Called(circleId)

	var r0 []domain.MetricGroupResume
	if rf, ok := ret.Get(0).(func(uuid.UUID) []domain.MetricGroupResume); ok {
		r0 = rf(circleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MetricGroupResume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(circleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: metricsGroup
func (_m *MetricsGroupRepository) Save(metricsGroup domain.MetricsGroup) (domain.MetricsGroup, error) {
	ret := _m.Called(metricsGroup)

	var r0 domain.MetricsGroup
	if rf, ok := ret.Get(0).(func(domain.MetricsGroup) domain.MetricsGroup); ok {
		r0 = rf(metricsGroup)
	} else {
		r0 = ret.Get(0).(domain.MetricsGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.MetricsGroup) error); ok {
		r1 = rf(metricsGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, metricsGroup
func (_m *MetricsGroupRepository) Update(id uuid.UUID, metricsGroup domain.MetricsGroup) (domain.MetricsGroup, error) {
	ret := _m.Called(id, metricsGroup)

	var r0 domain.MetricsGroup
	if rf, ok := ret.Get(0).(func(uuid.UUID, domain.MetricsGroup) domain.MetricsGroup); ok {
		r0 = rf(id, metricsGroup)
	} else {
		r0 = ret.Get(0).(domain.MetricsGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, domain.MetricsGroup) error); ok {
		r1 = rf(id, metricsGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateName provides a mock function with given fields: id, metricsGroup
func (_m *MetricsGroupRepository) UpdateName(id uuid.UUID, metricsGroup domain.MetricsGroup) (domain.MetricsGroup, error) {
	ret := _m.Called(id, metricsGroup)

	var r0 domain.MetricsGroup
	if rf, ok := ret.Get(0).(func(uuid.UUID, domain.MetricsGroup) domain.MetricsGroup); ok {
		r0 = rf(id, metricsGroup)
	} else {
		r0 = ret.Get(0).(domain.MetricsGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, domain.MetricsGroup) error); ok {
		r1 = rf(id, metricsGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
