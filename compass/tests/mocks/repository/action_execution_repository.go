// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/ZupIT/charlescd/compass/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ActionExecutionRepository is an autogenerated mock type for the ActionExecutionRepository type
type ActionExecutionRepository struct {
	mock.Mock
}

// CreateNewExecution provides a mock function with given fields: groupActionID
func (_m *ActionExecutionRepository) CreateNewExecution(groupActionID uuid.UUID) (domain.ActionsExecutions, error) {
	ret := _m.Called(groupActionID)

	var r0 domain.ActionsExecutions
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.ActionsExecutions); ok {
		r0 = rf(groupActionID)
	} else {
		r0 = ret.Get(0).(domain.ActionsExecutions)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(groupActionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumberOfActionExecutions provides a mock function with given fields: groupActionID
func (_m *ActionExecutionRepository) GetNumberOfActionExecutions(groupActionID uuid.UUID) (int64, error) {
	ret := _m.Called(groupActionID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uuid.UUID) int64); ok {
		r0 = rf(groupActionID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(groupActionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetExecutionFailed provides a mock function with given fields: actionExecutionID, executionLog
func (_m *ActionExecutionRepository) SetExecutionFailed(actionExecutionID uuid.UUID, executionLog string) (domain.ActionsExecutions, error) {
	ret := _m.Called(actionExecutionID, executionLog)

	var r0 domain.ActionsExecutions
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) domain.ActionsExecutions); ok {
		r0 = rf(actionExecutionID, executionLog)
	} else {
		r0 = ret.Get(0).(domain.ActionsExecutions)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(actionExecutionID, executionLog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetExecutionSuccess provides a mock function with given fields: actionExecutionID, executionLog
func (_m *ActionExecutionRepository) SetExecutionSuccess(actionExecutionID uuid.UUID, executionLog string) (domain.ActionsExecutions, error) {
	ret := _m.Called(actionExecutionID, executionLog)

	var r0 domain.ActionsExecutions
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) domain.ActionsExecutions); ok {
		r0 = rf(actionExecutionID, executionLog)
	} else {
		r0 = ret.Get(0).(domain.ActionsExecutions)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(actionExecutionID, executionLog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
