// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/ZupIT/charlescd/compass/internal/domain"
	datasource "github.com/ZupIT/charlescd/compass/pkg/datasource"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MetricRepository is an autogenerated mock type for the MetricRepository type
type MetricRepository struct {
	mock.Mock
}

// CountMetrics provides a mock function with given fields: metrics
func (_m *MetricRepository) CountMetrics(metrics []domain.Metric) (int, int, int) {
	ret := _m.Called(metrics)

	var r0 int
	if rf, ok := ret.Get(0).(func([]domain.Metric) int); ok {
		r0 = rf(metrics)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func([]domain.Metric) int); ok {
		r1 = rf(metrics)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func([]domain.Metric) int); ok {
		r2 = rf(metrics)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// FindAllByGroup provides a mock function with given fields: metricGroupID
func (_m *MetricRepository) FindAllByGroup(metricGroupID uuid.UUID) ([]domain.Metric, error) {
	ret := _m.Called(metricGroupID)

	var r0 []domain.Metric
	if rf, ok := ret.Get(0).(func(uuid.UUID) []domain.Metric); ok {
		r0 = rf(metricGroupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Metric)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(metricGroupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllMetricExecutions provides a mock function with given fields:
func (_m *MetricRepository) FindAllMetricExecutions() ([]domain.MetricExecution, error) {
	ret := _m.Called()

	var r0 []domain.MetricExecution
	if rf, ok := ret.Get(0).(func() []domain.MetricExecution); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MetricExecution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMetricById provides a mock function with given fields: id
func (_m *MetricRepository) FindMetricById(id uuid.UUID) (domain.Metric, error) {
	ret := _m.Called(id)

	var r0 domain.Metric
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.Metric); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Metric)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: metric, period, interval
func (_m *MetricRepository) Query(metric domain.Metric, period datasource.Period, interval datasource.Period) (interface{}, error) {
	ret := _m.Called(metric, period, interval)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(domain.Metric, datasource.Period, datasource.Period) interface{}); ok {
		r0 = rf(metric, period, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Metric, datasource.Period, datasource.Period) error); ok {
		r1 = rf(metric, period, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMetric provides a mock function with given fields: id
func (_m *MetricRepository) RemoveMetric(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResultQuery provides a mock function with given fields: metric
func (_m *MetricRepository) ResultQuery(metric domain.Metric) (float64, error) {
	ret := _m.Called(metric)

	var r0 float64
	if rf, ok := ret.Get(0).(func(domain.Metric) float64); ok {
		r0 = rf(metric)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Metric) error); ok {
		r1 = rf(metric)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMetric provides a mock function with given fields: metric
func (_m *MetricRepository) SaveMetric(metric domain.Metric) (domain.Metric, error) {
	ret := _m.Called(metric)

	var r0 domain.Metric
	if rf, ok := ret.Get(0).(func(domain.Metric) domain.Metric); ok {
		r0 = rf(metric)
	} else {
		r0 = ret.Get(0).(domain.Metric)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Metric) error); ok {
		r1 = rf(metric)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetric provides a mock function with given fields: metric
func (_m *MetricRepository) UpdateMetric(metric domain.Metric) (domain.Metric, error) {
	ret := _m.Called(metric)

	var r0 domain.Metric
	if rf, ok := ret.Get(0).(func(domain.Metric) domain.Metric); ok {
		r0 = rf(metric)
	} else {
		r0 = ret.Get(0).(domain.Metric)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Metric) error); ok {
		r1 = rf(metric)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetricExecution provides a mock function with given fields: metricExecution
func (_m *MetricRepository) UpdateMetricExecution(metricExecution domain.MetricExecution) (domain.MetricExecution, error) {
	ret := _m.Called(metricExecution)

	var r0 domain.MetricExecution
	if rf, ok := ret.Get(0).(func(domain.MetricExecution) domain.MetricExecution); ok {
		r0 = rf(metricExecution)
	} else {
		r0 = ret.Get(0).(domain.MetricExecution)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.MetricExecution) error); ok {
		r1 = rf(metricExecution)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateIfExecutionReached provides a mock function with given fields: metric
func (_m *MetricRepository) ValidateIfExecutionReached(metric domain.MetricExecution) bool {
	ret := _m.Called(metric)

	var r0 bool
	if rf, ok := ret.Get(0).(func(domain.MetricExecution) bool); ok {
		r0 = rf(metric)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
