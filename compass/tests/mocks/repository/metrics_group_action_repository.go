// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/ZupIT/charlescd/compass/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MetricsGroupActionRepository is an autogenerated mock type for the MetricsGroupActionRepository type
type MetricsGroupActionRepository struct {
	mock.Mock
}

// DeleteGroupAction provides a mock function with given fields: id
func (_m *MetricsGroupActionRepository) DeleteGroupAction(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindGroupActionById provides a mock function with given fields: id
func (_m *MetricsGroupActionRepository) FindGroupActionById(id uuid.UUID) (domain.MetricsGroupAction, error) {
	ret := _m.Called(id)

	var r0 domain.MetricsGroupAction
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.MetricsGroupAction); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.MetricsGroupAction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroupActionExecutionResumeByGroup provides a mock function with given fields: groupID
func (_m *MetricsGroupActionRepository) ListGroupActionExecutionResumeByGroup(groupID uuid.UUID) ([]domain.GroupActionExecutionStatusResume, error) {
	ret := _m.Called(groupID)

	var r0 []domain.GroupActionExecutionStatusResume
	if rf, ok := ret.Get(0).(func(uuid.UUID) []domain.GroupActionExecutionStatusResume); ok {
		r0 = rf(groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.GroupActionExecutionStatusResume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveGroupAction provides a mock function with given fields: metricsGroupAction
func (_m *MetricsGroupActionRepository) SaveGroupAction(metricsGroupAction domain.MetricsGroupAction) (domain.MetricsGroupAction, error) {
	ret := _m.Called(metricsGroupAction)

	var r0 domain.MetricsGroupAction
	if rf, ok := ret.Get(0).(func(domain.MetricsGroupAction) domain.MetricsGroupAction); ok {
		r0 = rf(metricsGroupAction)
	} else {
		r0 = ret.Get(0).(domain.MetricsGroupAction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.MetricsGroupAction) error); ok {
		r1 = rf(metricsGroupAction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroupAction provides a mock function with given fields: id, metricsGroupAction
func (_m *MetricsGroupActionRepository) UpdateGroupAction(id uuid.UUID, metricsGroupAction domain.MetricsGroupAction) (domain.MetricsGroupAction, error) {
	ret := _m.Called(id, metricsGroupAction)

	var r0 domain.MetricsGroupAction
	if rf, ok := ret.Get(0).(func(uuid.UUID, domain.MetricsGroupAction) domain.MetricsGroupAction); ok {
		r0 = rf(id, metricsGroupAction)
	} else {
		r0 = ret.Get(0).(domain.MetricsGroupAction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, domain.MetricsGroupAction) error); ok {
		r1 = rf(id, metricsGroupAction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateActionCanBeExecuted provides a mock function with given fields: metricsGroupAction
func (_m *MetricsGroupActionRepository) ValidateActionCanBeExecuted(metricsGroupAction domain.MetricsGroupAction) bool {
	ret := _m.Called(metricsGroupAction)

	var r0 bool
	if rf, ok := ret.Get(0).(func(domain.MetricsGroupAction) bool); ok {
		r0 = rf(metricsGroupAction)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
