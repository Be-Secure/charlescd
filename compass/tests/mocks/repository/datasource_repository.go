// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/ZupIT/charlescd/compass/internal/domain"
	datasource "github.com/ZupIT/charlescd/compass/pkg/datasource"

	json "encoding/json"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// DatasourceRepository is an autogenerated mock type for the DatasourceRepository type
type DatasourceRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *DatasourceRepository) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllByWorkspace provides a mock function with given fields: workspaceID
func (_m *DatasourceRepository) FindAllByWorkspace(workspaceID uuid.UUID) ([]domain.Datasource, error) {
	ret := _m.Called(workspaceID)

	var r0 []domain.Datasource
	if rf, ok := ret.Get(0).(func(uuid.UUID) []domain.Datasource); ok {
		r0 = rf(workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Datasource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *DatasourceRepository) FindById(id uuid.UUID) (domain.Datasource, error) {
	ret := _m.Called(id)

	var r0 domain.Datasource
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.Datasource); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Datasource)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetrics provides a mock function with given fields: dataSourceID
func (_m *DatasourceRepository) GetMetrics(dataSourceID uuid.UUID) (datasource.MetricList, error) {
	ret := _m.Called(dataSourceID)

	var r0 datasource.MetricList
	if rf, ok := ret.Get(0).(func(uuid.UUID) datasource.MetricList); ok {
		r0 = rf(dataSourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datasource.MetricList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(dataSourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: dataSource
func (_m *DatasourceRepository) Save(dataSource domain.Datasource) (domain.Datasource, error) {
	ret := _m.Called(dataSource)

	var r0 domain.Datasource
	if rf, ok := ret.Get(0).(func(domain.Datasource) domain.Datasource); ok {
		r0 = rf(dataSource)
	} else {
		r0 = ret.Get(0).(domain.Datasource)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Datasource) error); ok {
		r1 = rf(dataSource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestConnection provides a mock function with given fields: pluginSrc, datasourceData
func (_m *DatasourceRepository) TestConnection(pluginSrc string, datasourceData json.RawMessage) error {
	ret := _m.Called(pluginSrc, datasourceData)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, json.RawMessage) error); ok {
		r0 = rf(pluginSrc, datasourceData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
