// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/ZupIT/charlescd/compass/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ActionRepository is an autogenerated mock type for the ActionRepository type
type ActionRepository struct {
	mock.Mock
}

// DeleteAction provides a mock function with given fields: id
func (_m *ActionRepository) DeleteAction(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindActionById provides a mock function with given fields: id
func (_m *ActionRepository) FindActionById(id uuid.UUID) (domain.Action, error) {
	ret := _m.Called(id)

	var r0 domain.Action
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.Action); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Action)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindActionByIdAndWorkspace provides a mock function with given fields: id, workspaceID
func (_m *ActionRepository) FindActionByIdAndWorkspace(id uuid.UUID, workspaceID uuid.UUID) (domain.Action, error) {
	ret := _m.Called(id, workspaceID)

	var r0 domain.Action
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) domain.Action); ok {
		r0 = rf(id, workspaceID)
	} else {
		r0 = ret.Get(0).(domain.Action)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(id, workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllActionsByWorkspace provides a mock function with given fields: workspaceID
func (_m *ActionRepository) FindAllActionsByWorkspace(workspaceID uuid.UUID) ([]domain.Action, error) {
	ret := _m.Called(workspaceID)

	var r0 []domain.Action
	if rf, ok := ret.Get(0).(func(uuid.UUID) []domain.Action); ok {
		r0 = rf(workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Action)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAction provides a mock function with given fields: action
func (_m *ActionRepository) SaveAction(action domain.Action) (domain.Action, error) {
	ret := _m.Called(action)

	var r0 domain.Action
	if rf, ok := ret.Get(0).(func(domain.Action) domain.Action); ok {
		r0 = rf(action)
	} else {
		r0 = ret.Get(0).(domain.Action)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Action) error); ok {
		r1 = rf(action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
