{{- if .Values.hermes.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.hermes.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.hermes.name }}
    version: {{ .Values.hermes.name }}
spec:
  replicas: {{ .Values.hermes.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.hermes.name }}
      version: {{ .Values.hermes.name }}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: '{{ .Values.sidecarIstio.enabled }}' 
      labels:
        app: {{ .Values.hermes.name }}
        version: {{ .Values.hermes.name }}
    spec:
      initContainers:
      - name: check-db-ready
        image: postgres:9.6.5
        command: ['sh', '-c', 
          'until pg_isready -h {{ .Values.hermes.database.host}} -p 5432; 
          do echo waiting for database; sleep 2; done;']
      containers:
        - name: {{ .Values.hermes.name }}
          image: {{ .Values.hermes.image.name }}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP  
            initialDelaySeconds: 120
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1   
          imagePullPolicy: {{ .Values.hermes.image.pullPolicy }}
          env:
          - name: DB_USER
            value: "{{ .Values.hermes.database.user }}"
          - name: DB_PASSWORD
            value: "{{ .Values.hermes.database.password }}"
          - name: DB_HOST
            value: "{{ .Values.hermes.database.host }}"
          - name: DB_NAME
            value: "{{ .Values.hermes.database.name }}"
          - name: DB_PORT
            value: "{{ .Values.hermes.database.port }}"
          {{ range $i, $var := .Values.hermes.envVars -}}
          - name: {{ $var.name | upper}}
            value: {{ $var.value | quote}}
          {{ end }}
          {{ range $i, $var := .Values.hermes.secretEnvVars -}}
          - name: {{ $var.name | upper }}
            valueFrom:
              secretKeyRef:
                name: {{ $var.secretName }}
                key: {{ $var.secretKey }}
          {{ end }}
          resources:
{{ toYaml .Values.hermes.resources | indent 12 }}
    {{- with .Values.hermes.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.hermes.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.hermes.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- end }}

